typedef unsigned char   undefined;

typedef unsigned int    ImageBaseOffset32;
typedef unsigned char    bool;
typedef unsigned char    byte;
typedef unsigned int    dword;
float10
typedef long long    longlong;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined4;
typedef unsigned long long    undefined8;
typedef unsigned short    ushort;
typedef short    wchar_t;
typedef unsigned short    word;
typedef ulong ULONG_PTR;

typedef ULONG_PTR DWORD_PTR;

typedef ULONG_PTR * PSIZE_T;

typedef ULONG_PTR SIZE_T;

typedef struct __lc_time_data __lc_time_data, *P__lc_time_data;

struct __lc_time_data {
    char * wday_abbr[7];
    char * wday[7];
    char * month_abbr[12];
    char * month[12];
    char * ampm[2];
    char * ww_sdatefmt;
    char * ww_ldatefmt;
    char * ww_timefmt;
    int ww_caltype;
    int refcount;
    wchar_t * _W_wday_abbr[7];
    wchar_t * _W_wday[7];
    wchar_t * _W_month_abbr[12];
    wchar_t * _W_month[12];
    wchar_t * _W_ampm[2];
    wchar_t * _W_ww_sdatefmt;
    wchar_t * _W_ww_ldatefmt;
    wchar_t * _W_ww_timefmt;
    wchar_t * _W_ww_locale_name;
};

typedef long __time32_t;

typedef longlong __time64_t;

typedef struct localeinfo_struct localeinfo_struct, *Plocaleinfo_struct;

typedef struct localeinfo_struct * _locale_t;

typedef struct threadlocaleinfostruct threadlocaleinfostruct, *Pthreadlocaleinfostruct;

typedef struct threadlocaleinfostruct * pthreadlocinfo;

typedef struct threadmbcinfostruct threadmbcinfostruct, *Pthreadmbcinfostruct;

typedef struct threadmbcinfostruct * pthreadmbcinfo;

typedef struct localerefcount localerefcount, *Plocalerefcount;

typedef struct localerefcount locrefcount;

typedef struct lconv lconv, *Plconv;

struct lconv {
    char * decimal_point;
    char * thousands_sep;
    char * grouping;
    char * int_curr_symbol;
    char * currency_symbol;
    char * mon_decimal_point;
    char * mon_thousands_sep;
    char * mon_grouping;
    char * positive_sign;
    char * negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
    wchar_t * _W_decimal_point;
    wchar_t * _W_thousands_sep;
    wchar_t * _W_int_curr_symbol;
    wchar_t * _W_currency_symbol;
    wchar_t * _W_mon_decimal_point;
    wchar_t * _W_mon_thousands_sep;
    wchar_t * _W_positive_sign;
    wchar_t * _W_negative_sign;
};

struct localerefcount {
    char * locale;
    wchar_t * wlocale;
    int * refcount;
    int * wrefcount;
};

struct threadlocaleinfostruct {
    int refcount;
    uint lc_codepage;
    uint lc_collate_cp;
    uint lc_time_cp;
    locrefcount lc_category[6];
    int lc_clike;
    int mb_cur_max;
    int * lconv_intl_refcount;
    int * lconv_num_refcount;
    int * lconv_mon_refcount;
    struct lconv * lconv;
    int * ctype1_refcount;
    ushort * ctype1;
    ushort * pctype;
    uchar * pclmap;
    uchar * pcumap;
    struct __lc_time_data * lc_time_curr;
    wchar_t * locale_name[6];
};

struct threadmbcinfostruct {
    int refcount;
    int mbcodepage;
    int ismbcodepage;
    ushort mbulinfo[6];
    uchar mbctype[257];
    uchar mbcasemap[256];
    wchar_t * mblocalename;
};

struct localeinfo_struct {
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
};

typedef int errno_t;

typedef int intptr_t;

typedef int ptrdiff_t;

typedef uint size_t;

typedef size_t rsize_t;

typedef ushort wctype_t;

typedef ushort wint_t;

typedef struct dual_state_global<char**> dual_state_global<char**>, *Pdual_state_global<char**>;

struct dual_state_global<char**> { /* PlaceHolder Structure */
};

typedef struct dual_state_global<struct___crt_locale_data*> dual_state_global<struct___crt_locale_data*>, *Pdual_state_global<struct___crt_locale_data*>;

struct dual_state_global<struct___crt_locale_data*> { /* PlaceHolder Structure */
};

typedef struct common_data<char> common_data<char>, *Pcommon_data<char>;

struct common_data<char> { /* PlaceHolder Structure */
};

typedef struct common_data<wchar_t> common_data<wchar_t>, *Pcommon_data<wchar_t>;

struct common_data<wchar_t> { /* PlaceHolder Structure */
};

typedef struct formatting_buffer formatting_buffer, *Pformatting_buffer;

struct formatting_buffer { /* PlaceHolder Structure */
};

typedef enum length_modifier {
} length_modifier;

typedef struct output_processor<char,class___crt_stdio_output::string_output_adapter<char>,class___crt_stdio_output::format_validation_base<char,class___crt_stdio_output::string_output_adapter<char>_>_> output_processor<char,class___crt_stdio_output::string_output_adapter<char>,class___crt_stdio_output::format_validation_base<char,class___crt_stdio_output::string_output_adapter<char>_>_>, *Poutput_processor<char,class___crt_stdio_output::string_output_adapter<char>,class___crt_stdio_output::format_validation_base<char,class___crt_stdio_output::string_output_adapter<char>_>_>;

struct output_processor<char,class___crt_stdio_output::string_output_adapter<char>,class___crt_stdio_output::format_validation_base<char,class___crt_stdio_output::string_output_adapter<char>_>_> { /* PlaceHolder Structure */
};

typedef struct output_processor<char,class___crt_stdio_output::string_output_adapter<char>,class___crt_stdio_output::standard_base<char,class___crt_stdio_output::string_output_adapter<char>_>_> output_processor<char,class___crt_stdio_output::string_output_adapter<char>,class___crt_stdio_output::standard_base<char,class___crt_stdio_output::string_output_adapter<char>_>_>, *Poutput_processor<char,class___crt_stdio_output::string_output_adapter<char>,class___crt_stdio_output::standard_base<char,class___crt_stdio_output::string_output_adapter<char>_>_>;

struct output_processor<char,class___crt_stdio_output::string_output_adapter<char>,class___crt_stdio_output::standard_base<char,class___crt_stdio_output::string_output_adapter<char>_>_> { /* PlaceHolder Structure */
};

typedef struct output_processor<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>,class___crt_stdio_output::format_validation_base<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>_>_> output_processor<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>,class___crt_stdio_output::format_validation_base<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>_>_>, *Poutput_processor<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>,class___crt_stdio_output::format_validation_base<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>_>_>;

struct output_processor<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>,class___crt_stdio_output::format_validation_base<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>_>_> { /* PlaceHolder Structure */
};

typedef struct output_processor<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>,class___crt_stdio_output::standard_base<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>_>_> output_processor<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>,class___crt_stdio_output::standard_base<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>_>_>, *Poutput_processor<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>,class___crt_stdio_output::standard_base<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>_>_>;

struct output_processor<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>,class___crt_stdio_output::standard_base<wchar_t,class___crt_stdio_output::string_output_adapter<wchar_t>_>_> { /* PlaceHolder Structure */
};

typedef struct stream_output_adapter<char> stream_output_adapter<char>, *Pstream_output_adapter<char>;

struct stream_output_adapter<char> { /* PlaceHolder Structure */
};

typedef struct stream_output_adapter<wchar_t> stream_output_adapter<wchar_t>, *Pstream_output_adapter<wchar_t>;

struct stream_output_adapter<wchar_t> { /* PlaceHolder Structure */
};

typedef struct string_output_adapter<char> string_output_adapter<char>, *Pstring_output_adapter<char>;

struct string_output_adapter<char> { /* PlaceHolder Structure */
};

typedef struct string_output_adapter<wchar_t> string_output_adapter<wchar_t>, *Pstring_output_adapter<wchar_t>;

struct string_output_adapter<wchar_t> { /* PlaceHolder Structure */
};

typedef struct big_integer big_integer, *Pbig_integer;

struct big_integer { /* PlaceHolder Structure */
};

typedef struct c_string_character_source<char> c_string_character_source<char>, *Pc_string_character_source<char>;

struct c_string_character_source<char> { /* PlaceHolder Structure */
};

typedef struct c_string_character_source<wchar_t> c_string_character_source<wchar_t>, *Pc_string_character_source<wchar_t>;

struct c_string_character_source<wchar_t> { /* PlaceHolder Structure */
};

typedef struct argument_list<char> argument_list<char>, *Pargument_list<char>;

struct argument_list<char> { /* PlaceHolder Structure */
};

typedef struct file_options file_options, *Pfile_options;

struct file_options { /* PlaceHolder Structure */
};

typedef enum function_id {
} function_id;

typedef enum module_id {
} module_id;

typedef struct scoped_fp_state_reset scoped_fp_state_reset, *Pscoped_fp_state_reset;

struct scoped_fp_state_reset { /* PlaceHolder Structure */
};

typedef struct write_result write_result, *Pwrite_result;

struct write_result { /* PlaceHolder Structure */
};

typedef struct _ATL_BASE_MODULE70 _ATL_BASE_MODULE70, *P_ATL_BASE_MODULE70;

struct _ATL_BASE_MODULE70 { /* PlaceHolder Structure */
};

typedef struct CAtlBaseModule CAtlBaseModule, *PCAtlBaseModule;

struct CAtlBaseModule { /* PlaceHolder Structure */
};

typedef struct CSimpleArray<struct_HINSTANCE__*,class_ATL::CSimpleArrayEqualHelper<struct_HINSTANCE__*>_> CSimpleArray<struct_HINSTANCE__*,class_ATL::CSimpleArrayEqualHelper<struct_HINSTANCE__*>_>, *PCSimpleArray<struct_HINSTANCE__*,class_ATL::CSimpleArrayEqualHelper<struct_HINSTANCE__*>_>;

struct CSimpleArray<struct_HINSTANCE__*,class_ATL::CSimpleArrayEqualHelper<struct_HINSTANCE__*>_> { /* PlaceHolder Structure */
};

typedef enum event {
} event;

typedef struct _Fac_node _Fac_node, *P_Fac_node;

struct _Fac_node { /* PlaceHolder Structure */
};

typedef struct _Fac_tidy_reg_t _Fac_tidy_reg_t, *P_Fac_tidy_reg_t;

struct _Fac_tidy_reg_t { /* PlaceHolder Structure */
};

typedef struct _Init_locks _Init_locks, *P_Init_locks;

struct _Init_locks { /* PlaceHolder Structure */
};

typedef struct _Locinfo _Locinfo, *P_Locinfo;

struct _Locinfo { /* PlaceHolder Structure */
};

typedef struct _Lockit _Lockit, *P_Lockit;

struct _Lockit { /* PlaceHolder Structure */
};

typedef struct _Sys_errtab_t _Sys_errtab_t, *P_Sys_errtab_t;

struct _Sys_errtab_t { /* PlaceHolder Structure */
};

typedef enum _Uninitialized {
} _Uninitialized;

typedef struct _Yarn<char> _Yarn<char>, *P_Yarn<char>;

struct _Yarn<char> { /* PlaceHolder Structure */
};

typedef struct error_code error_code, *Perror_code;

struct error_code { /* PlaceHolder Structure */
};

typedef struct error_condition error_condition, *Perror_condition;

struct error_condition { /* PlaceHolder Structure */
};

typedef struct ios_base ios_base, *Pios_base;

struct ios_base { /* PlaceHolder Structure */
};

typedef struct locale locale, *Plocale;

struct locale { /* PlaceHolder Structure */
};

typedef struct <lambda_0f92d0c5a8007722f95b3b6c71cd8e3e> <lambda_0f92d0c5a8007722f95b3b6c71cd8e3e>, *P<lambda_0f92d0c5a8007722f95b3b6c71cd8e3e>;

struct <lambda_0f92d0c5a8007722f95b3b6c71cd8e3e> { /* PlaceHolder Structure */
};

typedef struct <lambda_108d78a972a15edee025c8b3efe121dc> <lambda_108d78a972a15edee025c8b3efe121dc>, *P<lambda_108d78a972a15edee025c8b3efe121dc>;

struct <lambda_108d78a972a15edee025c8b3efe121dc> { /* PlaceHolder Structure */
};

typedef struct <lambda_11b4f7b0d3157825a5656a18eba1ae27> <lambda_11b4f7b0d3157825a5656a18eba1ae27>, *P<lambda_11b4f7b0d3157825a5656a18eba1ae27>;

struct <lambda_11b4f7b0d3157825a5656a18eba1ae27> { /* PlaceHolder Structure */
};

typedef struct <lambda_14e08a59e78d15c51edeee53d25fb3be> <lambda_14e08a59e78d15c51edeee53d25fb3be>, *P<lambda_14e08a59e78d15c51edeee53d25fb3be>;

struct <lambda_14e08a59e78d15c51edeee53d25fb3be> { /* PlaceHolder Structure */
};

typedef struct <lambda_17c2d007e408fdf31ce10a4c853c6ffa> <lambda_17c2d007e408fdf31ce10a4c853c6ffa>, *P<lambda_17c2d007e408fdf31ce10a4c853c6ffa>;

struct <lambda_17c2d007e408fdf31ce10a4c853c6ffa> { /* PlaceHolder Structure */
};

typedef struct <lambda_1a39be00af773e7199199dafcba04cc5> <lambda_1a39be00af773e7199199dafcba04cc5>, *P<lambda_1a39be00af773e7199199dafcba04cc5>;

struct <lambda_1a39be00af773e7199199dafcba04cc5> { /* PlaceHolder Structure */
};

typedef struct <lambda_23f7b878b898c94fa2ed1f456836a8dc> <lambda_23f7b878b898c94fa2ed1f456836a8dc>, *P<lambda_23f7b878b898c94fa2ed1f456836a8dc>;

struct <lambda_23f7b878b898c94fa2ed1f456836a8dc> { /* PlaceHolder Structure */
};

typedef struct <lambda_24b35df97fd4c1fecac72a72d95cc146> <lambda_24b35df97fd4c1fecac72a72d95cc146>, *P<lambda_24b35df97fd4c1fecac72a72d95cc146>;

struct <lambda_24b35df97fd4c1fecac72a72d95cc146> { /* PlaceHolder Structure */
};

typedef struct <lambda_2f900415df1f7f624cdaaefe86d0b1c0> <lambda_2f900415df1f7f624cdaaefe86d0b1c0>, *P<lambda_2f900415df1f7f624cdaaefe86d0b1c0>;

struct <lambda_2f900415df1f7f624cdaaefe86d0b1c0> { /* PlaceHolder Structure */
};

typedef struct <lambda_321f9d61c14d59ff00145e45db1313e0> <lambda_321f9d61c14d59ff00145e45db1313e0>, *P<lambda_321f9d61c14d59ff00145e45db1313e0>;

struct <lambda_321f9d61c14d59ff00145e45db1313e0> { /* PlaceHolder Structure */
};

typedef struct <lambda_3298c911d7b53f44106027a7fde9a80a> <lambda_3298c911d7b53f44106027a7fde9a80a>, *P<lambda_3298c911d7b53f44106027a7fde9a80a>;

struct <lambda_3298c911d7b53f44106027a7fde9a80a> { /* PlaceHolder Structure */
};

typedef struct <lambda_3518db117f0e7cdb002338c5d3c47b6c> <lambda_3518db117f0e7cdb002338c5d3c47b6c>, *P<lambda_3518db117f0e7cdb002338c5d3c47b6c>;

struct <lambda_3518db117f0e7cdb002338c5d3c47b6c> { /* PlaceHolder Structure */
};

typedef struct <lambda_385c9462a7c084859dd3c0da461c81cb> <lambda_385c9462a7c084859dd3c0da461c81cb>, *P<lambda_385c9462a7c084859dd3c0da461c81cb>;

struct <lambda_385c9462a7c084859dd3c0da461c81cb> { /* PlaceHolder Structure */
};

typedef struct <lambda_3ab53bf64df1f1ff33dbc5b1929ce7a7> <lambda_3ab53bf64df1f1ff33dbc5b1929ce7a7>, *P<lambda_3ab53bf64df1f1ff33dbc5b1929ce7a7>;

struct <lambda_3ab53bf64df1f1ff33dbc5b1929ce7a7> { /* PlaceHolder Structure */
};

typedef struct <lambda_4d8dda1ac129e11742d77ae5e3bbda74> <lambda_4d8dda1ac129e11742d77ae5e3bbda74>, *P<lambda_4d8dda1ac129e11742d77ae5e3bbda74>;

struct <lambda_4d8dda1ac129e11742d77ae5e3bbda74> { /* PlaceHolder Structure */
};

typedef struct <lambda_5193b64c98d743723bd5dcf162a72339> <lambda_5193b64c98d743723bd5dcf162a72339>, *P<lambda_5193b64c98d743723bd5dcf162a72339>;

struct <lambda_5193b64c98d743723bd5dcf162a72339> { /* PlaceHolder Structure */
};

typedef struct <lambda_53dc1198df59d34f11556c9314de3a67> <lambda_53dc1198df59d34f11556c9314de3a67>, *P<lambda_53dc1198df59d34f11556c9314de3a67>;

struct <lambda_53dc1198df59d34f11556c9314de3a67> { /* PlaceHolder Structure */
};

typedef struct <lambda_565169b3e3b494427ce1bebdd17b54ac> <lambda_565169b3e3b494427ce1bebdd17b54ac>, *P<lambda_565169b3e3b494427ce1bebdd17b54ac>;

struct <lambda_565169b3e3b494427ce1bebdd17b54ac> { /* PlaceHolder Structure */
};

typedef struct <lambda_5a01b672d24c8480ee9d6bdb50dd3881> <lambda_5a01b672d24c8480ee9d6bdb50dd3881>, *P<lambda_5a01b672d24c8480ee9d6bdb50dd3881>;

struct <lambda_5a01b672d24c8480ee9d6bdb50dd3881> { /* PlaceHolder Structure */
};

typedef struct <lambda_5b71d36f03204c0beab531769a5b5694> <lambda_5b71d36f03204c0beab531769a5b5694>, *P<lambda_5b71d36f03204c0beab531769a5b5694>;

struct <lambda_5b71d36f03204c0beab531769a5b5694> { /* PlaceHolder Structure */
};

typedef struct <lambda_694f386f8d9a4d7d5afe1ac229f209db> <lambda_694f386f8d9a4d7d5afe1ac229f209db>, *P<lambda_694f386f8d9a4d7d5afe1ac229f209db>;

struct <lambda_694f386f8d9a4d7d5afe1ac229f209db> { /* PlaceHolder Structure */
};

typedef struct <lambda_801f60a70ab65355beb13c41cbe335bb> <lambda_801f60a70ab65355beb13c41cbe335bb>, *P<lambda_801f60a70ab65355beb13c41cbe335bb>;

struct <lambda_801f60a70ab65355beb13c41cbe335bb> { /* PlaceHolder Structure */
};

typedef struct <lambda_821a00fc0e15a7fd532972332124005d> <lambda_821a00fc0e15a7fd532972332124005d>, *P<lambda_821a00fc0e15a7fd532972332124005d>;

struct <lambda_821a00fc0e15a7fd532972332124005d> { /* PlaceHolder Structure */
};

typedef struct <lambda_84d84f98815add542a0d6e6ca338feb2> <lambda_84d84f98815add542a0d6e6ca338feb2>, *P<lambda_84d84f98815add542a0d6e6ca338feb2>;

struct <lambda_84d84f98815add542a0d6e6ca338feb2> { /* PlaceHolder Structure */
};

typedef struct <lambda_8f9ce462984622f9bf76b59e2aaaf805> <lambda_8f9ce462984622f9bf76b59e2aaaf805>, *P<lambda_8f9ce462984622f9bf76b59e2aaaf805>;

struct <lambda_8f9ce462984622f9bf76b59e2aaaf805> { /* PlaceHolder Structure */
};

typedef struct <lambda_9227be29367c048ad7fd93a717dcb1a1> <lambda_9227be29367c048ad7fd93a717dcb1a1>, *P<lambda_9227be29367c048ad7fd93a717dcb1a1>;

struct <lambda_9227be29367c048ad7fd93a717dcb1a1> { /* PlaceHolder Structure */
};

typedef struct <lambda_942beefa13ab35ff55f86422493ffd6a> <lambda_942beefa13ab35ff55f86422493ffd6a>, *P<lambda_942beefa13ab35ff55f86422493ffd6a>;

struct <lambda_942beefa13ab35ff55f86422493ffd6a> { /* PlaceHolder Structure */
};

typedef struct <lambda_952b238c83a62ef8e81c72265e1e9aa0> <lambda_952b238c83a62ef8e81c72265e1e9aa0>, *P<lambda_952b238c83a62ef8e81c72265e1e9aa0>;

struct <lambda_952b238c83a62ef8e81c72265e1e9aa0> { /* PlaceHolder Structure */
};

typedef struct <lambda_9a20e10065b92b5193c3597a66cba9d4> <lambda_9a20e10065b92b5193c3597a66cba9d4>, *P<lambda_9a20e10065b92b5193c3597a66cba9d4>;

struct <lambda_9a20e10065b92b5193c3597a66cba9d4> { /* PlaceHolder Structure */
};

typedef struct <lambda_9df27f884b057bc3edfc946cb5b7cf47> <lambda_9df27f884b057bc3edfc946cb5b7cf47>, *P<lambda_9df27f884b057bc3edfc946cb5b7cf47>;

struct <lambda_9df27f884b057bc3edfc946cb5b7cf47> { /* PlaceHolder Structure */
};

typedef struct <lambda_a048d3beccc847880fc8490e18b82769> <lambda_a048d3beccc847880fc8490e18b82769>, *P<lambda_a048d3beccc847880fc8490e18b82769>;

struct <lambda_a048d3beccc847880fc8490e18b82769> { /* PlaceHolder Structure */
};

typedef struct <lambda_a12890e7f9ac9927a62bd0bbd5044c78> <lambda_a12890e7f9ac9927a62bd0bbd5044c78>, *P<lambda_a12890e7f9ac9927a62bd0bbd5044c78>;

struct <lambda_a12890e7f9ac9927a62bd0bbd5044c78> { /* PlaceHolder Structure */
};

typedef struct <lambda_a463b7b0560cfcaf9b17f27c6ef46564> <lambda_a463b7b0560cfcaf9b17f27c6ef46564>, *P<lambda_a463b7b0560cfcaf9b17f27c6ef46564>;

struct <lambda_a463b7b0560cfcaf9b17f27c6ef46564> { /* PlaceHolder Structure */
};

typedef struct <lambda_a7d5e04a8e766f2a135287cf7b01dfe7> <lambda_a7d5e04a8e766f2a135287cf7b01dfe7>, *P<lambda_a7d5e04a8e766f2a135287cf7b01dfe7>;

struct <lambda_a7d5e04a8e766f2a135287cf7b01dfe7> { /* PlaceHolder Structure */
};

typedef struct <lambda_a8f98972ebaa5f7148d35bffe53bd70d> <lambda_a8f98972ebaa5f7148d35bffe53bd70d>, *P<lambda_a8f98972ebaa5f7148d35bffe53bd70d>;

struct <lambda_a8f98972ebaa5f7148d35bffe53bd70d> { /* PlaceHolder Structure */
};

typedef struct <lambda_abdedf541bb04549bc734292b4a045d4> <lambda_abdedf541bb04549bc734292b4a045d4>, *P<lambda_abdedf541bb04549bc734292b4a045d4>;

struct <lambda_abdedf541bb04549bc734292b4a045d4> { /* PlaceHolder Structure */
};

typedef struct <lambda_b0cac3301889906f8da68b04e3d9a7f4> <lambda_b0cac3301889906f8da68b04e3d9a7f4>, *P<lambda_b0cac3301889906f8da68b04e3d9a7f4>;

struct <lambda_b0cac3301889906f8da68b04e3d9a7f4> { /* PlaceHolder Structure */
};

typedef struct <lambda_b2ea41f6bbb362cd97d94c6828d90b61> <lambda_b2ea41f6bbb362cd97d94c6828d90b61>, *P<lambda_b2ea41f6bbb362cd97d94c6828d90b61>;

struct <lambda_b2ea41f6bbb362cd97d94c6828d90b61> { /* PlaceHolder Structure */
};

typedef struct <lambda_b51c0495177f500e782686251704ae76> <lambda_b51c0495177f500e782686251704ae76>, *P<lambda_b51c0495177f500e782686251704ae76>;

struct <lambda_b51c0495177f500e782686251704ae76> { /* PlaceHolder Structure */
};

typedef struct <lambda_be2b3da3f62db62e9dad5dc70221a656> <lambda_be2b3da3f62db62e9dad5dc70221a656>, *P<lambda_be2b3da3f62db62e9dad5dc70221a656>;

struct <lambda_be2b3da3f62db62e9dad5dc70221a656> { /* PlaceHolder Structure */
};

typedef struct <lambda_c58464cc0393550ab06f01720b646001> <lambda_c58464cc0393550ab06f01720b646001>, *P<lambda_c58464cc0393550ab06f01720b646001>;

struct <lambda_c58464cc0393550ab06f01720b646001> { /* PlaceHolder Structure */
};

typedef struct <lambda_cba01fc9d7ac4f198f78727dc0a4388f> <lambda_cba01fc9d7ac4f198f78727dc0a4388f>, *P<lambda_cba01fc9d7ac4f198f78727dc0a4388f>;

struct <lambda_cba01fc9d7ac4f198f78727dc0a4388f> { /* PlaceHolder Structure */
};

typedef struct <lambda_cc0d902bcbbeb830f749456577db4721> <lambda_cc0d902bcbbeb830f749456577db4721>, *P<lambda_cc0d902bcbbeb830f749456577db4721>;

struct <lambda_cc0d902bcbbeb830f749456577db4721> { /* PlaceHolder Structure */
};

typedef struct <lambda_ccea11b5727ccf69be64f5f5d9a08d9f> <lambda_ccea11b5727ccf69be64f5f5d9a08d9f>, *P<lambda_ccea11b5727ccf69be64f5f5d9a08d9f>;

struct <lambda_ccea11b5727ccf69be64f5f5d9a08d9f> { /* PlaceHolder Structure */
};

typedef struct <lambda_cf89b47920b5017557bfe891e78aca36> <lambda_cf89b47920b5017557bfe891e78aca36>, *P<lambda_cf89b47920b5017557bfe891e78aca36>;

struct <lambda_cf89b47920b5017557bfe891e78aca36> { /* PlaceHolder Structure */
};

typedef struct <lambda_e618b16d59e79e236350cab8485990d2> <lambda_e618b16d59e79e236350cab8485990d2>, *P<lambda_e618b16d59e79e236350cab8485990d2>;

struct <lambda_e618b16d59e79e236350cab8485990d2> { /* PlaceHolder Structure */
};

typedef struct <lambda_e69574bed617af4e071282c136b37893> <lambda_e69574bed617af4e071282c136b37893>, *P<lambda_e69574bed617af4e071282c136b37893>;

struct <lambda_e69574bed617af4e071282c136b37893> { /* PlaceHolder Structure */
};

typedef struct <lambda_e971338317bfa523bb8920b43d823727> <lambda_e971338317bfa523bb8920b43d823727>, *P<lambda_e971338317bfa523bb8920b43d823727>;

struct <lambda_e971338317bfa523bb8920b43d823727> { /* PlaceHolder Structure */
};

typedef struct <lambda_e9ab68cc08dfd839979545c079379e6e> <lambda_e9ab68cc08dfd839979545c079379e6e>, *P<lambda_e9ab68cc08dfd839979545c079379e6e>;

struct <lambda_e9ab68cc08dfd839979545c079379e6e> { /* PlaceHolder Structure */
};

typedef struct <lambda_ec61778202f4f5fc7e7711acc23c3bca> <lambda_ec61778202f4f5fc7e7711acc23c3bca>, *P<lambda_ec61778202f4f5fc7e7711acc23c3bca>;

struct <lambda_ec61778202f4f5fc7e7711acc23c3bca> { /* PlaceHolder Structure */
};

typedef struct <lambda_f51fe5fd7c79a33db34fc9310f277369> <lambda_f51fe5fd7c79a33db34fc9310f277369>, *P<lambda_f51fe5fd7c79a33db34fc9310f277369>;

struct <lambda_f51fe5fd7c79a33db34fc9310f277369> { /* PlaceHolder Structure */
};

typedef struct <lambda_f7496a158712204296dd6628a163878e> <lambda_f7496a158712204296dd6628a163878e>, *P<lambda_f7496a158712204296dd6628a163878e>;

struct <lambda_f7496a158712204296dd6628a163878e> { /* PlaceHolder Structure */
};

typedef enum __acrt_fp_class {
} __acrt_fp_class;

typedef enum __acrt_lock_id {
} __acrt_lock_id;

typedef struct __acrt_ptd __acrt_ptd, *P__acrt_ptd;

struct __acrt_ptd { /* PlaceHolder Structure */
};

typedef struct __acrt_stdio_stream_mode __acrt_stdio_stream_mode, *P__acrt_stdio_stream_mode;

struct __acrt_stdio_stream_mode { /* PlaceHolder Structure */
};

typedef struct __acrt_stdio_temporary_buffering_guard __acrt_stdio_temporary_buffering_guard, *P__acrt_stdio_temporary_buffering_guard;

struct __acrt_stdio_temporary_buffering_guard { /* PlaceHolder Structure */
};

typedef struct __crt_errno_guard __crt_errno_guard, *P__crt_errno_guard;

struct __crt_errno_guard { /* PlaceHolder Structure */
};

typedef struct __crt_fast_encoded_nullptr_t __crt_fast_encoded_nullptr_t, *P__crt_fast_encoded_nullptr_t;

struct __crt_fast_encoded_nullptr_t { /* PlaceHolder Structure */
};

typedef struct __crt_lc_time_data __crt_lc_time_data, *P__crt_lc_time_data;

struct __crt_lc_time_data { /* PlaceHolder Structure */
};

typedef struct __crt_locale_data __crt_locale_data, *P__crt_locale_data;

struct __crt_locale_data { /* PlaceHolder Structure */
};

typedef struct __crt_locale_pointers __crt_locale_pointers, *P__crt_locale_pointers;

struct __crt_locale_pointers { /* PlaceHolder Structure */
};

typedef enum __crt_lowio_text_mode {
} __crt_lowio_text_mode;

typedef struct __crt_multibyte_data __crt_multibyte_data, *P__crt_multibyte_data;

struct __crt_multibyte_data { /* PlaceHolder Structure */
};

typedef struct __crt_scoped_get_last_error_reset __crt_scoped_get_last_error_reset, *P__crt_scoped_get_last_error_reset;

struct __crt_scoped_get_last_error_reset { /* PlaceHolder Structure */
};

typedef struct __crt_scoped_stack_ptr<wchar_t> __crt_scoped_stack_ptr<wchar_t>, *P__crt_scoped_stack_ptr<wchar_t>;

struct __crt_scoped_stack_ptr<wchar_t> { /* PlaceHolder Structure */
};

typedef struct __crt_seh_guarded_call<bool> __crt_seh_guarded_call<bool>, *P__crt_seh_guarded_call<bool>;

struct __crt_seh_guarded_call<bool> { /* PlaceHolder Structure */
};

typedef struct __crt_seh_guarded_call<int> __crt_seh_guarded_call<int>, *P__crt_seh_guarded_call<int>;

struct __crt_seh_guarded_call<int> { /* PlaceHolder Structure */
};

typedef struct __crt_seh_guarded_call<unsigned_int> __crt_seh_guarded_call<unsigned_int>, *P__crt_seh_guarded_call<unsigned_int>;

struct __crt_seh_guarded_call<unsigned_int> { /* PlaceHolder Structure */
};

typedef struct __crt_seh_guarded_call<void> __crt_seh_guarded_call<void>, *P__crt_seh_guarded_call<void>;

struct __crt_seh_guarded_call<void> { /* PlaceHolder Structure */
};

typedef struct __crt_seh_guarded_call<void_(__cdecl*)(int)> __crt_seh_guarded_call<void_(__cdecl*)(int)>, *P__crt_seh_guarded_call<void_(__cdecl*)(int)>;

struct __crt_seh_guarded_call<void_(__cdecl*)(int)> { /* PlaceHolder Structure */
};

typedef struct __crt_signal_action_t __crt_signal_action_t, *P__crt_signal_action_t;

struct __crt_signal_action_t { /* PlaceHolder Structure */
};

typedef struct __crt_simd_cleanup_guard<1> __crt_simd_cleanup_guard<1>, *P__crt_simd_cleanup_guard<1>;

struct __crt_simd_cleanup_guard<1> { /* PlaceHolder Structure */
};

typedef struct __crt_stdio_stream __crt_stdio_stream, *P__crt_stdio_stream;

struct __crt_stdio_stream { /* PlaceHolder Structure */
};

typedef struct __crt_unique_handle_t<struct___crt_handle_traits> __crt_unique_handle_t<struct___crt_handle_traits>, *P__crt_unique_handle_t<struct___crt_handle_traits>;

struct __crt_unique_handle_t<struct___crt_handle_traits> { /* PlaceHolder Structure */
};

typedef struct __crt_unique_handle_t<struct___crt_hmodule_traits> __crt_unique_handle_t<struct___crt_hmodule_traits>, *P__crt_unique_handle_t<struct___crt_hmodule_traits>;

struct __crt_unique_handle_t<struct___crt_hmodule_traits> { /* PlaceHolder Structure */
};

typedef struct __crt_unique_heap_ptr<char*,struct___crt_internal_free_policy> __crt_unique_heap_ptr<char*,struct___crt_internal_free_policy>, *P__crt_unique_heap_ptr<char*,struct___crt_internal_free_policy>;

struct __crt_unique_heap_ptr<char*,struct___crt_internal_free_policy> { /* PlaceHolder Structure */
};

typedef struct __crt_unique_heap_ptr<char,struct___crt_internal_free_policy> __crt_unique_heap_ptr<char,struct___crt_internal_free_policy>, *P__crt_unique_heap_ptr<char,struct___crt_internal_free_policy>;

struct __crt_unique_heap_ptr<char,struct___crt_internal_free_policy> { /* PlaceHolder Structure */
};

typedef struct __crt_unique_heap_ptr<long,struct___crt_internal_free_policy> __crt_unique_heap_ptr<long,struct___crt_internal_free_policy>, *P__crt_unique_heap_ptr<long,struct___crt_internal_free_policy>;

struct __crt_unique_heap_ptr<long,struct___crt_internal_free_policy> { /* PlaceHolder Structure */
};

typedef struct __crt_unique_heap_ptr<void,struct___crt_internal_free_policy> __crt_unique_heap_ptr<void,struct___crt_internal_free_policy>, *P__crt_unique_heap_ptr<void,struct___crt_internal_free_policy>;

struct __crt_unique_heap_ptr<void,struct___crt_internal_free_policy> { /* PlaceHolder Structure */
};

typedef union __m128i __m128i, *P__m128i;

union __m128i {
};

typedef union __m256i __m256i, *P__m256i;

union __m256i {
};

typedef struct __vcrt_ptd __vcrt_ptd, *P__vcrt_ptd;

struct __vcrt_ptd { /* PlaceHolder Structure */
};

typedef enum _crt_argv_mode {
} _crt_argv_mode;

typedef struct _CRT_DOUBLE _CRT_DOUBLE, *P_CRT_DOUBLE;

struct _CRT_DOUBLE { /* PlaceHolder Structure */
};

typedef enum _crt_exit_cleanup_mode {
} _crt_exit_cleanup_mode;

typedef enum _crt_exit_return_mode {
} _crt_exit_return_mode;

typedef struct _CrtMemBlockHeader _CrtMemBlockHeader, *P_CrtMemBlockHeader;

struct _CrtMemBlockHeader { /* PlaceHolder Structure */
};

typedef struct _CrtMemState _CrtMemState, *P_CrtMemState;

struct _CrtMemState { /* PlaceHolder Structure */
};

typedef struct _EVENT_DATA_DESCRIPTOR _EVENT_DATA_DESCRIPTOR, *P_EVENT_DATA_DESCRIPTOR;

struct _EVENT_DATA_DESCRIPTOR { /* PlaceHolder Structure */
};

typedef struct _EVENT_DESCRIPTOR _EVENT_DESCRIPTOR, *P_EVENT_DESCRIPTOR;

struct _EVENT_DESCRIPTOR { /* PlaceHolder Structure */
};

typedef struct _EVENT_FILTER_DESCRIPTOR _EVENT_FILTER_DESCRIPTOR, *P_EVENT_FILTER_DESCRIPTOR;

struct _EVENT_FILTER_DESCRIPTOR { /* PlaceHolder Structure */
};

typedef enum _EVENT_INFO_CLASS {
} _EVENT_INFO_CLASS;

typedef struct _HeapManager _HeapManager, *P_HeapManager;

struct _HeapManager { /* PlaceHolder Structure */
};

typedef struct _Init_atexit _Init_atexit, *P_Init_atexit;

struct _Init_atexit { /* PlaceHolder Structure */
};

typedef struct _LocaleUpdate _LocaleUpdate, *P_LocaleUpdate;

struct _LocaleUpdate { /* PlaceHolder Structure */
};

typedef struct _nlsversioninfo _nlsversioninfo, *P_nlsversioninfo;

struct _nlsversioninfo { /* PlaceHolder Structure */
};

typedef struct _s_CatchableType _s_CatchableType, *P_s_CatchableType;

struct _s_CatchableType { /* PlaceHolder Structure */
};

typedef struct _strflt _strflt, *P_strflt;

struct _strflt { /* PlaceHolder Structure */
};

typedef struct _timespec64 _timespec64, *P_timespec64;

struct _timespec64 { /* PlaceHolder Structure */
};

typedef struct CPaneContainerGC CPaneContainerGC, *PCPaneContainerGC;

struct CPaneContainerGC { /* PlaceHolder Structure */
};

typedef struct DName DName, *PDName;

struct DName { /* PlaceHolder Structure */
};

typedef struct DNameNode DNameNode, *PDNameNode;

struct DNameNode { /* PlaceHolder Structure */
};

typedef enum DNameStatus {
} DNameStatus;

typedef struct EHExceptionRecord EHExceptionRecord, *PEHExceptionRecord;

struct EHExceptionRecord { /* PlaceHolder Structure */
};

typedef struct EHRegistrationNode EHRegistrationNode, *PEHRegistrationNode;

struct EHRegistrationNode { /* PlaceHolder Structure */
};

typedef struct HWINSTA__ HWINSTA__, *PHWINSTA__;

struct HWINSTA__ { /* PlaceHolder Structure */
};

typedef struct Replicator Replicator, *PReplicator;

struct Replicator { /* PlaceHolder Structure */
};

typedef dword std::nullptr_t;

typedef enum Tokens {
} Tokens;

typedef struct UnDecorator UnDecorator, *PUnDecorator;

struct UnDecorator { /* PlaceHolder Structure */
};

typedef struct void_(__cdecl**)(int) void_(__cdecl**)(int), *Pvoid_(__cdecl**)(int);

struct void_(__cdecl**)(int) { /* PlaceHolder Structure */
};

typedef struct void_(__cdecl**)(void) void_(__cdecl**)(void), *Pvoid_(__cdecl**)(void);

struct void_(__cdecl**)(void) { /* PlaceHolder Structure */
};

typedef struct void_(__cdecl**_const)(void) void_(__cdecl**_const)(void), *Pvoid_(__cdecl**_const)(void);

struct void_(__cdecl**_const)(void) { /* PlaceHolder Structure */
};


/* WARNING! conflicting data type names: /Demangler/wchar_t - /wchar_t */

typedef struct IMAGE_DOS_HEADER IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

struct IMAGE_DOS_HEADER {
    char e_magic[2]; /* Magic number */
    word e_cblp; /* Bytes of last page */
    word e_cp; /* Pages in file */
    word e_crlc; /* Relocations */
    word e_cparhdr; /* Size of header in paragraphs */
    word e_minalloc; /* Minimum extra paragraphs needed */
    word e_maxalloc; /* Maximum extra paragraphs needed */
    word e_ss; /* Initial (relative) SS value */
    word e_sp; /* Initial SP value */
    word e_csum; /* Checksum */
    word e_ip; /* Initial IP value */
    word e_cs; /* Initial (relative) CS value */
    word e_lfarlc; /* File address of relocation table */
    word e_ovno; /* Overlay number */
    word e_res[4][4]; /* Reserved words */
    word e_oemid; /* OEM identifier (for e_oeminfo) */
    word e_oeminfo; /* OEM information; e_oemid specific */
    word e_res2[10][10]; /* Reserved words */
    dword e_lfanew; /* File address of new exe header */
    byte e_program[64]; /* Actual DOS program */
};

typedef int __ehstate_t;

typedef struct PMD PMD, *PPMD;

struct PMD {
    ptrdiff_t mdisp;
    ptrdiff_t pdisp;
    ptrdiff_t vdisp;
};

typedef struct _CONTEXT _CONTEXT, *P_CONTEXT;

typedef ulong DWORD;

typedef struct _FLOATING_SAVE_AREA _FLOATING_SAVE_AREA, *P_FLOATING_SAVE_AREA;

typedef struct _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;

typedef uchar BYTE;

struct _FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
};

struct _CONTEXT {
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];
};

typedef struct _EXCEPTION_POINTERS _EXCEPTION_POINTERS, *P_EXCEPTION_POINTERS;

typedef struct _EXCEPTION_RECORD _EXCEPTION_RECORD, *P_EXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;

typedef EXCEPTION_RECORD * PEXCEPTION_RECORD;

typedef struct _CONTEXT CONTEXT;

typedef CONTEXT * PCONTEXT;

typedef void * PVOID;

struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD * ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
};

struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
};

typedef struct _GUID _GUID, *P_GUID;

struct _GUID {
    ulong Data1;
    ushort Data2;
    ushort Data3;
    uchar Data4[8];
};

typedef struct _GUID GUID;

typedef GUID CLSID;

typedef GUID IID;

typedef struct _iobuf _iobuf, *P_iobuf;

struct _iobuf {
    char * _ptr;
    int _cnt;
    char * _base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char * _tmpfname;
};

typedef struct _iobuf FILE;

typedef union _union_2260 _union_2260, *P_union_2260;

typedef struct HBITMAP__ HBITMAP__, *PHBITMAP__;

typedef struct HBITMAP__ * HBITMAP;

typedef void * HMETAFILEPICT;

typedef struct HENHMETAFILE__ HENHMETAFILE__, *PHENHMETAFILE__;

typedef struct HENHMETAFILE__ * HENHMETAFILE;

typedef void * HANDLE;

typedef HANDLE HGLOBAL;

typedef wchar_t WCHAR;

typedef WCHAR OLECHAR;

typedef OLECHAR * LPOLESTR;

typedef struct IStream IStream, *PIStream;

typedef struct IStorage IStorage, *PIStorage;

typedef struct IStreamVtbl IStreamVtbl, *PIStreamVtbl;

typedef long HRESULT;

typedef DWORD ULONG;

typedef union _LARGE_INTEGER _LARGE_INTEGER, *P_LARGE_INTEGER;

typedef union _LARGE_INTEGER LARGE_INTEGER;

typedef union _ULARGE_INTEGER _ULARGE_INTEGER, *P_ULARGE_INTEGER;

typedef union _ULARGE_INTEGER ULARGE_INTEGER;

typedef struct tagSTATSTG tagSTATSTG, *PtagSTATSTG;

typedef struct tagSTATSTG STATSTG;

typedef struct IStorageVtbl IStorageVtbl, *PIStorageVtbl;

typedef LPOLESTR * SNB;

typedef struct IEnumSTATSTG IEnumSTATSTG, *PIEnumSTATSTG;

typedef struct _FILETIME _FILETIME, *P_FILETIME;

typedef struct _FILETIME FILETIME;

typedef struct _struct_19 _struct_19, *P_struct_19;

typedef struct _struct_20 _struct_20, *P_struct_20;

typedef double LONGLONG;

typedef struct _struct_22 _struct_22, *P_struct_22;

typedef struct _struct_23 _struct_23, *P_struct_23;

typedef double ULONGLONG;

typedef struct IEnumSTATSTGVtbl IEnumSTATSTGVtbl, *PIEnumSTATSTGVtbl;

typedef long LONG;

struct IStreamVtbl {
    HRESULT (* QueryInterface)(struct IStream *, IID *, void * *);
    ULONG (* AddRef)(struct IStream *);
    ULONG (* Release)(struct IStream *);
    HRESULT (* Read)(struct IStream *, void *, ULONG, ULONG *);
    HRESULT (* Write)(struct IStream *, void *, ULONG, ULONG *);
    HRESULT (* Seek)(struct IStream *, LARGE_INTEGER, DWORD, ULARGE_INTEGER *);
    HRESULT (* SetSize)(struct IStream *, ULARGE_INTEGER);
    HRESULT (* CopyTo)(struct IStream *, struct IStream *, ULARGE_INTEGER, ULARGE_INTEGER *, ULARGE_INTEGER *);
    HRESULT (* Commit)(struct IStream *, DWORD);
    HRESULT (* Revert)(struct IStream *);
    HRESULT (* LockRegion)(struct IStream *, ULARGE_INTEGER, ULARGE_INTEGER, DWORD);
    HRESULT (* UnlockRegion)(struct IStream *, ULARGE_INTEGER, ULARGE_INTEGER, DWORD);
    HRESULT (* Stat)(struct IStream *, STATSTG *, DWORD);
    HRESULT (* Clone)(struct IStream *, struct IStream * *);
};

union _union_2260 {
    HBITMAP hBitmap;
    HMETAFILEPICT hMetaFilePict;
    HENHMETAFILE hEnhMetaFile;
    HGLOBAL hGlobal;
    LPOLESTR lpszFileName;
    struct IStream * pstm;
    struct IStorage * pstg;
};

struct IStorageVtbl {
    HRESULT (* QueryInterface)(struct IStorage *, IID *, void * *);
    ULONG (* AddRef)(struct IStorage *);
    ULONG (* Release)(struct IStorage *);
    HRESULT (* CreateStream)(struct IStorage *, OLECHAR *, DWORD, DWORD, DWORD, struct IStream * *);
    HRESULT (* OpenStream)(struct IStorage *, OLECHAR *, void *, DWORD, DWORD, struct IStream * *);
    HRESULT (* CreateStorage)(struct IStorage *, OLECHAR *, DWORD, DWORD, DWORD, struct IStorage * *);
    HRESULT (* OpenStorage)(struct IStorage *, OLECHAR *, struct IStorage *, DWORD, SNB, DWORD, struct IStorage * *);
    HRESULT (* CopyTo)(struct IStorage *, DWORD, IID *, SNB, struct IStorage *);
    HRESULT (* MoveElementTo)(struct IStorage *, OLECHAR *, struct IStorage *, OLECHAR *, DWORD);
    HRESULT (* Commit)(struct IStorage *, DWORD);
    HRESULT (* Revert)(struct IStorage *);
    HRESULT (* EnumElements)(struct IStorage *, DWORD, void *, DWORD, struct IEnumSTATSTG * *);
    HRESULT (* DestroyElement)(struct IStorage *, OLECHAR *);
    HRESULT (* RenameElement)(struct IStorage *, OLECHAR *, OLECHAR *);
    HRESULT (* SetElementTimes)(struct IStorage *, OLECHAR *, FILETIME *, FILETIME *, FILETIME *);
    HRESULT (* SetClass)(struct IStorage *, IID *);
    HRESULT (* SetStateBits)(struct IStorage *, DWORD, DWORD);
    HRESULT (* Stat)(struct IStorage *, STATSTG *, DWORD);
};

struct IStream {
    struct IStreamVtbl * lpVtbl;
};

struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
};

struct _struct_20 {
    DWORD LowPart;
    LONG HighPart;
};

struct _struct_19 {
    DWORD LowPart;
    LONG HighPart;
};

union _LARGE_INTEGER {
    struct _struct_19 s;
    struct _struct_20 u;
    LONGLONG QuadPart;
};

struct IStorage {
    struct IStorageVtbl * lpVtbl;
};

struct IEnumSTATSTGVtbl {
    HRESULT (* QueryInterface)(struct IEnumSTATSTG *, IID *, void * *);
    ULONG (* AddRef)(struct IEnumSTATSTG *);
    ULONG (* Release)(struct IEnumSTATSTG *);
    HRESULT (* Next)(struct IEnumSTATSTG *, ULONG, STATSTG *, ULONG *);
    HRESULT (* Skip)(struct IEnumSTATSTG *, ULONG);
    HRESULT (* Reset)(struct IEnumSTATSTG *);
    HRESULT (* Clone)(struct IEnumSTATSTG *, struct IEnumSTATSTG * *);
};

struct HBITMAP__ {
    int unused;
};

struct IEnumSTATSTG {
    struct IEnumSTATSTGVtbl * lpVtbl;
};

struct _struct_23 {
    DWORD LowPart;
    DWORD HighPart;
};

struct _struct_22 {
    DWORD LowPart;
    DWORD HighPart;
};

union _ULARGE_INTEGER {
    struct _struct_22 s;
    struct _struct_23 u;
    ULONGLONG QuadPart;
};

struct HENHMETAFILE__ {
    int unused;
};

struct tagSTATSTG {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
};

typedef struct tagDVTARGETDEVICE tagDVTARGETDEVICE, *PtagDVTARGETDEVICE;

typedef struct tagDVTARGETDEVICE DVTARGETDEVICE;

typedef ushort WORD;

struct tagDVTARGETDEVICE {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE tdData[1];
};

typedef struct tagFORMATETC tagFORMATETC, *PtagFORMATETC;

typedef struct tagFORMATETC FORMATETC;

typedef WORD CLIPFORMAT;

struct tagFORMATETC {
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE * ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
};

typedef struct tagSOLE_AUTHENTICATION_SERVICE tagSOLE_AUTHENTICATION_SERVICE, *PtagSOLE_AUTHENTICATION_SERVICE;

typedef struct tagSOLE_AUTHENTICATION_SERVICE SOLE_AUTHENTICATION_SERVICE;

struct tagSOLE_AUTHENTICATION_SERVICE {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR * pPrincipalName;
    HRESULT hr;
};

typedef struct tagSTGMEDIUM tagSTGMEDIUM, *PtagSTGMEDIUM;

typedef struct tagSTGMEDIUM uSTGMEDIUM;

typedef uSTGMEDIUM STGMEDIUM;

typedef struct IUnknown IUnknown, *PIUnknown;

typedef struct IUnknownVtbl IUnknownVtbl, *PIUnknownVtbl;

struct tagSTGMEDIUM {
    DWORD tymed;
    union _union_2260 u;
    struct IUnknown * pUnkForRelease;
};

struct IUnknownVtbl {
    HRESULT (* QueryInterface)(struct IUnknown *, IID *, void * *);
    ULONG (* AddRef)(struct IUnknown *);
    ULONG (* Release)(struct IUnknown *);
};

struct IUnknown {
    struct IUnknownVtbl * lpVtbl;
};

typedef struct IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

struct IMAGE_DATA_DIRECTORY {
    ImageBaseOffset32 VirtualAddress;
    dword Size;
};

typedef struct IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;

struct IMAGE_DEBUG_DIRECTORY {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    dword Type;
    dword SizeOfData;
    dword AddressOfRawData;
    dword PointerToRawData;
};

typedef struct IMAGE_FILE_HEADER IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

struct IMAGE_FILE_HEADER {
    word Machine; /* 332 */
    word NumberOfSections;
    dword TimeDateStamp;
    dword PointerToSymbolTable;
    dword NumberOfSymbols;
    word SizeOfOptionalHeader;
    word Characteristics;
};

typedef enum IMAGE_GUARD_FLAGS {
    IMAGE_GUARD_CF_INSTRUMENTED=256,
    IMAGE_GUARD_CFW_INSTRUMENTED=512,
    IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT=1024,
    IMAGE_GUARD_SECURITY_COOKIE_UNUSED=2048,
    IMAGE_GUARD_PROTECT_DELAYLOAD_IAT=4096,
    IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION=8192,
    IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT=16384,
    IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION=32768,
    IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT=65536,
    IMAGE_GUARD_RF_INSTRUMENTED=131072,
    IMAGE_GUARD_RF_ENABLE=262144,
    IMAGE_GUARD_RF_STRICT=524288,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_1=268435456,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_2=536870912,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_4=1073741824,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_8=2147483648
} IMAGE_GUARD_FLAGS;

typedef struct IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

struct IMAGE_LOAD_CONFIG_DIRECTORY32 {
    dword Size;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    dword GlobalFlagsClear;
    dword GlobalFlagsSet;
    dword CriticalSectionDefaultTimeout;
    dword DeCommitFreeBlockThreshold;
    dword DeCommitTotalFreeThreshold;
    pointer32 LockPrefixTable;
    dword MaximumAllocationSize;
    dword VirtualMemoryThreshold;
    dword ProcessHeapFlags;
    dword ProcessAffinityMask;
    word CsdVersion;
    word DependentLoadFlags;
    pointer32 EditList;
    pointer32 SecurityCookie;
    pointer32 SEHandlerTable;
    dword SEHandlerCount;
    pointer32 GuardCFCCheckFunctionPointer;
    pointer32 GuardCFDispatchFunctionPointer;
    pointer32 GuardCFFunctionTable;
    dword GuardCFFunctionCount;
    enum IMAGE_GUARD_FLAGS GuardFlags;
};

typedef struct IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

struct IMAGE_OPTIONAL_HEADER32 {
    word Magic;
    byte MajorLinkerVersion;
    byte MinorLinkerVersion;
    dword SizeOfCode;
    dword SizeOfInitializedData;
    dword SizeOfUninitializedData;
    ImageBaseOffset32 AddressOfEntryPoint;
    ImageBaseOffset32 BaseOfCode;
    ImageBaseOffset32 BaseOfData;
    pointer32 ImageBase;
    dword SectionAlignment;
    dword FileAlignment;
    word MajorOperatingSystemVersion;
    word MinorOperatingSystemVersion;
    word MajorImageVersion;
    word MinorImageVersion;
    word MajorSubsystemVersion;
    word MinorSubsystemVersion;
    dword Win32VersionValue;
    dword SizeOfImage;
    dword SizeOfHeaders;
    dword CheckSum;
    word Subsystem;
    word DllCharacteristics;
    dword SizeOfStackReserve;
    dword SizeOfStackCommit;
    dword SizeOfHeapReserve;
    dword SizeOfHeapCommit;
    dword LoaderFlags;
    dword NumberOfRvaAndSizes;
    struct IMAGE_DATA_DIRECTORY DataDirectory[16];
};

struct IMAGE_NT_HEADERS32 {
    char Signature[4];
    struct IMAGE_FILE_HEADER FileHeader;
    struct IMAGE_OPTIONAL_HEADER32 OptionalHeader;
};

typedef struct IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;

struct IMAGE_RESOURCE_DATA_ENTRY {
    dword OffsetToData;
    dword Size;
    dword CodePage;
    dword Reserved;
};

typedef struct IMAGE_RESOURCE_DIR_STRING_U_16 IMAGE_RESOURCE_DIR_STRING_U_16, *PIMAGE_RESOURCE_DIR_STRING_U_16;

typedef unsigned short    wchar16;
struct IMAGE_RESOURCE_DIR_STRING_U_16 {
    word Length;
    wchar16 NameString[8];
};

typedef struct IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;

struct IMAGE_RESOURCE_DIRECTORY {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    word NumberOfNamedEntries;
    word NumberOfIdEntries;
};

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion;

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion;

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct {
    dword OffsetToDirectory;
    dword DataIsDirectory;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion {
    dword OffsetToData;
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;
};

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct {
    dword NameOffset;
    dword NameIsString;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion {
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;
    dword Name;
    word Id;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion NameUnion;
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion DirectoryUnion;
};

typedef struct IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

typedef union Misc Misc, *PMisc;

typedef enum SectionFlags {
    IMAGE_SCN_TYPE_NO_PAD=8,
    IMAGE_SCN_RESERVED_0001=16,
    IMAGE_SCN_CNT_CODE=32,
    IMAGE_SCN_CNT_INITIALIZED_DATA=64,
    IMAGE_SCN_CNT_UNINITIALIZED_DATA=128,
    IMAGE_SCN_LNK_OTHER=256,
    IMAGE_SCN_LNK_INFO=512,
    IMAGE_SCN_RESERVED_0040=1024,
    IMAGE_SCN_LNK_REMOVE=2048,
    IMAGE_SCN_LNK_COMDAT=4096,
    IMAGE_SCN_GPREL=32768,
    IMAGE_SCN_MEM_16BIT=131072,
    IMAGE_SCN_MEM_PURGEABLE=131072,
    IMAGE_SCN_MEM_LOCKED=262144,
    IMAGE_SCN_MEM_PRELOAD=524288,
    IMAGE_SCN_ALIGN_1BYTES=1048576,
    IMAGE_SCN_ALIGN_2BYTES=2097152,
    IMAGE_SCN_ALIGN_4BYTES=3145728,
    IMAGE_SCN_ALIGN_8BYTES=4194304,
    IMAGE_SCN_ALIGN_16BYTES=5242880,
    IMAGE_SCN_ALIGN_32BYTES=6291456,
    IMAGE_SCN_ALIGN_64BYTES=7340032,
    IMAGE_SCN_ALIGN_128BYTES=8388608,
    IMAGE_SCN_ALIGN_256BYTES=9437184,
    IMAGE_SCN_ALIGN_512BYTES=10485760,
    IMAGE_SCN_ALIGN_1024BYTES=11534336,
    IMAGE_SCN_ALIGN_2048BYTES=12582912,
    IMAGE_SCN_ALIGN_4096BYTES=13631488,
    IMAGE_SCN_ALIGN_8192BYTES=14680064,
    IMAGE_SCN_LNK_NRELOC_OVFL=16777216,
    IMAGE_SCN_MEM_DISCARDABLE=33554432,
    IMAGE_SCN_MEM_NOT_CACHED=67108864,
    IMAGE_SCN_MEM_NOT_PAGED=134217728,
    IMAGE_SCN_MEM_SHARED=268435456,
    IMAGE_SCN_MEM_EXECUTE=536870912,
    IMAGE_SCN_MEM_READ=1073741824,
    IMAGE_SCN_MEM_WRITE=2147483648
} SectionFlags;

union Misc {
    dword PhysicalAddress;
    dword VirtualSize;
};

struct IMAGE_SECTION_HEADER {
    char Name[8];
    union Misc Misc;
    ImageBaseOffset32 VirtualAddress;
    dword SizeOfRawData;
    dword PointerToRawData;
    dword PointerToRelocations;
    dword PointerToLinenumbers;
    word NumberOfRelocations;
    word NumberOfLinenumbers;
    enum SectionFlags Characteristics;
};

typedef struct IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32, *PIMAGE_THUNK_DATA32;

struct IMAGE_THUNK_DATA32 {
    dword StartAddressOfRawData;
    dword EndAddressOfRawData;
    dword AddressOfIndex;
    dword AddressOfCallBacks;
    dword SizeOfZeroFill;
    dword Characteristics;
};

typedef void * RPC_AUTH_IDENTITY_HANDLE;

typedef uchar boolean;

typedef struct _Locimp _Locimp, *P_Locimp;

struct _Locimp { /* PlaceHolder Class Structure */
};

typedef struct _Facet_base _Facet_base, *P_Facet_base;

struct _Facet_base { /* PlaceHolder Class Structure */
};

typedef struct bad_alloc bad_alloc, *Pbad_alloc;

struct bad_alloc { /* PlaceHolder Class Structure */
};

typedef struct bad_array_new_length bad_array_new_length, *Pbad_array_new_length;

struct bad_array_new_length { /* PlaceHolder Class Structure */
};

typedef struct basic_filebuf<char,struct_std::char_traits<char>_> basic_filebuf<char,struct_std::char_traits<char>_>, *Pbasic_filebuf<char,struct_std::char_traits<char>_>;

struct basic_filebuf<char,struct_std::char_traits<char>_> { /* PlaceHolder Class Structure */
};

typedef struct basic_streambuf<char,struct_std::char_traits<char>_> basic_streambuf<char,struct_std::char_traits<char>_>, *Pbasic_streambuf<char,struct_std::char_traits<char>_>;

struct basic_streambuf<char,struct_std::char_traits<char>_> { /* PlaceHolder Class Structure */
};

typedef struct ctype<char> ctype<char>, *Pctype<char>;

struct ctype<char> { /* PlaceHolder Class Structure */
};

typedef struct error_category error_category, *Perror_category;

struct error_category { /* PlaceHolder Class Structure */
};

typedef struct num_put<char,class_std::ostreambuf_iterator<char,struct_std::char_traits<char>_>_> num_put<char,class_std::ostreambuf_iterator<char,struct_std::char_traits<char>_>_>, *Pnum_put<char,class_std::ostreambuf_iterator<char,struct_std::char_traits<char>_>_>;

struct num_put<char,class_std::ostreambuf_iterator<char,struct_std::char_traits<char>_>_> { /* PlaceHolder Class Structure */
};

typedef longlong fpos_t;

typedef int (* _onexit_t)(void);

typedef void (* _purecall_handler)(void);

typedef struct tm tm, *Ptm;

struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};

typedef struct IUnknown * LPUNKNOWN;

typedef struct _tagBINDINFO _tagBINDINFO, *P_tagBINDINFO;

typedef WCHAR * LPWSTR;

typedef struct _SECURITY_ATTRIBUTES _SECURITY_ATTRIBUTES, *P_SECURITY_ATTRIBUTES;

typedef struct _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;

typedef void * LPVOID;

typedef int BOOL;

struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
};

struct _tagBINDINFO {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    struct IUnknown * pUnk;
    DWORD dwReserved;
};

typedef struct _tagBINDINFO BINDINFO;

typedef struct IBinding IBinding, *PIBinding;

typedef struct IBindingVtbl IBindingVtbl, *PIBindingVtbl;

struct IBinding {
    struct IBindingVtbl * lpVtbl;
};

struct IBindingVtbl {
    HRESULT (* QueryInterface)(struct IBinding *, IID *, void * *);
    ULONG (* AddRef)(struct IBinding *);
    ULONG (* Release)(struct IBinding *);
    HRESULT (* Abort)(struct IBinding *);
    HRESULT (* Suspend)(struct IBinding *);
    HRESULT (* Resume)(struct IBinding *);
    HRESULT (* SetPriority)(struct IBinding *, LONG);
    HRESULT (* GetPriority)(struct IBinding *, LONG *);
    HRESULT (* GetBindResult)(struct IBinding *, CLSID *, DWORD *, LPOLESTR *, DWORD *);
};

typedef struct IBindStatusCallback IBindStatusCallback, *PIBindStatusCallback;

typedef struct IBindStatusCallbackVtbl IBindStatusCallbackVtbl, *PIBindStatusCallbackVtbl;

typedef WCHAR * LPCWSTR;

struct IBindStatusCallback {
    struct IBindStatusCallbackVtbl * lpVtbl;
};

struct IBindStatusCallbackVtbl {
    HRESULT (* QueryInterface)(struct IBindStatusCallback *, IID *, void * *);
    ULONG (* AddRef)(struct IBindStatusCallback *);
    ULONG (* Release)(struct IBindStatusCallback *);
    HRESULT (* OnStartBinding)(struct IBindStatusCallback *, DWORD, struct IBinding *);
    HRESULT (* GetPriority)(struct IBindStatusCallback *, LONG *);
    HRESULT (* OnLowResource)(struct IBindStatusCallback *, DWORD);
    HRESULT (* OnProgress)(struct IBindStatusCallback *, ULONG, ULONG, ULONG, LPCWSTR);
    HRESULT (* OnStopBinding)(struct IBindStatusCallback *, HRESULT, LPCWSTR);
    HRESULT (* GetBindInfo)(struct IBindStatusCallback *, DWORD *, BINDINFO *);
    HRESULT (* OnDataAvailable)(struct IBindStatusCallback *, DWORD, DWORD, FORMATETC *, STGMEDIUM *);
    HRESULT (* OnObjectAvailable)(struct IBindStatusCallback *, IID *, struct IUnknown *);
};

typedef struct IBindStatusCallback * LPBINDSTATUSCALLBACK;

typedef uint uintptr_t;

typedef char * va_list;

typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard=0,
    FindExInfoBasic=1,
    FindExInfoMaxInfoLevel=2
} _FINDEX_INFO_LEVELS;

typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch=0,
    FindExSearchLimitToDirectories=1,
    FindExSearchLimitToDevices=2,
    FindExSearchMaxSearchOp=3
} _FINDEX_SEARCH_OPS;

typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard=0,
    GetFileExMaxInfoLevel=1
} _GET_FILEEX_INFO_LEVELS;

typedef struct _OVERLAPPED _OVERLAPPED, *P_OVERLAPPED;

typedef union _union_518 _union_518, *P_union_518;

typedef struct _struct_519 _struct_519, *P_struct_519;

struct _struct_519 {
    DWORD Offset;
    DWORD OffsetHigh;
};

union _union_518 {
    struct _struct_519 s;
    PVOID Pointer;
};

struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union _union_518 u;
    HANDLE hEvent;
};

typedef struct _PROCESS_INFORMATION _PROCESS_INFORMATION, *P_PROCESS_INFORMATION;

struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
};

typedef struct _STARTUPINFOA _STARTUPINFOA, *P_STARTUPINFOA;

typedef char CHAR;

typedef CHAR * LPSTR;

typedef BYTE * LPBYTE;

struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};

typedef struct _STARTUPINFOW _STARTUPINFOW, *P_STARTUPINFOW;

struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};

typedef struct _struct_531 _struct_531, *P_struct_531;

struct _struct_531 {
    WORD wProcessorArchitecture;
    WORD wReserved;
};

typedef struct _SYSTEM_INFO _SYSTEM_INFO, *P_SYSTEM_INFO;

typedef union _union_530 _union_530, *P_union_530;

union _union_530 {
    DWORD dwOemId;
    struct _struct_531 s;
};

struct _SYSTEM_INFO {
    union _union_530 u;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
};

typedef struct _SYSTEMTIME _SYSTEMTIME, *P_SYSTEMTIME;

struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
};

typedef struct _TIME_ZONE_INFORMATION _TIME_ZONE_INFORMATION, *P_TIME_ZONE_INFORMATION;

typedef struct _SYSTEMTIME SYSTEMTIME;

struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
};

typedef struct _WIN32_FIND_DATAA _WIN32_FIND_DATAA, *P_WIN32_FIND_DATAA;

struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[260];
    CHAR cAlternateFileName[14];
};

typedef struct _RTL_CRITICAL_SECTION _RTL_CRITICAL_SECTION, *P_RTL_CRITICAL_SECTION;

typedef struct _RTL_CRITICAL_SECTION RTL_CRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;

typedef struct _RTL_CRITICAL_SECTION_DEBUG _RTL_CRITICAL_SECTION_DEBUG, *P_RTL_CRITICAL_SECTION_DEBUG;

typedef struct _RTL_CRITICAL_SECTION_DEBUG * PRTL_CRITICAL_SECTION_DEBUG;

typedef struct _LIST_ENTRY _LIST_ENTRY, *P_LIST_ENTRY;

typedef struct _LIST_ENTRY LIST_ENTRY;

struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
};

struct _LIST_ENTRY {
    struct _LIST_ENTRY * Flink;
    struct _LIST_ENTRY * Blink;
};

struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION * CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD;
};

typedef enum _FINDEX_INFO_LEVELS FINDEX_INFO_LEVELS;

typedef enum _FINDEX_SEARCH_OPS FINDEX_SEARCH_OPS;

typedef enum _GET_FILEEX_INFO_LEVELS GET_FILEEX_INFO_LEVELS;

typedef struct _RTL_CRITICAL_SECTION * PRTL_CRITICAL_SECTION;

typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef struct _OVERLAPPED * LPOVERLAPPED;

typedef struct _PROCESS_INFORMATION * LPPROCESS_INFORMATION;

typedef struct _SECURITY_ATTRIBUTES * LPSECURITY_ATTRIBUTES;

typedef struct _STARTUPINFOA * LPSTARTUPINFOA;

typedef struct _STARTUPINFOW * LPSTARTUPINFOW;

typedef struct _SYSTEM_INFO * LPSYSTEM_INFO;

typedef struct _SYSTEMTIME * LPSYSTEMTIME;

typedef DWORD (* PTHREAD_START_ROUTINE)(LPVOID);

typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef struct _TIME_ZONE_INFORMATION * LPTIME_ZONE_INFORMATION;

typedef LONG (* PTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *);

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

typedef struct _WIN32_FIND_DATAA * LPWIN32_FIND_DATAA;

typedef struct _CONSOLE_READCONSOLE_CONTROL _CONSOLE_READCONSOLE_CONTROL, *P_CONSOLE_READCONSOLE_CONTROL;


/* WARNING! conflicting data type names: /WinDef.h/ULONG - /wtypes.h/ULONG */

struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
};

typedef struct _CONSOLE_READCONSOLE_CONTROL * PCONSOLE_READCONSOLE_CONTROL;

typedef int (* FARPROC)(void);

typedef struct HDC__ HDC__, *PHDC__;

typedef struct HDC__ * HDC;

struct HDC__ {
    int unused;
};

typedef void * HGDIOBJ;

typedef struct HINSTANCE__ HINSTANCE__, *PHINSTANCE__;

typedef struct HINSTANCE__ * HINSTANCE;

struct HINSTANCE__ {
    int unused;
};

typedef struct HKEY__ HKEY__, *PHKEY__;

typedef struct HKEY__ * HKEY;

struct HKEY__ {
    int unused;
};

typedef HANDLE HLOCAL;

typedef HINSTANCE HMODULE;

typedef struct HRSRC__ HRSRC__, *PHRSRC__;

typedef struct HRSRC__ * HRSRC;

struct HRSRC__ {
    int unused;
};

typedef struct HWND__ HWND__, *PHWND__;

typedef struct HWND__ * HWND;

struct HWND__ {
    int unused;
};

typedef int INT;

typedef BOOL * LPBOOL;

typedef void * LPCVOID;

typedef DWORD * LPDWORD;

typedef struct _FILETIME * LPFILETIME;

typedef WORD * LPWORD;

typedef BYTE * PBYTE;

typedef DWORD * PDWORD;

typedef HKEY * PHKEY;

typedef uint UINT;

typedef struct _cpinfo _cpinfo, *P_cpinfo;

struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
};

typedef DWORD LCTYPE;

typedef BOOL (* LOCALE_ENUMPROCW)(LPWSTR);

typedef struct _cpinfo * LPCPINFO;

typedef enum _HEAP_INFORMATION_CLASS {
    HeapCompatibilityInformation=0,
    HeapEnableTerminationOnCorruption=1
} _HEAP_INFORMATION_CLASS;

typedef struct _IMAGE_SECTION_HEADER _IMAGE_SECTION_HEADER, *P_IMAGE_SECTION_HEADER;

typedef union _union_226 _union_226, *P_union_226;

union _union_226 {
    DWORD PhysicalAddress;
    DWORD VirtualSize;
};

struct _IMAGE_SECTION_HEADER {
    BYTE Name[8];
    union _union_226 Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
};

typedef struct _MEMORY_BASIC_INFORMATION _MEMORY_BASIC_INFORMATION, *P_MEMORY_BASIC_INFORMATION;

struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
};

typedef struct _OSVERSIONINFOA _OSVERSIONINFOA, *P_OSVERSIONINFOA;

struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[128];
};

typedef struct _OSVERSIONINFOW _OSVERSIONINFOW, *P_OSVERSIONINFOW;

struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[128];
};

typedef struct _SINGLE_LIST_ENTRY _SINGLE_LIST_ENTRY, *P_SINGLE_LIST_ENTRY;

struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY * Next;
};

typedef union _SLIST_HEADER _SLIST_HEADER, *P_SLIST_HEADER;

typedef struct _struct_299 _struct_299, *P_struct_299;

typedef struct _SINGLE_LIST_ENTRY SINGLE_LIST_ENTRY;

struct _struct_299 {
    SINGLE_LIST_ENTRY Next;
    WORD Depth;
    WORD Sequence;
};

union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct _struct_299 s;
};

typedef struct _TEB _TEB, *P_TEB;

struct _TEB {
};

typedef DWORD ACCESS_MASK;

typedef enum _HEAP_INFORMATION_CLASS HEAP_INFORMATION_CLASS;

typedef DWORD LCID;

typedef CHAR * LPCSTR;

typedef struct _OSVERSIONINFOA * LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW * LPOSVERSIONINFOW;

typedef WCHAR * LPWCH;

typedef WCHAR * PCNZWCH;

typedef struct _IMAGE_SECTION_HEADER * PIMAGE_SECTION_HEADER;

typedef LARGE_INTEGER * PLARGE_INTEGER;

typedef LONG * PLONG;

typedef struct _MEMORY_BASIC_INFORMATION * PMEMORY_BASIC_INFORMATION;

typedef PVOID PSECURITY_DESCRIPTOR;

typedef struct _SINGLE_LIST_ENTRY * PSINGLE_LIST_ENTRY;

typedef union _SLIST_HEADER * PSLIST_HEADER;

typedef LONG LSTATUS;

typedef ACCESS_MASK REGSAM;

typedef boolean BOOLEAN;

typedef struct _Ctypevec _Ctypevec, *P_Ctypevec;

struct _Ctypevec {
    uint _Page;
    short * _Table;
    int _Delfl;
    wchar_t * _LocaleName;
};

typedef struct _Cvtvec _Cvtvec, *P_Cvtvec;

struct _Cvtvec {
    uint _Page;
    uint _Mbcurmax;
    int _Isclocale;
    uchar _Isleadbyte[32];
};

typedef CRITICAL_SECTION _Rmtx;

typedef ulonglong __uint64;

typedef struct _s__RTTIBaseClassDescriptor _s__RTTIBaseClassDescriptor, *P_s__RTTIBaseClassDescriptor;

typedef struct TypeDescriptor TypeDescriptor, *PTypeDescriptor;

typedef struct _s__RTTIClassHierarchyDescriptor _s__RTTIClassHierarchyDescriptor, *P_s__RTTIClassHierarchyDescriptor;

typedef struct _s__RTTIClassHierarchyDescriptor RTTIClassHierarchyDescriptor;

typedef struct _s__RTTIBaseClassDescriptor RTTIBaseClassDescriptor;

struct _s__RTTIBaseClassDescriptor {
    struct TypeDescriptor * pTypeDescriptor; /* ref to TypeDescriptor (RTTI 0) for class */
    dword numContainedBases; /* count of extended classes in BaseClassArray (RTTI 2) */
    struct PMD where; /* member displacement structure */
    dword attributes; /* bit flags */
    RTTIClassHierarchyDescriptor * pClassHierarchyDescriptor; /* ref to ClassHierarchyDescriptor (RTTI 3) for class */
};

struct TypeDescriptor {
    void * pVFTable;
    void * spare;
    char name[0];
};

struct _s__RTTIClassHierarchyDescriptor {
    dword signature;
    dword attributes; /* bit flags */
    dword numBaseClasses; /* number of base classes (i.e. rtti1Count) */
    RTTIBaseClassDescriptor * * pBaseClassArray; /* ref to BaseClassArray (RTTI 2) */
};

typedef struct _s__RTTICompleteObjectLocator _s__RTTICompleteObjectLocator, *P_s__RTTICompleteObjectLocator;

struct _s__RTTICompleteObjectLocator {
    dword signature;
    dword offset; /* offset of vbtable within class */
    dword cdOffset; /* constructor displacement offset */
    struct TypeDescriptor * pTypeDescriptor; /* ref to TypeDescriptor (RTTI 0) for class */
    RTTIClassHierarchyDescriptor * pClassDescriptor; /* ref to ClassHierarchyDescriptor (RTTI 3) */
};

typedef struct _s_ESTypeList _s_ESTypeList, *P_s_ESTypeList;

typedef struct _s_HandlerType _s_HandlerType, *P_s_HandlerType;

typedef struct _s_HandlerType HandlerType;

struct _s_HandlerType {
    uint adjectives;
    struct TypeDescriptor * pType;
    ptrdiff_t dispCatchObj;
    void * addressOfHandler;
};

struct _s_ESTypeList {
    int nCount;
    HandlerType * pTypeArray;
};

typedef struct _s_FuncInfo _s_FuncInfo, *P_s_FuncInfo;

typedef struct _s_UnwindMapEntry _s_UnwindMapEntry, *P_s_UnwindMapEntry;

typedef struct _s_UnwindMapEntry UnwindMapEntry;

typedef struct _s_TryBlockMapEntry _s_TryBlockMapEntry, *P_s_TryBlockMapEntry;

typedef struct _s_TryBlockMapEntry TryBlockMapEntry;

typedef struct _s_ESTypeList ESTypeList;

struct _s_FuncInfo {
    uint magicNumber_and_bbtFlags;
    __ehstate_t maxState;
    UnwindMapEntry * pUnwindMap;
    uint nTryBlocks;
    TryBlockMapEntry * pTryBlockMap;
    uint nIPMapEntries;
    void * pIPToStateMap;
    ESTypeList * pESTypeList;
    int EHFlags;
};

struct _s_UnwindMapEntry {
    __ehstate_t toState;
    void (* action)(void);
};

struct _s_TryBlockMapEntry {
    __ehstate_t tryLow;
    __ehstate_t tryHigh;
    __ehstate_t catchHigh;
    int nCatches;
    HandlerType * pHandlerArray;
};

typedef struct charNode charNode, *PcharNode;

struct charNode { /* PlaceHolder Class Structure */
};

typedef struct DNameStatusNode DNameStatusNode, *PDNameStatusNode;

struct DNameStatusNode { /* PlaceHolder Class Structure */
};

typedef struct _s_FuncInfo FuncInfo;

typedef struct pairNode pairNode, *PpairNode;

struct pairNode { /* PlaceHolder Class Structure */
};

typedef struct pcharNode pcharNode, *PpcharNode;

struct pcharNode { /* PlaceHolder Class Structure */
};

typedef struct pDNameNode pDNameNode, *PpDNameNode;

struct pDNameNode { /* PlaceHolder Class Structure */
};

typedef struct _s__RTTICompleteObjectLocator RTTICompleteObjectLocator;

typedef struct type_info type_info, *Ptype_info;

struct type_info { /* PlaceHolder Class Structure */
};

