typedef unsigned char   undefined;

typedef unsigned int    ImageBaseOffset32;
typedef unsigned char    byte;
typedef unsigned int    dword;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined4;
typedef unsigned long long    undefined8;
typedef unsigned short    ushort;
typedef unsigned short    word;
typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion;

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct {
    dword OffsetToDirectory;
    dword DataIsDirectory;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion {
    dword OffsetToData;
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;
};

typedef struct _STARTUPINFOA _STARTUPINFOA, *P_STARTUPINFOA;

typedef ulong DWORD;

typedef char CHAR;

typedef CHAR * LPSTR;

typedef ushort WORD;

typedef uchar BYTE;

typedef BYTE * LPBYTE;

typedef void * HANDLE;

struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};

typedef struct _RTL_CRITICAL_SECTION _RTL_CRITICAL_SECTION, *P_RTL_CRITICAL_SECTION;

typedef struct _RTL_CRITICAL_SECTION * PRTL_CRITICAL_SECTION;

typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef struct _RTL_CRITICAL_SECTION_DEBUG _RTL_CRITICAL_SECTION_DEBUG, *P_RTL_CRITICAL_SECTION_DEBUG;

typedef struct _RTL_CRITICAL_SECTION_DEBUG * PRTL_CRITICAL_SECTION_DEBUG;

typedef long LONG;

typedef ulong ULONG_PTR;

typedef struct _LIST_ENTRY _LIST_ENTRY, *P_LIST_ENTRY;

typedef struct _LIST_ENTRY LIST_ENTRY;

struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
};

struct _LIST_ENTRY {
    struct _LIST_ENTRY * Flink;
    struct _LIST_ENTRY * Blink;
};

struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION * CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD;
};

typedef struct _STARTUPINFOA * LPSTARTUPINFOA;

typedef struct _EXCEPTION_POINTERS _EXCEPTION_POINTERS, *P_EXCEPTION_POINTERS;

typedef LONG (* PTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *);

typedef struct _EXCEPTION_RECORD _EXCEPTION_RECORD, *P_EXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;

typedef EXCEPTION_RECORD * PEXCEPTION_RECORD;

typedef struct _CONTEXT _CONTEXT, *P_CONTEXT;

typedef struct _CONTEXT CONTEXT;

typedef CONTEXT * PCONTEXT;

typedef void * PVOID;

typedef struct _FLOATING_SAVE_AREA _FLOATING_SAVE_AREA, *P_FLOATING_SAVE_AREA;

typedef struct _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;

struct _FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
};

struct _CONTEXT {
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];
};

struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD * ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
};

struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
};

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

typedef struct _MEMORY_BASIC_INFORMATION _MEMORY_BASIC_INFORMATION, *P_MEMORY_BASIC_INFORMATION;

typedef ULONG_PTR SIZE_T;

struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
};

typedef CHAR * LPCSTR;

typedef struct _MEMORY_BASIC_INFORMATION * PMEMORY_BASIC_INFORMATION;

typedef struct IMAGE_DOS_HEADER IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

struct IMAGE_DOS_HEADER {
    char e_magic[2]; // Magic number
    word e_cblp; // Bytes of last page
    word e_cp; // Pages in file
    word e_crlc; // Relocations
    word e_cparhdr; // Size of header in paragraphs
    word e_minalloc; // Minimum extra paragraphs needed
    word e_maxalloc; // Maximum extra paragraphs needed
    word e_ss; // Initial (relative) SS value
    word e_sp; // Initial SP value
    word e_csum; // Checksum
    word e_ip; // Initial IP value
    word e_cs; // Initial (relative) CS value
    word e_lfarlc; // File address of relocation table
    word e_ovno; // Overlay number
    word e_res[4][4]; // Reserved words
    word e_oemid; // OEM identifier (for e_oeminfo)
    word e_oeminfo; // OEM information; e_oemid specific
    word e_res2[10][10]; // Reserved words
    dword e_lfanew; // File address of new exe header
    byte e_program[64]; // Actual DOS program
};

typedef uint UINT_PTR;

typedef int (* FARPROC)(void);

typedef struct HINSTANCE__ HINSTANCE__, *PHINSTANCE__;

typedef struct HINSTANCE__ * HINSTANCE;

struct HINSTANCE__ {
    int unused;
};

typedef void * LPCVOID;

typedef void * LPVOID;

typedef HINSTANCE HMODULE;

typedef DWORD * PDWORD;

typedef int BOOL;

typedef uint UINT;

typedef struct IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

struct IMAGE_DATA_DIRECTORY {
    ImageBaseOffset32 VirtualAddress;
    dword Size;
};

struct IMAGE_OPTIONAL_HEADER32 {
    word Magic;
    byte MajorLinkerVersion;
    byte MinorLinkerVersion;
    dword SizeOfCode;
    dword SizeOfInitializedData;
    dword SizeOfUninitializedData;
    ImageBaseOffset32 AddressOfEntryPoint;
    ImageBaseOffset32 BaseOfCode;
    ImageBaseOffset32 BaseOfData;
    pointer32 ImageBase;
    dword SectionAlignment;
    dword FileAlignment;
    word MajorOperatingSystemVersion;
    word MinorOperatingSystemVersion;
    word MajorImageVersion;
    word MinorImageVersion;
    word MajorSubsystemVersion;
    word MinorSubsystemVersion;
    dword Win32VersionValue;
    dword SizeOfImage;
    dword SizeOfHeaders;
    dword CheckSum;
    word Subsystem;
    word DllCharacteristics;
    dword SizeOfStackReserve;
    dword SizeOfStackCommit;
    dword SizeOfHeapReserve;
    dword SizeOfHeapCommit;
    dword LoaderFlags;
    dword NumberOfRvaAndSizes;
    struct IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct {
    dword NameOffset;
    dword NameIsString;
};

typedef struct IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32, *PIMAGE_THUNK_DATA32;

struct IMAGE_THUNK_DATA32 {
    dword StartAddressOfRawData;
    dword EndAddressOfRawData;
    dword AddressOfIndex;
    dword AddressOfCallBacks;
    dword SizeOfZeroFill;
    dword Characteristics;
};

typedef struct IMAGE_FILE_HEADER IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

struct IMAGE_FILE_HEADER {
    word Machine; // 332
    word NumberOfSections;
    dword TimeDateStamp;
    dword PointerToSymbolTable;
    dword NumberOfSymbols;
    word SizeOfOptionalHeader;
    word Characteristics;
};

typedef struct IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

struct IMAGE_NT_HEADERS32 {
    char Signature[4];
    struct IMAGE_FILE_HEADER FileHeader;
    struct IMAGE_OPTIONAL_HEADER32 OptionalHeader;
};

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion;

union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion {
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;
    dword Name;
    word Id;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion NameUnion;
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion DirectoryUnion;
};

typedef struct IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

typedef union Misc Misc, *PMisc;

typedef enum SectionFlags {
    IMAGE_SCN_TYPE_NO_PAD=8,
    IMAGE_SCN_RESERVED_0001=16,
    IMAGE_SCN_CNT_CODE=32,
    IMAGE_SCN_CNT_INITIALIZED_DATA=64,
    IMAGE_SCN_CNT_UNINITIALIZED_DATA=128,
    IMAGE_SCN_LNK_OTHER=256,
    IMAGE_SCN_LNK_INFO=512,
    IMAGE_SCN_RESERVED_0040=1024,
    IMAGE_SCN_LNK_REMOVE=2048,
    IMAGE_SCN_LNK_COMDAT=4096,
    IMAGE_SCN_GPREL=32768,
    IMAGE_SCN_MEM_16BIT=131072,
    IMAGE_SCN_MEM_PURGEABLE=131072,
    IMAGE_SCN_MEM_LOCKED=262144,
    IMAGE_SCN_MEM_PRELOAD=524288,
    IMAGE_SCN_ALIGN_1BYTES=1048576,
    IMAGE_SCN_ALIGN_2BYTES=2097152,
    IMAGE_SCN_ALIGN_4BYTES=3145728,
    IMAGE_SCN_ALIGN_8BYTES=4194304,
    IMAGE_SCN_ALIGN_16BYTES=5242880,
    IMAGE_SCN_ALIGN_32BYTES=6291456,
    IMAGE_SCN_ALIGN_64BYTES=7340032,
    IMAGE_SCN_ALIGN_128BYTES=8388608,
    IMAGE_SCN_ALIGN_256BYTES=9437184,
    IMAGE_SCN_ALIGN_512BYTES=10485760,
    IMAGE_SCN_ALIGN_1024BYTES=11534336,
    IMAGE_SCN_ALIGN_2048BYTES=12582912,
    IMAGE_SCN_ALIGN_4096BYTES=13631488,
    IMAGE_SCN_ALIGN_8192BYTES=14680064,
    IMAGE_SCN_LNK_NRELOC_OVFL=16777216,
    IMAGE_SCN_MEM_DISCARDABLE=33554432,
    IMAGE_SCN_MEM_NOT_CACHED=67108864,
    IMAGE_SCN_MEM_NOT_PAGED=134217728,
    IMAGE_SCN_MEM_SHARED=268435456,
    IMAGE_SCN_MEM_EXECUTE=536870912,
    IMAGE_SCN_MEM_READ=1073741824,
    IMAGE_SCN_MEM_WRITE=2147483648
} SectionFlags;

union Misc {
    dword PhysicalAddress;
    dword VirtualSize;
};

struct IMAGE_SECTION_HEADER {
    char Name[8];
    union Misc Misc;
    ImageBaseOffset32 VirtualAddress;
    dword SizeOfRawData;
    dword PointerToRawData;
    dword PointerToRelocations;
    dword PointerToLinenumbers;
    word NumberOfRelocations;
    word NumberOfLinenumbers;
    enum SectionFlags Characteristics;
};

typedef struct IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;

struct IMAGE_RESOURCE_DATA_ENTRY {
    dword OffsetToData;
    dword Size;
    dword CodePage;
    dword Reserved;
};

typedef struct IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;

struct IMAGE_RESOURCE_DIRECTORY {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    word NumberOfNamedEntries;
    word NumberOfIdEntries;
};

typedef struct _iobuf _iobuf, *P_iobuf;

struct _iobuf {
    char * _ptr;
    int _cnt;
    char * _base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char * _tmpfname;
};

typedef struct _iobuf FILE;

typedef char * va_list;

typedef int (* _onexit_t)(void);

typedef uint size_t;

typedef struct _startupinfo _startupinfo, *P_startupinfo;

struct _startupinfo {
    int newmode;
};




// WARNING: Exceeded maximum restarts with more pending

void FUN_00401000(void)

{
                    // WARNING: Could not recover jumptable at 0x0040100c. Too many branches
                    // WARNING: Treating indirect jump as call
  atexit();
  return;
}



void FUN_00401020(void)

{
  code *pcVar1;
  int *piVar2;
  UINT uExitCode;
  _startupinfo local_14;
  char **local_10 [2];
  
  if (PTR_tls_callback_0_0040f2f0 != (undefined *)0x0) {
    (*(code *)PTR_tls_callback_0_0040f2f0)(0,2,0);
  }
  SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)0x401180);
  FUN_004028e0();
  FUN_00402e50();
  local_14 = 0;
  __getmainargs(&DAT_00410000,(char ***)&DAT_00410004,local_10,DAT_0040f270,&local_14);
  pcVar1 = _iob_exref;
  if (DAT_00410024 != 0) {
    DAT_0040f274 = DAT_00410024;
    _setmode(*(int *)(_iob_exref + 0x10),DAT_00410024);
    _setmode(*(int *)(pcVar1 + 0x30),DAT_00410024);
    _setmode(*(int *)(pcVar1 + 0x50),DAT_00410024);
  }
  piVar2 = (int *)__p__fmode();
  *piVar2 = DAT_0040f274;
  FUN_00402b00();
  FUN_00402d30();
  __p__environ();
  uExitCode = FUN_00402d50((char)DAT_00410000);
  _cexit();
                    // WARNING: Subroutine does not return
  ExitProcess(uExitCode);
}



undefined4 entry(void)

{
  bool bVar1;
  code *pcVar2;
  uint **ppuStack52;
  
  __set_app_type(2);
  FUN_00401020();
  __set_app_type(1);
  FUN_00401020();
  pcVar2 = (code *)**ppuStack52;
  if (pcVar2 < (code *)0xc0000092) {
    if (pcVar2 < (code *)0xc000008d) {
      if (pcVar2 == (code *)0xc0000005) {
        signal(0xb);
        if (pcVar2 == (code *)0x1) {
          signal(0xb);
          return 0xffffffff;
        }
        if (pcVar2 == (code *)0x0) {
          return 0;
        }
        (*pcVar2)(0xb);
        return 0xffffffff;
      }
      if (pcVar2 != (code *)0xc000001d) {
        return 0;
      }
LAB_004011f5:
      signal(4);
      if (pcVar2 == (code *)0x1) {
        signal(4);
        return 0xffffffff;
      }
      if (pcVar2 == (code *)0x0) {
        return 0;
      }
      (*pcVar2)(4);
      return 0xffffffff;
    }
  }
  else {
    if (pcVar2 == (code *)0xc0000094) {
      bVar1 = false;
      goto LAB_004011a1;
    }
    if (pcVar2 == (code *)0xc0000096) goto LAB_004011f5;
    if (pcVar2 != (code *)0xc0000093) {
      return 0;
    }
  }
  bVar1 = true;
LAB_004011a1:
  signal(8);
  if (pcVar2 == (code *)0x1) {
    signal(8);
    if (bVar1) {
      FUN_00402e50();
    }
    return 0xffffffff;
  }
  if (pcVar2 == (code *)0x0) {
    return 0;
  }
  (*pcVar2)(8);
  return 0xffffffff;
}



void FUN_004012e0(void)

{
  HMODULE hModule;
  FARPROC pFVar1;
  
  if (DAT_0040f3a0 != 0) {
    hModule = GetModuleHandleA(s_libgcj_s_dll_0040f27c);
    pFVar1 = (FARPROC)0x0;
    if (hModule != (HMODULE)0x0) {
      pFVar1 = GetProcAddress(hModule,s__Jv_RegisterClasses_0040f289);
    }
    if (pFVar1 != (FARPROC)0x0) {
      (*pFVar1)(&DAT_0040f3a0);
    }
  }
  return;
}



void __cdecl FUN_00401340(int param_1)

{
  int local_c;
  
  for (local_c = 0; local_c < 8; local_c = local_c + 1) {
    *(char *)(param_1 + local_c) = *(char *)(param_1 + local_c) + '\x04';
  }
  return;
}



undefined4 FUN_004015b1(void)

{
  FUN_00401676();
  return 0;
}



undefined4 FUN_00401676(void)

{
  uint uVar1;
  uint local_34;
  uint local_30;
  undefined2 local_2a;
  int local_28;
  short *local_24;
  undefined4 local_20;
  code *local_1c;
  int *local_18;
  int local_14;
  int local_10;
  
  local_34 = DAT_00404070;
  local_30 = DAT_00404074;
  local_2a = DAT_0040407e;
  local_28 = DAT_00404078;
  local_24 = (short *)malloc(DAT_00404078 << 3);
  local_20 = 0;
  local_10 = 0;
  for (local_14 = 0; local_14 < local_28; local_14 = local_14 + 1) {
    if (local_10 == 2) {
      local_10 = 4;
    }
    FUN_00401340((int)&local_34);
    uVar1 = *(uint *)(&DAT_00404064 + local_10 * 8);
    *(uint *)(local_24 + local_14 * 4) = *(uint *)(&DAT_00404060 + local_10 * 8) ^ local_34;
    *(uint *)((int)(local_24 + local_14 * 4) + 4) = uVar1 ^ local_30;
    local_10 = local_10 + 1;
  }
  local_18 = FUN_00401deb(local_24);
  local_1c = (code *)FUN_004024a7(local_18,(char *)0x1);
  if (local_1c != (code *)0x0) {
    (*local_1c)(&DAT_00404000,s_GCGEGAN___0040f2a0,s_510698536_0040f2aa);
  }
  return 0;
}



int * __cdecl FUN_00401deb(short *param_1)

{
  int *piVar1;
  code *pcVar2;
  LPVOID _Dst;
  int iVar3;
  int *piVar4;
  HANDLE hHeap;
  LPVOID local_20;
  
  if (((*param_1 == 0x5a4d) &&
      (piVar1 = (int *)((int)param_1 + *(int *)(param_1 + 0x1e)), *piVar1 == 0x4550)) &&
     ((local_20 = VirtualAlloc((LPVOID)piVar1[0xd],piVar1[0x14],0x2000,4), local_20 != (LPVOID)0x0
      || (local_20 = VirtualAlloc((LPVOID)0x0,piVar1[0x14],0x2000,4), local_20 != (LPVOID)0x0)))) {
    hHeap = GetProcessHeap();
    piVar4 = (int *)HeapAlloc(hHeap,0,0x14);
    piVar4[1] = (int)local_20;
    piVar4[3] = 0;
    piVar4[2] = 0;
    piVar4[4] = 0;
    VirtualAlloc(local_20,piVar1[0x14],0x1000,4);
    _Dst = VirtualAlloc(local_20,piVar1[0x15],0x1000,4);
    memcpy(_Dst,param_1,*(int *)(param_1 + 0x1e) + piVar1[0x15]);
    *piVar4 = (int)_Dst + *(int *)(param_1 + 0x1e);
    *(LPVOID *)(*piVar4 + 0x34) = local_20;
    FUN_0040228a((int)param_1,(int)piVar1,piVar4);
    if ((int)local_20 - piVar1[0xd] != 0) {
      FUN_00401e03(piVar4,(int)local_20 - piVar1[0xd]);
    }
    iVar3 = FUN_0040237d(piVar4);
    if (iVar3 != 0) {
      FUN_00402098(piVar4);
      if (*(int *)(*piVar4 + 0x28) == 0) {
        return piVar4;
      }
      pcVar2 = (code *)((int)local_20 + *(int *)(*piVar4 + 0x28));
      if ((pcVar2 != (code *)0x0) && (iVar3 = (*pcVar2)(local_20,1,0), iVar3 != 0)) {
        piVar4[4] = 1;
        return piVar4;
      }
    }
    FUN_00401e18(piVar4);
  }
  return (int *)0x0;
}



void __cdecl FUN_00401e03(int *param_1,int param_2)

{
  uint local_28;
  int *local_1c;
  ushort *local_14;
  
  if (*(int *)(*param_1 + 0xa4) != 0) {
    for (local_1c = (int *)(param_1[1] + *(int *)(*param_1 + 0xa0)); *local_1c != 0;
        local_1c = (int *)((int)local_1c + local_1c[1])) {
      local_14 = (ushort *)0x0;
      for (local_28 = 0; local_28 < local_1c[1] - 8U >> 1; local_28 = local_28 + 1) {
        if (((int)(uint)*local_14 >> 0xc != 0) && ((int)(uint)*local_14 >> 0xc == 3)) {
          *(int *)(*local_14 & 0xfff) = *(int *)(*local_14 & 0xfff) + param_2;
        }
        local_14 = local_14 + 1;
      }
    }
  }
  return;
}



void __cdecl FUN_00401e18(int *param_1)

{
  LPVOID lpMem;
  HANDLE pvVar1;
  int local_18;
  
  if (param_1 != (int *)0x0) {
    if (param_1[4] != 0) {
      (*(code *)(param_1[1] + *(int *)(*param_1 + 0x28)))(param_1[1],0,0);
      param_1[4] = 0;
    }
    if (param_1[2] != 0) {
      for (local_18 = 0; local_18 < param_1[3]; local_18 = local_18 + 1) {
        if (*(int *)(param_1[2] + local_18 * 4) != -1) {
          FreeLibrary(*(HMODULE *)(param_1[2] + local_18 * 4));
        }
      }
      lpMem = (LPVOID)param_1[2];
      pvVar1 = GetProcessHeap();
      HeapFree(pvVar1,0,lpMem);
      VirtualFree((LPVOID)param_1[1],0,0x8000);
    }
    pvVar1 = GetProcessHeap();
    HeapFree(pvVar1,0,param_1);
  }
  return;
}



void __cdecl FUN_00402098(int *param_1)

{
  DWORD local_30;
  int local_2c;
  int local_28;
  undefined4 local_24;
  uint local_20;
  SIZE_T local_1c;
  uint local_18;
  uint local_14;
  int local_10;
  
  local_28 = *param_1 + (uint)*(ushort *)(*param_1 + 0x14) + 0x18;
  local_24 = 0;
  for (local_2c = 0; local_2c < (int)(uint)*(ushort *)(*param_1 + 6); local_2c = local_2c + 1) {
    local_18 = (uint)((*(uint *)(local_28 + 0x24) & 0x20000000) != 0);
    local_14 = (uint)((*(uint *)(local_28 + 0x24) & 0x40000000) != 0);
    local_10 = -(*(int *)(local_28 + 0x24) >> 0x1f);
    if ((*(uint *)(local_28 + 0x24) & 0x2000000) == 0) {
      local_20 = *(uint *)(&DAT_00404040 + ((local_18 * 2 + local_14) * 2 + local_10) * 4);
      if ((*(uint *)(local_28 + 0x24) & 0x4000000) != 0) {
        local_20 = local_20 | 0x200;
      }
      local_1c = *(SIZE_T *)(local_28 + 0x10);
      if (local_1c == 0) {
        if ((*(uint *)(local_28 + 0x24) & 0x40) == 0) {
          if ((*(uint *)(local_28 + 0x24) & 0x80) != 0) {
            local_1c = *(SIZE_T *)(*param_1 + 0x24);
          }
        }
        else {
          local_1c = *(SIZE_T *)(*param_1 + 0x20);
        }
        if (local_1c != 0) {
          VirtualProtect(*(LPVOID *)(local_28 + 8),local_1c,local_20,&local_30);
        }
      }
    }
    else {
      VirtualFree(*(LPVOID *)(local_28 + 8),*(SIZE_T *)(local_28 + 0x10),0x4000);
    }
    local_28 = local_28 + 0x28;
  }
  return;
}



void __cdecl FUN_0040228a(int param_1,int param_2,int *param_3)

{
  int iVar1;
  SIZE_T dwSize;
  LPVOID pvVar2;
  int local_20;
  int local_10;
  
  iVar1 = param_3[1];
  local_10 = *param_3 + (uint)*(ushort *)(*param_3 + 0x14) + 0x18;
  for (local_20 = 0; local_20 < (int)(uint)*(ushort *)(*param_3 + 6); local_20 = local_20 + 1) {
    if (*(int *)(local_10 + 0x10) == 0) {
      dwSize = *(SIZE_T *)(param_2 + 0x38);
      if (0 < (int)dwSize) {
        pvVar2 = VirtualAlloc((LPVOID)(*(int *)(local_10 + 0xc) + iVar1),dwSize,0x1000,4);
        *(LPVOID *)(local_10 + 8) = pvVar2;
        memset(pvVar2,0,dwSize);
      }
    }
    else {
      pvVar2 = VirtualAlloc((LPVOID)(*(int *)(local_10 + 0xc) + iVar1),*(SIZE_T *)(local_10 + 0x10),
                            0x1000,4);
      memmove(pvVar2,(void *)(*(int *)(local_10 + 0x14) + param_1),*(size_t *)(local_10 + 0x10));
      *(LPVOID *)(local_10 + 8) = pvVar2;
    }
    local_10 = local_10 + 0x28;
  }
  return;
}



int __cdecl FUN_0040237d(int *param_1)

{
  int iVar1;
  LPVOID lpMem;
  int iVar2;
  bool bVar3;
  HANDLE pvVar4;
  FARPROC pFVar5;
  HMODULE hModule;
  LPVOID pvVar6;
  BOOL BVar7;
  int local_30;
  int *local_24;
  uint *local_20;
  FARPROC *local_1c;
  
  local_30 = 1;
  iVar1 = param_1[1];
  if (*(int *)(*param_1 + 0x84) != 0) {
    local_24 = (int *)(iVar1 + *(int *)(*param_1 + 0x80));
    while( true ) {
      BVar7 = IsBadReadPtr(local_24,0x14);
      if ((BVar7 == 0) && (local_24[3] != 0)) {
        bVar3 = true;
      }
      else {
        bVar3 = false;
      }
      if (!bVar3) {
        return local_30;
      }
      hModule = LoadLibraryA((LPCSTR)(iVar1 + local_24[3]));
      if (hModule == (HMODULE)0x0) break;
      iVar2 = param_1[3];
      pvVar4 = GetProcessHeap();
      pvVar6 = HeapAlloc(pvVar4,0,(iVar2 + 1) * 4);
      lpMem = (LPVOID)param_1[2];
      pvVar4 = GetProcessHeap();
      HeapFree(pvVar4,0,lpMem);
      param_1[2] = (int)pvVar6;
      if (param_1[2] == 0) {
        return 0;
      }
      iVar2 = param_1[3];
      *(HMODULE *)(param_1[2] + iVar2 * 4) = hModule;
      param_1[3] = iVar2 + 1;
      if (*local_24 == 0) {
        local_20 = (uint *)(iVar1 + local_24[4]);
        local_1c = (FARPROC *)(iVar1 + local_24[4]);
      }
      else {
        local_20 = (uint *)(iVar1 + *local_24);
        local_1c = (FARPROC *)(iVar1 + local_24[4]);
      }
      for (; *local_20 != 0; local_20 = local_20 + 1) {
        if ((int)*local_20 < 0) {
          pFVar5 = GetProcAddress(hModule,(LPCSTR)(*local_20 & 0xffff));
          *local_1c = pFVar5;
        }
        else {
          pFVar5 = GetProcAddress(hModule,(LPCSTR)(iVar1 + *local_20 + 2));
          *local_1c = pFVar5;
        }
        if (*local_1c == (FARPROC)0x0) {
          local_30 = 0;
          break;
        }
        local_1c = local_1c + 1;
      }
      if (local_30 == 0) {
        return 0;
      }
      local_24 = local_24 + 5;
    }
    local_30 = 0;
  }
  return local_30;
}



int __cdecl FUN_004024a7(int *param_1,char *param_2)

{
  int iVar1;
  int iVar2;
  int iVar3;
  uint local_24;
  uint local_20;
  int *local_1c;
  ushort *local_18;
  
  iVar3 = param_1[1];
  local_24 = 0xffffffff;
  if (*(int *)(*param_1 + 0x7c) == 0) {
    iVar3 = 0;
  }
  else {
    iVar1 = iVar3 + *(int *)(*param_1 + 0x78);
    if ((*(int *)(iVar1 + 0x18) == 0) || (*(int *)(iVar1 + 0x14) == 0)) {
      iVar3 = 0;
    }
    else {
      local_1c = (int *)(iVar3 + *(int *)(iVar1 + 0x20));
      local_18 = (ushort *)(iVar3 + *(int *)(iVar1 + 0x24));
      for (local_20 = 0; local_20 < *(uint *)(iVar1 + 0x18); local_20 = local_20 + 1) {
        if ((uint)param_2 >> 0x10 == 0) {
          if (*local_18 == (ushort)((short)param_2 - 1U)) {
            local_24 = (uint)*local_18;
            break;
          }
        }
        else {
          iVar2 = strcmp(param_2,(char *)(iVar3 + *local_1c));
          if (iVar2 == 0) {
            local_24 = (uint)*local_18;
            break;
          }
        }
        local_1c = local_1c + 1;
        local_18 = local_18 + 1;
      }
      if (local_24 == 0xffffffff) {
        iVar3 = 0;
      }
      else if (*(uint *)(iVar1 + 0x14) < local_24) {
        iVar3 = 0;
      }
      else {
        iVar3 = iVar3 + *(int *)(*(int *)(iVar1 + 0x1c) + local_24 * 4 + iVar3);
      }
    }
  }
  return iVar3;
}



undefined4 tls_callback_1(undefined4 param_1,int param_2)

{
  if ((param_2 != 0) && (param_2 != 3)) {
    return 1;
  }
  FUN_00402ee0(param_1,param_2);
  return 1;
}



// WARNING: Removing unreachable block (ram,0x004028a7)
// WARNING: Removing unreachable block (ram,0x004028ad)
// WARNING: Removing unreachable block (ram,0x004028af)
// WARNING: Removing unreachable block (ram,0x004028ba)
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

undefined4 tls_callback_0(undefined4 param_1,int param_2)

{
  if (3 < *(uint *)_winmajor_exref) {
    if (_DAT_00410034 != 2) {
      _DAT_00410034 = 2;
    }
    if ((param_2 != 2) && (param_2 == 1)) {
      FUN_00402ee0(param_1,1);
    }
    return 1;
  }
  _DAT_0041007c = 1;
  DAT_00410020 = LoadLibraryA(s_mingwm10_dll_0040f2b4);
  if (DAT_00410020 != (HMODULE)0x0) {
    DAT_0041006c = GetProcAddress(DAT_00410020,s___mingwthr_remove_key_dtor_0040f2c1);
    DAT_0041005c = GetProcAddress(DAT_00410020,s___mingwthr_key_dtor_0040f2dc);
    if (DAT_00410020 != (HMODULE)0x0) {
      if ((DAT_0041006c != (FARPROC)0x0) && (DAT_0041005c != (FARPROC)0x0)) {
        _DAT_00410034 = 1;
        return 1;
      }
      DAT_0041005c = (FARPROC)0x0;
      DAT_0041006c = (FARPROC)0x0;
      FreeLibrary(DAT_00410020);
      DAT_00410020 = (HMODULE)0x0;
      _DAT_00410034 = 0;
      return 1;
    }
  }
  DAT_00410020 = (HMODULE)0x0;
  _DAT_00410034 = 0;
  DAT_0041005c = (FARPROC)0x0;
  DAT_0041006c = (FARPROC)0x0;
  return 1;
}



// WARNING: Removing unreachable block (ram,0x0040298b)
// WARNING: Removing unreachable block (ram,0x0040297d)
// WARNING: Removing unreachable block (ram,0x00402911)
// WARNING: Removing unreachable block (ram,0x00402902)

undefined8 FUN_004028e0(void)

{
  uint *puVar1;
  int iVar2;
  uint uVar3;
  byte in_CF;
  byte in_PF;
  byte in_AF;
  byte in_ZF;
  byte in_SF;
  byte in_TF;
  byte in_IF;
  byte in_OF;
  byte in_NT;
  byte in_AC;
  byte in_VIF;
  byte in_VIP;
  byte in_ID;
  uint uVar4;
  
  uVar4 = (uint)(in_NT & 1) * 0x4000 | (uint)(in_OF & 1) * 0x800 | (uint)(in_IF & 1) * 0x200 |
          (uint)(in_TF & 1) * 0x100 | (uint)(in_SF & 1) * 0x80 | (uint)(in_ZF & 1) * 0x40 |
          (uint)(in_AF & 1) * 0x10 | (uint)(in_PF & 1) * 4 | (uint)(in_CF & 1) |
          (uint)(in_ID & 1) * 0x200000 | (uint)(in_VIP & 1) * 0x100000 |
          (uint)(in_VIF & 1) * 0x80000 | (uint)(in_AC & 1) * 0x40000;
  uVar3 = uVar4 ^ 0x200000;
  uVar3 = ((uint)((uVar3 & 0x4000) != 0) * 0x4000 | (uint)((uVar3 & 0x800) != 0) * 0x800 |
           (uint)((uVar3 & 0x400) != 0) * 0x400 | (uint)((uVar3 & 0x200) != 0) * 0x200 |
           (uint)((uVar3 & 0x100) != 0) * 0x100 | (uint)((uVar3 & 0x80) != 0) * 0x80 |
           (uint)((uVar3 & 0x40) != 0) * 0x40 | (uint)((uVar3 & 0x10) != 0) * 0x10 |
           (uint)((uVar3 & 4) != 0) * 4 | (uint)((uVar3 & 1) != 0) |
           (uint)((uVar3 & 0x200000) != 0) * 0x200000 | (uint)((uVar3 & 0x40000) != 0) * 0x40000) ^
          uVar4;
  if ((uVar3 & 0x200000) != 0) {
    puVar1 = (uint *)cpuid_basic_info(0);
    uVar3 = *puVar1;
    uVar4 = puVar1[2];
    if (uVar3 != 0) {
      iVar2 = cpuid_Version_info(1);
      uVar3 = *(uint *)(iVar2 + 8);
      if ((uVar3 & 0x100) != 0) {
        DAT_00410028 = DAT_00410028 | 1;
      }
      if ((short)uVar3 < 0) {
        DAT_00410028 = DAT_00410028 | 2;
      }
      if ((uVar3 & 0x800000) != 0) {
        DAT_00410028 = DAT_00410028 | 4;
      }
      if ((uVar3 & 0x1000000) != 0) {
        DAT_00410028 = DAT_00410028 | 8;
      }
      if ((uVar3 & 0x2000000) != 0) {
        DAT_00410028 = DAT_00410028 | 0x10;
      }
      if ((uVar3 & 0x4000000) != 0) {
        DAT_00410028 = DAT_00410028 | 0x20;
      }
      if ((*(uint *)(iVar2 + 0xc) & 1) != 0) {
        DAT_00410028 = DAT_00410028 | 0x40;
      }
      if ((*(uint *)(iVar2 + 0xc) & 0x2000) != 0) {
        DAT_00410028 = DAT_00410028 | 0x80;
      }
      puVar1 = (uint *)cpuid(0x80000000);
      uVar3 = *puVar1;
      uVar4 = puVar1[2];
      if (0x80000000 < uVar3) {
        puVar1 = (uint *)cpuid(0x80000001);
        uVar3 = *puVar1;
        if ((int)puVar1[2] < 0) {
          DAT_00410028 = DAT_00410028 | 0x100;
        }
        uVar4 = puVar1[2] & 0x40000000;
        if (uVar4 != 0) {
          DAT_00410028 = DAT_00410028 | 0x200;
        }
      }
    }
  }
  return CONCAT44(uVar4,uVar3);
}



void FUN_004029c0(char *param_1)

{
  FILE *_File;
  
  _File = (FILE *)(_iob_exref + 0x40);
  fwrite(s_Mingw_runtime_failure__0040f2f4,1,0x17,_File);
  vfprintf(_File,param_1,&stack0x00000008);
                    // WARNING: Subroutine does not return
  abort();
}



// WARNING: Removing unreachable block (ram,0x00402b3e)
// WARNING: Removing unreachable block (ram,0x00402b48)
// WARNING: Removing unreachable block (ram,0x00402b52)
// WARNING: Removing unreachable block (ram,0x00402b5c)
// WARNING: Removing unreachable block (ram,0x00402b66)
// WARNING: Removing unreachable block (ram,0x00402b70)
// WARNING: Removing unreachable block (ram,0x00402b76)
// WARNING: Removing unreachable block (ram,0x00402b7d)
// WARNING: Removing unreachable block (ram,0x00402c9f)
// WARNING: Removing unreachable block (ram,0x00402cc1)
// WARNING: Removing unreachable block (ram,0x00402cd8)
// WARNING: Removing unreachable block (ram,0x00402b89)
// WARNING: Removing unreachable block (ram,0x00402b94)
// WARNING: Removing unreachable block (ram,0x00402b99)
// WARNING: Removing unreachable block (ram,0x00402c16)
// WARNING: Removing unreachable block (ram,0x00402c90)
// WARNING: Removing unreachable block (ram,0x00402c1e)
// WARNING: Removing unreachable block (ram,0x00402c26)
// WARNING: Removing unreachable block (ram,0x00402bad)
// WARNING: Removing unreachable block (ram,0x00402c53)
// WARNING: Removing unreachable block (ram,0x00402bb6)
// WARNING: Removing unreachable block (ram,0x00402bbb)
// WARNING: Removing unreachable block (ram,0x00402bd2)
// WARNING: Removing unreachable block (ram,0x00402bde)
// WARNING: Removing unreachable block (ram,0x00402be6)
// WARNING: Removing unreachable block (ram,0x00402c09)
// WARNING: Removing unreachable block (ram,0x00402c35)
// WARNING: Removing unreachable block (ram,0x00402c80)
// WARNING: Removing unreachable block (ram,0x00402c3c)
// WARNING: Removing unreachable block (ram,0x00402c44)
// WARNING: Removing unreachable block (ram,0x00402c67)
// WARNING: Removing unreachable block (ram,0x00402c76)

void __fastcall FUN_00402a10(size_t param_1,void *param_2)

{
  LPCVOID in_EAX;
  SIZE_T SVar1;
  _MEMORY_BASIC_INFORMATION local_3c;
  DWORD local_20 [4];
  
  if (param_1 != 0) {
    SVar1 = VirtualQuery(in_EAX,&local_3c,0x1c);
    if (SVar1 == 0) {
      FUN_004029c0(s__VirtualQuery_failed_for__d_byte_0040f30c);
      if (DAT_0041002c == 0) {
        DAT_0041002c = 1;
      }
      return;
    }
    if ((local_3c.Protect != 4) && (local_3c.Protect != 0x40)) {
      VirtualProtect(local_3c.BaseAddress,local_3c.RegionSize,0x40,local_20);
    }
    memcpy(in_EAX,param_2,param_1);
    if ((local_3c.Protect != 4) && (local_3c.Protect != 0x40)) {
      VirtualProtect(local_3c.BaseAddress,local_3c.RegionSize,local_20[0],local_20);
      return;
    }
  }
  return;
}



// WARNING: Removing unreachable block (ram,0x00402b3e)
// WARNING: Removing unreachable block (ram,0x00402b48)
// WARNING: Removing unreachable block (ram,0x00402b52)
// WARNING: Removing unreachable block (ram,0x00402b5c)
// WARNING: Removing unreachable block (ram,0x00402b66)
// WARNING: Removing unreachable block (ram,0x00402b70)
// WARNING: Removing unreachable block (ram,0x00402b76)
// WARNING: Removing unreachable block (ram,0x00402b7d)
// WARNING: Removing unreachable block (ram,0x00402c9f)
// WARNING: Removing unreachable block (ram,0x00402cc1)
// WARNING: Removing unreachable block (ram,0x00402cd8)
// WARNING: Removing unreachable block (ram,0x00402b89)
// WARNING: Removing unreachable block (ram,0x00402b94)
// WARNING: Removing unreachable block (ram,0x00402b99)
// WARNING: Removing unreachable block (ram,0x00402c16)
// WARNING: Removing unreachable block (ram,0x00402c90)
// WARNING: Removing unreachable block (ram,0x00402c1e)
// WARNING: Removing unreachable block (ram,0x00402c26)
// WARNING: Removing unreachable block (ram,0x00402bad)
// WARNING: Removing unreachable block (ram,0x00402c53)
// WARNING: Removing unreachable block (ram,0x00402bb6)
// WARNING: Removing unreachable block (ram,0x00402bbb)
// WARNING: Removing unreachable block (ram,0x00402bd2)
// WARNING: Removing unreachable block (ram,0x00402bde)
// WARNING: Removing unreachable block (ram,0x00402be6)
// WARNING: Removing unreachable block (ram,0x00402c09)
// WARNING: Removing unreachable block (ram,0x00402c35)
// WARNING: Removing unreachable block (ram,0x00402c80)
// WARNING: Removing unreachable block (ram,0x00402c3c)
// WARNING: Removing unreachable block (ram,0x00402c44)
// WARNING: Removing unreachable block (ram,0x00402c67)
// WARNING: Removing unreachable block (ram,0x00402c76)

void FUN_00402b00(void)

{
  if (DAT_0041002c == 0) {
    DAT_0041002c = 1;
  }
  return;
}



void FUN_00402d30(void)

{
  int iVar1;
  int iVar2;
  
  if (DAT_00410030 == 0) {
    DAT_00410030 = 1;
    iVar1 = 0;
    do {
      iVar2 = iVar1;
      iVar1 = iVar2 + 1;
    } while ((&DAT_004031c0)[iVar2 + 1] != 0);
    for (; iVar2 != 0; iVar2 = iVar2 + -1) {
      (*(code *)(&DAT_004031c0)[iVar2])();
    }
    FUN_00401000();
    return;
  }
  return;
}



void FUN_00402d50(undefined param_1)

{
  char cVar1;
  char *pcVar2;
  char *pcVar3;
  _STARTUPINFOA local_64;
  undefined1 *local_14;
  
  local_14 = &param_1;
  FUN_00402d30();
  pcVar2 = GetCommandLineA();
  GetStartupInfoA(&local_64);
  if (pcVar2 != (LPSTR)0x0) {
    for (; (cVar1 = *pcVar2, cVar1 == '\t' || (cVar1 == ' ')); pcVar2 = pcVar2 + 1) {
    }
    if (cVar1 == '\"') {
      do {
        pcVar3 = pcVar2;
        pcVar2 = pcVar3 + 1;
        cVar1 = *pcVar2;
        if (cVar1 == '\0') break;
      } while (cVar1 != '\"');
      if (cVar1 == '\"') {
        pcVar2 = pcVar3 + 2;
        cVar1 = *pcVar2;
      }
    }
    else {
      while (cVar1 != '\t') {
        if (cVar1 == ' ') goto LAB_00402dc8;
        if (cVar1 == '\0') goto LAB_00402de5;
        pcVar2 = pcVar2 + 1;
        cVar1 = *pcVar2;
      }
    }
    if ((cVar1 == ' ') || (cVar1 == '\t')) {
LAB_00402dc8:
      do {
        do {
          pcVar2 = pcVar2 + 1;
        } while (*pcVar2 == '\t');
      } while (*pcVar2 == ' ');
    }
  }
LAB_00402de5:
  GetModuleHandleA((LPCSTR)0x0);
  FUN_004015b1();
  return;
}



void FUN_00402e50(void)

{
  return;
}



void FUN_00402e60(void)

{
  DWORD *pDVar1;
  LPVOID pvVar2;
  DWORD DVar3;
  
  if (DAT_00410038 != 0) {
    EnterCriticalSection((LPCRITICAL_SECTION)&DAT_0041003c);
    for (pDVar1 = DAT_00410054; pDVar1 != (DWORD *)0x0; pDVar1 = (DWORD *)pDVar1[2]) {
      pvVar2 = TlsGetValue(*pDVar1);
      DVar3 = GetLastError();
      if ((DVar3 == 0) && (pvVar2 != (LPVOID)0x0)) {
        (*(code *)pDVar1[1])(pvVar2);
      }
    }
    LeaveCriticalSection((LPCRITICAL_SECTION)&DAT_0041003c);
    return;
  }
  return;
}



undefined4 __cdecl FUN_00402ee0(undefined4 param_1,int param_2)

{
  if (param_2 != 1) {
    if (param_2 == 0) {
      FUN_00402e60();
      if (DAT_00410038 == 1) {
        DAT_00410038 = 0;
        DeleteCriticalSection((LPCRITICAL_SECTION)&DAT_0041003c);
      }
    }
    else if (param_2 == 3) {
      FUN_00402e60();
    }
    return 1;
  }
  if (DAT_00410038 == 0) {
    InitializeCriticalSection((LPCRITICAL_SECTION)&DAT_0041003c);
  }
  DAT_00410038 = 1;
  return 1;
}



// WARNING: Exceeded maximum restarts with more pending

int __cdecl
__getmainargs(int *_Argc,char ***_Argv,char ***_Env,int _DoWildCard,_startupinfo *_StartInfo)

{
  int iVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403070. Too many branches
                    // WARNING: Treating indirect jump as call
  iVar1 = __getmainargs();
  return iVar1;
}



void __p__fmode(void)

{
                    // WARNING: Could not recover jumptable at 0x00403078. Too many branches
                    // WARNING: Treating indirect jump as call
  __p__fmode();
  return;
}



void __p__environ(void)

{
                    // WARNING: Could not recover jumptable at 0x00403080. Too many branches
                    // WARNING: Treating indirect jump as call
  __p__environ();
  return;
}



// WARNING: Exceeded maximum restarts with more pending

void __cdecl _cexit(void)

{
                    // WARNING: Could not recover jumptable at 0x00403088. Too many branches
                    // WARNING: Treating indirect jump as call
  _cexit();
  return;
}



// WARNING: Exceeded maximum restarts with more pending

int __cdecl _setmode(int _FileHandle,int _Mode)

{
  int iVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403090. Too many branches
                    // WARNING: Treating indirect jump as call
  iVar1 = _setmode();
  return iVar1;
}



// WARNING: Unknown calling convention yet parameter storage is locked

void signal(int param_1)

{
                    // WARNING: Could not recover jumptable at 0x00403098. Too many branches
                    // WARNING: Treating indirect jump as call
  signal(param_1);
  return;
}



// WARNING: Exceeded maximum restarts with more pending

void * __cdecl malloc(size_t _Size)

{
  void *pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x004030a0. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = (void *)malloc();
  return pvVar1;
}



// WARNING: Exceeded maximum restarts with more pending

void * __cdecl memset(void *_Dst,int _Val,size_t _Size)

{
  void *pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x004030a8. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = (void *)memset();
  return pvVar1;
}



// WARNING: Exceeded maximum restarts with more pending

void * __cdecl memmove(void *_Dst,void *_Src,size_t _Size)

{
  void *pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x004030b0. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = (void *)memmove();
  return pvVar1;
}



// WARNING: Exceeded maximum restarts with more pending

void * __cdecl memcpy(void *_Dst,void *_Src,size_t _Size)

{
  void *pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x004030b8. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = (void *)memcpy();
  return pvVar1;
}



// WARNING: Exceeded maximum restarts with more pending

int __cdecl strcmp(char *_Str1,char *_Str2)

{
  int iVar1;
  
                    // WARNING: Could not recover jumptable at 0x004030c0. Too many branches
                    // WARNING: Treating indirect jump as call
  iVar1 = strcmp();
  return iVar1;
}



// WARNING: Exceeded maximum restarts with more pending

size_t __cdecl fwrite(void *_Str,size_t _Size,size_t _Count,FILE *_File)

{
  size_t sVar1;
  
                    // WARNING: Could not recover jumptable at 0x004030c8. Too many branches
                    // WARNING: Treating indirect jump as call
  sVar1 = fwrite();
  return sVar1;
}



// WARNING: Exceeded maximum restarts with more pending

int __cdecl vfprintf(FILE *_File,char *_Format,va_list _ArgList)

{
  int iVar1;
  
                    // WARNING: Could not recover jumptable at 0x004030d0. Too many branches
                    // WARNING: Treating indirect jump as call
  iVar1 = vfprintf();
  return iVar1;
}



// WARNING: Exceeded maximum restarts with more pending

void __cdecl abort(void)

{
                    // WARNING: Could not recover jumptable at 0x004030d8. Too many branches
                    // WARNING: Treating indirect jump as call
  abort();
  return;
}



LPTOP_LEVEL_EXCEPTION_FILTER
SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)

{
  LPTOP_LEVEL_EXCEPTION_FILTER pPVar1;
  
                    // WARNING: Could not recover jumptable at 0x004030f0. Too many branches
                    // WARNING: Treating indirect jump as call
  pPVar1 = SetUnhandledExceptionFilter(lpTopLevelExceptionFilter);
  return pPVar1;
}



// WARNING: Exceeded maximum restarts with more pending

void ExitProcess(UINT uExitCode)

{
                    // WARNING: Could not recover jumptable at 0x004030f8. Too many branches
                    // WARNING: Treating indirect jump as call
  ExitProcess();
  return;
}



HMODULE GetModuleHandleA(LPCSTR lpModuleName)

{
  HMODULE pHVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403100. Too many branches
                    // WARNING: Treating indirect jump as call
  pHVar1 = GetModuleHandleA(lpModuleName);
  return pHVar1;
}



FARPROC GetProcAddress(HMODULE hModule,LPCSTR lpProcName)

{
  FARPROC pFVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403108. Too many branches
                    // WARNING: Treating indirect jump as call
  pFVar1 = GetProcAddress(hModule,lpProcName);
  return pFVar1;
}



BOOL VirtualProtect(LPVOID lpAddress,SIZE_T dwSize,DWORD flNewProtect,PDWORD lpflOldProtect)

{
  BOOL BVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403110. Too many branches
                    // WARNING: Treating indirect jump as call
  BVar1 = VirtualProtect(lpAddress,dwSize,flNewProtect,lpflOldProtect);
  return BVar1;
}



HMODULE LoadLibraryA(LPCSTR lpLibFileName)

{
  HMODULE pHVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403118. Too many branches
                    // WARNING: Treating indirect jump as call
  pHVar1 = LoadLibraryA(lpLibFileName);
  return pHVar1;
}



BOOL IsBadReadPtr(void *lp,UINT_PTR ucb)

{
  BOOL BVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403120. Too many branches
                    // WARNING: Treating indirect jump as call
  BVar1 = IsBadReadPtr(lp,ucb);
  return BVar1;
}



LPVOID HeapAlloc(HANDLE hHeap,DWORD dwFlags,SIZE_T dwBytes)

{
  LPVOID pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403128. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = HeapAlloc(hHeap,dwFlags,dwBytes);
  return pvVar1;
}



LPVOID VirtualAlloc(LPVOID lpAddress,SIZE_T dwSize,DWORD flAllocationType,DWORD flProtect)

{
  LPVOID pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403130. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = VirtualAlloc(lpAddress,dwSize,flAllocationType,flProtect);
  return pvVar1;
}



BOOL FreeLibrary(HMODULE hLibModule)

{
  BOOL BVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403138. Too many branches
                    // WARNING: Treating indirect jump as call
  BVar1 = FreeLibrary(hLibModule);
  return BVar1;
}



BOOL VirtualFree(LPVOID lpAddress,SIZE_T dwSize,DWORD dwFreeType)

{
  BOOL BVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403140. Too many branches
                    // WARNING: Treating indirect jump as call
  BVar1 = VirtualFree(lpAddress,dwSize,dwFreeType);
  return BVar1;
}



HANDLE GetProcessHeap(void)

{
  HANDLE pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403148. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = GetProcessHeap();
  return pvVar1;
}



BOOL HeapFree(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem)

{
  BOOL BVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403150. Too many branches
                    // WARNING: Treating indirect jump as call
  BVar1 = HeapFree(hHeap,dwFlags,lpMem);
  return BVar1;
}



SIZE_T VirtualQuery(LPCVOID lpAddress,PMEMORY_BASIC_INFORMATION lpBuffer,SIZE_T dwLength)

{
  SIZE_T SVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403158. Too many branches
                    // WARNING: Treating indirect jump as call
  SVar1 = VirtualQuery(lpAddress,lpBuffer,dwLength);
  return SVar1;
}



LPSTR GetCommandLineA(void)

{
  LPSTR pCVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403160. Too many branches
                    // WARNING: Treating indirect jump as call
  pCVar1 = GetCommandLineA();
  return pCVar1;
}



void GetStartupInfoA(LPSTARTUPINFOA lpStartupInfo)

{
                    // WARNING: Could not recover jumptable at 0x00403168. Too many branches
                    // WARNING: Treating indirect jump as call
  GetStartupInfoA(lpStartupInfo);
  return;
}



LPVOID TlsGetValue(DWORD dwTlsIndex)

{
  LPVOID pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403170. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = TlsGetValue(dwTlsIndex);
  return pvVar1;
}



DWORD GetLastError(void)

{
  DWORD DVar1;
  
                    // WARNING: Could not recover jumptable at 0x00403178. Too many branches
                    // WARNING: Treating indirect jump as call
  DVar1 = GetLastError();
  return DVar1;
}



void DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)

{
                    // WARNING: Could not recover jumptable at 0x00403180. Too many branches
                    // WARNING: Treating indirect jump as call
  DeleteCriticalSection(lpCriticalSection);
  return;
}



void InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)

{
                    // WARNING: Could not recover jumptable at 0x00403188. Too many branches
                    // WARNING: Treating indirect jump as call
  InitializeCriticalSection(lpCriticalSection);
  return;
}



void EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)

{
                    // WARNING: Could not recover jumptable at 0x00403190. Too many branches
                    // WARNING: Treating indirect jump as call
  EnterCriticalSection(lpCriticalSection);
  return;
}



void LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)

{
                    // WARNING: Could not recover jumptable at 0x00403198. Too many branches
                    // WARNING: Treating indirect jump as call
  LeaveCriticalSection(lpCriticalSection);
  return;
}


