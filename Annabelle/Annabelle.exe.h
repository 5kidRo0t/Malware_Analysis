typedef unsigned char   undefined;

typedef unsigned long long    GUID;
typedef unsigned int    ImageBaseOffset32;
typedef unsigned char    byte;
typedef unsigned int    dword;
typedef unsigned long long    qword;
typedef unsigned short    word;
typedef struct IMAGE_DOS_HEADER IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

struct IMAGE_DOS_HEADER {
    char e_magic[2]; /* Magic number */
    word e_cblp; /* Bytes of last page */
    word e_cp; /* Pages in file */
    word e_crlc; /* Relocations */
    word e_cparhdr; /* Size of header in paragraphs */
    word e_minalloc; /* Minimum extra paragraphs needed */
    word e_maxalloc; /* Maximum extra paragraphs needed */
    word e_ss; /* Initial (relative) SS value */
    word e_sp; /* Initial SP value */
    word e_csum; /* Checksum */
    word e_ip; /* Initial IP value */
    word e_cs; /* Initial (relative) CS value */
    word e_lfarlc; /* File address of relocation table */
    word e_ovno; /* Overlay number */
    word e_res[4][4]; /* Reserved words */
    word e_oemid; /* OEM identifier (for e_oeminfo) */
    word e_oeminfo; /* OEM information; e_oemid specific */
    word e_res2[10][10]; /* Reserved words */
    dword e_lfanew; /* File address of new exe header */
    byte e_program[64]; /* Actual DOS program */
};

typedef enum AssemblyFlags {
    PublicKey=1,
    Retargetable=256,
    DisableJITcompileOptimizer=16384,
    EnableJITcompileTracking=32768
} AssemblyFlags;

typedef enum AssemblyHash {
    None=0,
    Reserved (MD5)=32771,
    SHA1=32772
} AssemblyHash;

typedef enum COR20_Flags {
    COMIMAGE_FLAGS_ILONLY=1,
    COMIMAGE_FLAGS_32BITREQUIRED=2,
    COMIMAGE_FLAGS_IL_LIBRARY=4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED=8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT=16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA=65536
} COR20_Flags;

typedef enum FieldAttributes {
    Access_CompilerControlled=0,
    Access_Private=1,
    Access_FamANDAssem=2,
    Access_Assembly=3,
    Access_Family=4,
    Access_FamORAssem=5,
    Access_Public=6,
    Static=16,
    InitOnly=32,
    Literal=64,
    NotSerialized=128,
    HasFieldRVA=256,
    SpecialName=512,
    RTSpecialName=1024,
    HasFieldMarshal=4096,
    PInvokeImpl=8192,
    HasDefault=32768
} FieldAttributes;

typedef enum GenericParamAttributes {
    Variance_None=0,
    Covariant=1,
    Contravariant=2,
    ReferenceTypeConstraint=4,
    NotNullableValueTypeConstraint=8,
    DefaultConstructorContstraint=16
} GenericParamAttributes;

typedef enum ManifestResourceAttributes {
    Public=1,
    Private=2
} ManifestResourceAttributes;

typedef enum MethodAttributes {
    MAccess_CompilerControlled=0,
    MAccess_Private=1,
    MAccess_FamANDAssem=2,
    MAccess_Assem=3,
    MAccess_Family=4,
    MAccess_FamORAssem=5,
    MAccess_Public=6,
    UnmanagedExport=8,
    Static=16,
    Final=32,
    Virtual=64,
    HideBySig=128,
    VtableLayout_NewSlot=256,
    Strict=512,
    Abstract=1024,
    SpecialName=2048,
    RTSpecialName=4096,
    PInvokeImpl=8192,
    HasSecurity=16384,
    RequireSecObject=32768
} MethodAttributes;

typedef enum MethodImplAttributes {
    CodeType_IL=0,
    CodeType_Native=1,
    CodeType_OPTIL=2,
    CodeType_Runtime=3,
    Unmanaged=4,
    NoInlining=8,
    ForwardRef=16,
    Synchronized=32,
    NoOptimization=64,
    PreserveSig=128,
    InternalCall=4096,
    MaxMethodImplVal=65535
} MethodImplAttributes;

typedef enum MethodSemanticsAttributes {
    Setter=1,
    Getter=2,
    Other=4,
    AddOn=8,
    RemoveOn=16,
    Fire=32
} MethodSemanticsAttributes;

typedef enum ParamAttributes {
    In=1,
    Out=2,
    Optional=16,
    HasDefault=4096,
    HasFieldMarshal=8192,
    Unused=53216
} ParamAttributes;

typedef enum PInvokeAttributes {
    CharSetNotSpec=0,
    NoMangle=1,
    CharSetAnsi=2,
    CharSetUnicode=4,
    CharSetAuto=6,
    SupportsLastError=64,
    CallConvPlatformapi=256,
    CallConvCdecl=512,
    CallConvStdcall=768,
    CallConvThiscall=1024,
    CallConvFastcall=1280
} PInvokeAttributes;

typedef enum PropertyAttributes {
    SpecialName=512,
    RTSpecialName=1024,
    HasDefault=4096,
    Unused=59903
} PropertyAttributes;

typedef enum TypeAttributes {
    Visibility_NotPublic=0,
    Visibility_Public=1,
    Visibility_NestedPublic=2,
    Visibility_NestedPrivate=3,
    Visibility_NestedFamily=4,
    Visibility_NestedAssembly=5,
    Visibility_NestedFamANDAssem=6,
    Visibility_NestedFamORAssem=7,
    SequentialLayout=8,
    ExplicitLayout=16,
    Interface=32,
    Abstract=128,
    Sealed=256,
    SpecialName=1024,
    RTSpecialName=2048,
    Import=4096,
    Serializable=8192,
    UnicodeClass=65536,
    AutoClass=131072,
    CustomFormatClass=196608,
    HasSecurity=262144,
    BeforeFieldInit=1048576,
    IsTypeForwarder=2097152,
    CustomStringFormatMask=12582912
} TypeAttributes;

typedef struct Assembly Table Assembly Table, *PAssembly Table;

struct Assembly Table {
    enum AssemblyHash HashAlg; /* Type of hash present */
    word MajorVersion;
    word MinorVersion;
    word BuildNumber;
    word RevisionNumber;
    enum AssemblyFlags Flags; /* Bitmask of type AssemblyFlags */
    word PublicKey; /* index into Blob heap */
    dword Name; /* index into String heap */
    dword Culture; /* index into String heap */
};

typedef struct AssemblyRef Row AssemblyRef Row, *PAssemblyRef Row;

struct AssemblyRef Row {
    word MajorVersion;
    word MinorVersion;
    word BuildNumber;
    word RevisionNumber;
    enum AssemblyFlags Flags; /* Bitmask of type AssemblyFlags */
    word PublicKeyOrToken; /* Public Key or token identifying the author of the assembly. */
    dword Name; /* index into String heap */
    dword Culture; /* index into String heap */
    word HashValue; /* index into Blob heap */
};

typedef struct ClassLayout Row ClassLayout Row, *PClassLayout Row;

struct ClassLayout Row {
    word PackingSize;
    dword ClassSize;
    word Parent;
};

typedef struct Constant Row Constant Row, *PConstant Row;

typedef enum TypeCode {
    ELEMENT_TYPE_END=0,
    ELEMENT_TYPE_VOID=1,
    ELEMENT_TYPE_BOOLEAN=2,
    ELEMENT_TYPE_CHAR=3,
    ELEMENT_TYPE_I1=4,
    ELEMENT_TYPE_U1=5,
    ELEMENT_TYPE_I2=6,
    ELEMENT_TYPE_U2=7,
    ELEMENT_TYPE_I4=8,
    ELEMENT_TYPE_U4=9,
    ELEMENT_TYPE_I8=10,
    ELEMENT_TYPE_U8=11,
    ELEMENT_TYPE_R4=12,
    ELEMENT_TYPE_R8=13,
    ELEMENT_TYPE_STRING=14,
    ELEMENT_TYPE_PTR=15,
    ELEMENT_TYPE_BYREF=16,
    ELEMENT_TYPE_VALUETYPE=17,
    ELEMENT_TYPE_CLASS=18,
    ELEMENT_TYPE_VAR=19,
    ELEMENT_TYPE_ARRAY=20,
    ELEMENT_TYPE_GENERICINST=21,
    ELEMENT_TYPE_TYPEDBYREF=22,
    ELEMENT_TYPE_I=24,
    ELEMENT_TYPE_U=25,
    ELEMENT_TYPE_FNPTR=27,
    ELEMENT_TYPE_OBJECT=28,
    ELEMENT_TYPE_SZARRAY=29,
    ELEMENT_TYPE_MVAR=30,
    ELEMENT_TYPE_CMOD_REQD=31,
    ELEMENT_TYPE_CMOD_OPT=32,
    ELEMENT_TYPE_INTERNAL=33,
    ELEMENT_TYPE_MAX=34,
    ELEMENT_TYPE_MODIFIER=64,
    ELEMENT_TYPE_SENTINEL=65,
    ELEMENT_TYPE_PINNED=69
} TypeCode;

struct Constant Row {
    enum TypeCode Type; /* if Class, indicates nullref */
    byte Reserved; /* should be 0 */
    word Parent; /* index - coded HasConstant */
    word Value; /* index into Blob heap */
};

typedef struct CustomAttribute Row CustomAttribute Row, *PCustomAttribute Row;

struct CustomAttribute Row {
    word Parent;
    word Type;
    word Value;
};

typedef struct DeclSecurity Row DeclSecurity Row, *PDeclSecurity Row;

struct DeclSecurity Row {
    word Action; /* Points to a System.Security.SecurityAction as described in ISO23271 IV */
    word Parent;
    word PermissionSet;
};

typedef struct Field Row Field Row, *PField Row;

struct Field Row {
    enum FieldAttributes Flags; /* see CorFieldAttr */
    dword Name; /* index into String heap */
    word Signature; /* index into Blob heap */
};

typedef struct FieldRVA Row FieldRVA Row, *PFieldRVA Row;

struct FieldRVA Row {
    dword RVA;
    word Field; /* index into Field table */
};

typedef struct GenericParam Row GenericParam Row, *PGenericParam Row;

struct GenericParam Row {
    word Number; /* index of the generic param, numbered left-to-right, from 0 */
    enum GenericParamAttributes Flags; /* Bitmask of type GenericParamAttributes */
    word Owner; /* TypeOrMethodDef coded index */
    dword Name; /* index into String heap, for description only */
};

typedef struct GenericParamConstraint Row GenericParamConstraint Row, *PGenericParamConstraint Row;

struct GenericParamConstraint Row {
    word Owner; /* index into GenericParam table */
    word Constraint; /* class/interface this param is constrained to derive/implement */
};

typedef struct ImplMap Row ImplMap Row, *PImplMap Row;

struct ImplMap Row {
    enum PInvokeAttributes MappingFlags; /* Bitmask of type PInvokeAttributes */
    word MemberForwarded; /* MemberForwarded Coded Index */
    dword ImportName; /* index into String heap */
    word ImportScope; /* Index into ModuleRef table */
};

typedef struct ManifestResource Row ManifestResource Row, *PManifestResource Row;

struct ManifestResource Row {
    dword Offset;
    enum ManifestResourceAttributes Flags; /* Bitmask of type ManifestResourceAttributes */
    dword Name; /* index into String heap */
    word Implementation; /* Implementation coded index */
};

typedef struct MemberRef Row MemberRef Row, *PMemberRef Row;

struct MemberRef Row {
    word Class; /* index-MemberRefParent coded */
    dword Name; /* index into String heap */
    word Signature; /* index into Blob heap */
};

typedef struct MethodDef Row MethodDef Row, *PMethodDef Row;

struct MethodDef Row {
    dword RVA;
    enum MethodImplAttributes ImplFlags; /* Bitmask of type MethodImplAttributes */
    enum MethodAttributes Flags; /* Bitmask of type MethodAttribute */
    dword Name; /* index into String heap */
    word Signature; /* index into Blob heap */
    word ParamList; /* index into Param table */
};

typedef struct MethodImpl Row MethodImpl Row, *PMethodImpl Row;

struct MethodImpl Row {
    word Class; /* index into TypeDef */
    word MethodBody; /* MethodDefOrRef coded index */
    word MethodDeclaration; /* MethodDefOrRef coded index */
};

typedef struct MethodSemantics Row MethodSemantics Row, *PMethodSemantics Row;

struct MethodSemantics Row {
    enum MethodSemanticsAttributes Semantics; /* Bitmask of type MethodSemanticsAttributes */
    word Method; /* index into MethodDef table */
    word Association; /* HasSemantics coded index into Event or Property */
};

typedef struct MethodSpec Row MethodSpec Row, *PMethodSpec Row;

struct MethodSpec Row {
    word Method; /* MethodDefOrRef coded index */
    word Instantiation; /* index into Blob heap, signature of this instantiation */
};

typedef struct Module Row Module Row, *PModule Row;

struct Module Row {
    word Generation; /* reserved, shall be 0 */
    dword Name; /* index into String heap */
    word MvId; /* used to distinguish between versions of same module */
    word EncId; /* reserved, shall be 0 */
    word EncBaseId; /* reserved, shall be 0 */
};

typedef struct ModuleRef Row ModuleRef Row, *PModuleRef Row;

struct ModuleRef Row {
    dword Name; /* index into String heap */
};

typedef struct NestedClass Row NestedClass Row, *PNestedClass Row;

struct NestedClass Row {
    word NestedClass; /* TypeDef index */
    word EnclosingClass; /* TypeDef index */
};

typedef struct ParamRow ParamRow, *PParamRow;

struct ParamRow {
    enum ParamAttributes Flags; /* bitmask of type ParamAttributes */
    word Sequence; /* constant */
    dword Name; /* index into String heap */
};

typedef struct Property Row Property Row, *PProperty Row;

struct Property Row {
    enum PropertyAttributes Flags; /* Bitmask of type PropertyAttributes */
    dword Name;
    word Type; /* Blob index to the signature, not a TypeDef/TypeRef */
};

typedef struct PropertyMap Row PropertyMap Row, *PPropertyMap Row;

struct PropertyMap Row {
    word Parent;
    word options; /* Index into Property table. Points to contiguous run of Properties until next ref from PropertyMap or end of table. */
};

typedef struct StandAloneSig Row StandAloneSig Row, *PStandAloneSig Row;

struct StandAloneSig Row {
    word Signature;
};

typedef struct TypeDef Row TypeDef Row, *PTypeDef Row;

struct TypeDef Row {
    enum TypeAttributes Flags; /* see CorTypeAttr */
    dword TypeName; /* index into String heap */
    dword TypeNamespace; /* index into String heap */
    word Extends; /* index: coded TypeDefOrRef */
    word FieldList; /* index into Field table */
    word MethodList; /* index into MethodDef table */
};

typedef struct TypeRef Row TypeRef Row, *PTypeRef Row;

struct TypeRef Row {
    word ResolutionScope;
    dword TypeName;
    dword TypeNamespace;
};

typedef struct TypeSpec Row TypeSpec Row, *PTypeSpec Row;

struct TypeSpec Row {
    word Signature; /* index into Blob heap */
};

typedef struct CLI_Stream_Header_#Blob CLI_Stream_Header_#Blob, *PCLI_Stream_Header_#Blob;

struct CLI_Stream_Header_#Blob {
    dword offset;
    dword size;
    char name[8];
};

typedef struct CLI_Stream_Header_#GUID CLI_Stream_Header_#GUID, *PCLI_Stream_Header_#GUID;

struct CLI_Stream_Header_#GUID {
    dword offset;
    dword size;
    char name[8];
};

typedef struct CLI_Stream_Header_#Schema CLI_Stream_Header_#Schema, *PCLI_Stream_Header_#Schema;

struct CLI_Stream_Header_#Schema {
    dword offset;
    dword size;
    char name[8];
};

typedef struct CLI_Stream_Header_#Strings CLI_Stream_Header_#Strings, *PCLI_Stream_Header_#Strings;

struct CLI_Stream_Header_#Strings {
    dword offset;
    dword size;
    char name[12];
};

typedef struct CLI_Stream_Header_#US CLI_Stream_Header_#US, *PCLI_Stream_Header_#US;

struct CLI_Stream_Header_#US {
    dword offset;
    dword size;
    char name[4];
};

typedef struct CLI_Stream_Header_#~ CLI_Stream_Header_#~, *PCLI_Stream_Header_#~;

struct CLI_Stream_Header_#~ {
    dword offset;
    dword size;
    char name[4];
};

typedef struct #Blob #Blob, *P#Blob;

struct #Blob {
    byte Reserved; /* Always 0 */
};

typedef struct #GUID #GUID, *P#GUID;

struct #GUID {
    GUID [0];
};

typedef struct #Strings #Strings, *P#Strings;

struct #Strings {
    char [0][1];
    char [1][1];
    char [2][1];
    char [3][1];
};

typedef struct #US #US, *P#US;

struct #US {
    byte Reserved; /* Always 0 */
    byte Next string size;
    byte Extra byte; /* 0x01 if string contains non-ASCII */
};

typedef struct #~ #~, *P#~;

struct #~ {
    dword Reserved; /* Always 0 */
    byte MajorVersion;
    byte MinorVersion;
    byte HeapSizes; /* Bit vector for heap sizes */
    byte Reserved; /* Always 1 */
    qword Valid; /* Bit vector of present tables */
    qword Sorted; /* Bit vector of sorted tables */
    dword Rows[29]; /* # of rows for each corresponding present table */
    struct Module Row Module; /* CLI Metadata Table: Module */
    struct TypeRef Row TypeRef[181]; /* CLI Metadata Table: TypeRef */
    struct TypeDef Row TypeDef[27]; /* CLI Metadata Table: TypeDef */
    struct Field Row Field[113]; /* CLI Metadata Table: Field */
    struct MethodDef Row MethodDef[646]; /* CLI Metadata Table: MethodDef */
    struct ParamRow Param[118]; /* CLI Metadata Table: Param */
    struct MemberRef Row MemberRef[348]; /* CLI Metadata Table: MemberRef */
    struct Constant Row Constant[5]; /* CLI Metadata Table: Constant */
    struct CustomAttribute Row CustomAttribute[277]; /* CLI Metadata Table: CustomAttribute */
    struct DeclSecurity Row DeclSecurity[1]; /* CLI Metadata Table: DeclSecurity */
    struct ClassLayout Row ClassLayout[2]; /* CLI Metadata Table: ClassLayout */
    struct StandAloneSig Row StandAloneSig[57]; /* CLI Metadata Table: StandAloneSig */
    struct PropertyMap Row PropertyMap[10]; /* CLI Metadata Table: PropertyMap */
    struct Property Row Property[53]; /* CLI Metadata Table: Property */
    struct MethodSemantics Row MethodSemantics[91]; /* CLI Metadata Table: MethodSemantics */
    struct MethodImpl Row MethodImpl[13]; /* CLI Metadata Table: MethodImpl */
    struct ModuleRef Row ModuleRef[1]; /* CLI Metadata Table: ModuleRef */
    struct TypeSpec Row TypeSpec[11]; /* CLI Metadata Table: TypeSpec */
    struct ImplMap Row ImplMap[2]; /* CLI Metadata Table: ImplMap */
    struct FieldRVA Row FieldRVA[2]; /* CLI Metadata Table: FieldRVA */
    struct Assembly Table Assembly; /* CLI Metadata Table: Assembly */
    struct AssemblyRef Row AssemblyRef[12]; /* CLI Metadata Table: AssemblyRef */
    struct ManifestResource Row ManifestResource[2]; /* CLI Metadata Table: ManifestResource */
    struct NestedClass Row NestedClass[6]; /* CLI Metadata Table: NestedClass */
    struct GenericParam Row GenericParam[5]; /* CLI Metadata Table: GenericParam */
    struct MethodSpec Row MethodSpec[15]; /* CLI Metadata Table: MethodSpec */
    struct GenericParamConstraint Row GenericParamConstraint[10]; /* CLI Metadata Table: GenericParamConstraint */
};

typedef struct CLI_METADATA_DIRECTORY CLI_METADATA_DIRECTORY, *PCLI_METADATA_DIRECTORY;

struct CLI_METADATA_DIRECTORY {
    dword VirtualAddress;
    dword Size;
};

typedef struct CLI_METADATA_HEADER CLI_METADATA_HEADER, *PCLI_METADATA_HEADER;

struct CLI_METADATA_HEADER {
    dword Signature; /* must be 0x424a5342 */
    word MajorVersion;
    word MinorVersion;
    dword Reserved; /* should be 0 */
    dword VersionLength;
    char Version[16];
    word Flags; /* should be 0 */
    word StreamsCount; /* number of stream headers to follow */
    struct CLI_Stream_Header_#~ #~;
    struct CLI_Stream_Header_#Strings #Strings;
    struct CLI_Stream_Header_#US #US;
    struct CLI_Stream_Header_#GUID #GUID;
    struct CLI_Stream_Header_#Blob #Blob;
    struct CLI_Stream_Header_#Schema #Schema;
};

typedef struct IMAGE_COR20_HEADER IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

typedef struct IMAGE_DATA_DIRECTORY.conflict IMAGE_DATA_DIRECTORY.conflict, *PIMAGE_DATA_DIRECTORY.conflict;

struct IMAGE_DATA_DIRECTORY.conflict {
    dword VirtualAddress;
    dword Size;
};

struct IMAGE_COR20_HEADER {
    dword cb; /* Size of the structure */
    word MajorRuntimeVersion; /* Version of CLR Runtime */
    word MinorRuntimeVersion;
    struct CLI_METADATA_DIRECTORY MetaData; /* RVA and size of MetaData */
    enum COR20_Flags Flags;
    dword EntryPointToken; /* This is a metadata token if not a valid RVA */
    struct IMAGE_DATA_DIRECTORY.conflict Resources;
    struct IMAGE_DATA_DIRECTORY.conflict StrongNameSignature;
    struct IMAGE_DATA_DIRECTORY.conflict CodeManagerTable; /* Should be 0 */
    struct IMAGE_DATA_DIRECTORY.conflict VTableFixups;
    struct IMAGE_DATA_DIRECTORY.conflict ExportAddressTableJumps; /* Should be 0 */
    struct IMAGE_DATA_DIRECTORY.conflict ManagedNativeHeader; /* 0 unless this is a native image */
};

typedef struct IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

struct IMAGE_DATA_DIRECTORY {
    ImageBaseOffset32 VirtualAddress;
    dword Size;
};

typedef struct IMAGE_FILE_HEADER IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

struct IMAGE_FILE_HEADER {
    word Machine; /* 34404 */
    word NumberOfSections;
    dword TimeDateStamp;
    dword PointerToSymbolTable;
    dword NumberOfSymbols;
    word SizeOfOptionalHeader;
    word Characteristics;
};

typedef struct IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;

struct IMAGE_OPTIONAL_HEADER64 {
    word Magic;
    byte MajorLinkerVersion;
    byte MinorLinkerVersion;
    dword SizeOfCode;
    dword SizeOfInitializedData;
    dword SizeOfUninitializedData;
    ImageBaseOffset32 AddressOfEntryPoint;
    ImageBaseOffset32 BaseOfCode;
    pointer64 ImageBase;
    dword SectionAlignment;
    dword FileAlignment;
    word MajorOperatingSystemVersion;
    word MinorOperatingSystemVersion;
    word MajorImageVersion;
    word MinorImageVersion;
    word MajorSubsystemVersion;
    word MinorSubsystemVersion;
    dword Win32VersionValue;
    dword SizeOfImage;
    dword SizeOfHeaders;
    dword CheckSum;
    word Subsystem;
    word DllCharacteristics;
    qword SizeOfStackReserve;
    qword SizeOfStackCommit;
    qword SizeOfHeapReserve;
    qword SizeOfHeapCommit;
    dword LoaderFlags;
    dword NumberOfRvaAndSizes;
    struct IMAGE_DATA_DIRECTORY DataDirectory[16];
};

struct IMAGE_NT_HEADERS64 {
    char Signature[4];
    struct IMAGE_FILE_HEADER FileHeader;
    struct IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

typedef struct IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;

struct IMAGE_RESOURCE_DATA_ENTRY {
    dword OffsetToData;
    dword Size;
    dword CodePage;
    dword Reserved;
};

typedef struct IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;

struct IMAGE_RESOURCE_DIRECTORY {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    word NumberOfNamedEntries;
    word NumberOfIdEntries;
};

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion;

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion;

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct {
    dword NameOffset;
    dword NameIsString;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion {
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;
    dword Name;
    word Id;
};

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct {
    dword OffsetToDirectory;
    dword DataIsDirectory;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion {
    dword OffsetToData;
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion NameUnion;
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion DirectoryUnion;
};

typedef struct IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

typedef union Misc Misc, *PMisc;

typedef enum SectionFlags {
    IMAGE_SCN_TYPE_NO_PAD=8,
    IMAGE_SCN_RESERVED_0001=16,
    IMAGE_SCN_CNT_CODE=32,
    IMAGE_SCN_CNT_INITIALIZED_DATA=64,
    IMAGE_SCN_CNT_UNINITIALIZED_DATA=128,
    IMAGE_SCN_LNK_OTHER=256,
    IMAGE_SCN_LNK_INFO=512,
    IMAGE_SCN_RESERVED_0040=1024,
    IMAGE_SCN_LNK_REMOVE=2048,
    IMAGE_SCN_LNK_COMDAT=4096,
    IMAGE_SCN_GPREL=32768,
    IMAGE_SCN_MEM_16BIT=131072,
    IMAGE_SCN_MEM_PURGEABLE=131072,
    IMAGE_SCN_MEM_LOCKED=262144,
    IMAGE_SCN_MEM_PRELOAD=524288,
    IMAGE_SCN_ALIGN_1BYTES=1048576,
    IMAGE_SCN_ALIGN_2BYTES=2097152,
    IMAGE_SCN_ALIGN_4BYTES=3145728,
    IMAGE_SCN_ALIGN_8BYTES=4194304,
    IMAGE_SCN_ALIGN_16BYTES=5242880,
    IMAGE_SCN_ALIGN_32BYTES=6291456,
    IMAGE_SCN_ALIGN_64BYTES=7340032,
    IMAGE_SCN_ALIGN_128BYTES=8388608,
    IMAGE_SCN_ALIGN_256BYTES=9437184,
    IMAGE_SCN_ALIGN_512BYTES=10485760,
    IMAGE_SCN_ALIGN_1024BYTES=11534336,
    IMAGE_SCN_ALIGN_2048BYTES=12582912,
    IMAGE_SCN_ALIGN_4096BYTES=13631488,
    IMAGE_SCN_ALIGN_8192BYTES=14680064,
    IMAGE_SCN_LNK_NRELOC_OVFL=16777216,
    IMAGE_SCN_MEM_DISCARDABLE=33554432,
    IMAGE_SCN_MEM_NOT_CACHED=67108864,
    IMAGE_SCN_MEM_NOT_PAGED=134217728,
    IMAGE_SCN_MEM_SHARED=268435456,
    IMAGE_SCN_MEM_EXECUTE=536870912,
    IMAGE_SCN_MEM_READ=1073741824,
    IMAGE_SCN_MEM_WRITE=2147483648
} SectionFlags;

union Misc {
    dword PhysicalAddress;
    dword VirtualSize;
};

struct IMAGE_SECTION_HEADER {
    char Name[8];
    union Misc Misc;
    ImageBaseOffset32 VirtualAddress;
    dword SizeOfRawData;
    dword PointerToRawData;
    dword PointerToRelocations;
    dword PointerToLinenumbers;
    word NumberOfRelocations;
    word NumberOfLinenumbers;
    enum SectionFlags Characteristics;
};

typedef struct StringFileInfo StringFileInfo, *PStringFileInfo;

struct StringFileInfo {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct StringInfo StringInfo, *PStringInfo;

struct StringInfo {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct StringTable StringTable, *PStringTable;

struct StringTable {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct Var Var, *PVar;

struct Var {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct VarFileInfo VarFileInfo, *PVarFileInfo;

struct VarFileInfo {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct VS_VERSION_INFO VS_VERSION_INFO, *PVS_VERSION_INFO;

typedef unsigned short    wchar16;
struct VS_VERSION_INFO {
    word StructLength;
    word ValueLength;
    word StructType;
    wchar16 Info[16];
    byte Padding[2];
    dword Signature;
    word StructVersion[2];
    word FileVersion[4];
    word ProductVersion[4];
    dword FileFlagsMask[2];
    dword FileFlags;
    dword FileOS;
    dword FileType;
    dword FileSubtype;
    dword FileTimestamp;
};

