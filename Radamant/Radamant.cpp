typedef unsigned char   undefined;




// WARNING: Instruction at (ram,0x000101f2) overlaps instruction at (ram,0x000101f0)
// 
// WARNING: Control flow encountered bad instruction data
// WARNING (jumptable): Stack frame is not setup normally: Input value of stackpointer is not used
// WARNING: Stack frame is not setup normally: Input value of stackpointer is not used
// WARNING: This function may have set the stack pointer
// WARNING: Removing unreachable block (ram,0x0001007a)
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

uint entry(void)

{
  int *piVar1;
  byte *pbVar2;
  char *pcVar3;
  uint *puVar4;
  undefined2 *puVar5;
  uint *puVar6;
  code *pcVar7;
  char cVar8;
  byte bVar9;
  char cVar10;
  byte bVar11;
  uint uVar12;
  int in_CX;
  int iVar13;
  uint uVar14;
  undefined2 extraout_DX;
  undefined2 uVar15;
  char *in_BX;
  char cVar16;
  undefined *puVar17;
  undefined *puVar18;
  undefined *puVar19;
  uint *puVar20;
  uint *puVar21;
  uint *puVar22;
  uint *puVar23;
  int unaff_BP;
  undefined2 *unaff_SI;
  undefined2 *puVar24;
  undefined2 *unaff_DI;
  undefined2 unaff_ES;
  undefined2 uVar25;
  bool bVar26;
  ulong uVar27;
  
  _DAT_0000_00b6 = 0x1000;
  puVar17 = (undefined *)0xb8;
  pcVar7 = (code *)swi(0x21);
  (*pcVar7)();
  pcVar7 = (code *)swi(0x21);
  uVar27 = (*pcVar7)();
  uVar25 = (undefined2)(uVar27 >> 0x10);
  uVar12 = (uint)uVar27;
  *(undefined **)(puVar17 + -2) = puVar17;
  puVar18 = puVar17 + -4;
  *(undefined2 *)(puVar17 + -4) = 0x7369;
  pbVar2 = (byte *)(in_BX + (int)unaff_SI + 0x72);
  *pbVar2 = *pbVar2 & (byte)(uVar27 >> 0x18);
  out(*unaff_SI,uVar25);
  bVar11 = (byte)(uVar27 >> 8);
  puVar6 = unaff_DI + 1;
  uVar15 = in(uVar25);
  *unaff_DI = uVar15;
  pbVar2 = (byte *)((int)puVar6 + unaff_BP + 0x61);
  *pbVar2 = *pbVar2 & bVar11;
  out(*(undefined *)(unaff_SI + 1),uVar25);
  out(*(undefined *)((int)unaff_SI + 3),uVar25);
  puVar24 = unaff_SI + 3;
  out(unaff_SI[2],uVar25);
  if (*pbVar2 != 0) {
    puVar5 = puVar24;
    puVar24 = (undefined2 *)((int)unaff_SI + 7);
    out(*(undefined *)puVar5,uVar25);
    pbVar2 = (byte *)(in_BX + (int)puVar6 + 0x6e);
    bVar9 = (byte)((uint)in_CX >> 8);
    *pbVar2 = *pbVar2 & bVar9;
    puVar5 = unaff_SI + 0x2b;
    *(byte *)puVar5 = *(byte *)puVar5 & (byte)uVar27;
    *(char **)(puVar17 + -6) = in_BX;
    pbVar2 = (byte *)((int)unaff_DI + 0x71);
    *pbVar2 = *pbVar2 & bVar9;
    uVar12 = (uint)(bVar11 | 10) << 8;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3;
    puVar18 = puVar17 + -8;
    *(uint *)(puVar17 + -8) = uVar12;
    unaff_BP = unaff_BP + 1;
  }
  uVar27 = uVar27 & 0xffff0000 | (ulong)uVar12;
  pcVar3 = in_BX + (int)puVar24;
  cVar8 = (char)uVar12;
  *pcVar3 = *pcVar3 + cVar8;
  puVar19 = puVar18 + -1;
  piVar1 = (int *)(unaff_BP + (int)puVar6);
  *piVar1 = *piVar1 + uVar12;
  pcVar3 = in_BX + (int)puVar24;
  cVar10 = *pcVar3;
  *pcVar3 = *pcVar3 + cVar8;
  pbVar2 = (byte *)((int)puVar6 + unaff_BP + 0x56);
  bVar11 = (byte)in_CX & 7;
  *pbVar2 = *pbVar2 >> bVar11 | *pbVar2 << 8 - bVar11;
  bVar26 = ((byte)in_CX & 0x1f) == 1;
  pcVar7 = (code *)swi(4);
  puVar20 = (uint *)(puVar18 + -1);
  if ((byte)(!bVar26 & SCARRY1(cVar10,cVar8) |
            (bVar26 && (char)*pbVar2 < '\0' != (char)(*pbVar2 << 1) < '\0')) == 1) {
    uVar27 = (*pcVar7)();
    puVar20 = (uint *)puVar19;
  }
  uVar15 = (undefined2)(uVar27 >> 0x10);
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + (char)uVar27;
  uVar12 = (uint)uVar27 & 0xff00 | (uint)*(byte *)ZEXT24(in_BX + ((uint)uVar27 & 0xff));
  uVar25 = *puVar20;
  iVar13 = in_CX + -1 + *(int *)(unaff_BP + (int)puVar6);
  piVar1 = (int *)(unaff_BP + (int)puVar24);
  *piVar1 = *piVar1 + uVar12;
  pcVar3 = in_BX + (int)puVar24;
  cVar10 = (char)(uVar12 + 1);
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  cVar8 = (char)(uVar27 >> 0x10);
  *pcVar3 = *pcVar3 + cVar8;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + (char)(uVar27 >> 0x18);
  piVar1 = (int *)(in_BX + (int)puVar24);
  *piVar1 = *piVar1 + uVar12 + 1;
  if (*piVar1 == 0) {
    pcVar3 = in_BX + (int)puVar24 + 1;
    *pcVar3 = *pcVar3 + cVar10;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + cVar10;
    pcVar3 = in_BX + (int)puVar6;
    *pcVar3 = *pcVar3;
  }
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  piVar1 = (int *)(in_BX + (int)puVar24);
  *piVar1 = *piVar1 + uVar12 + 2;
  pcVar3 = in_BX + (int)puVar24 + 1;
  cVar10 = (char)(uVar12 + 2);
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pbVar2 = (byte *)(in_BX + (int)puVar24);
  bVar11 = *pbVar2;
  bVar9 = (byte)(uVar12 + 3);
  *pbVar2 = *pbVar2 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9 + CARRY1(bVar11,bVar9);
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  bVar9 = bVar9 + in_BX[(int)puVar24];
  uVar12 = uVar12 + 3 & 0xff00;
  puVar5 = puVar24;
  *(byte *)puVar5 = *(char *)puVar5 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar6;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  puVar5 = puVar24;
  *(byte *)puVar5 = *(char *)puVar5 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  piVar1 = (int *)(in_BX + (int)puVar24);
  *piVar1 = *piVar1 + (uVar12 | bVar9);
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar8;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  bVar9 = bVar9 + in_BX[(int)puVar24];
  uVar12 = uVar12 | bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pbVar2 = (byte *)(in_BX + (int)puVar24);
  *pbVar2 = *pbVar2 & bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar8;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pbVar2 = (byte *)(in_BX + (int)puVar24);
  bVar11 = *pbVar2;
  *pbVar2 = *pbVar2 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9 + CARRY1(bVar11,bVar9);
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar8;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pbVar2 = (byte *)(in_BX + (int)puVar24);
  bVar11 = *pbVar2;
  *pbVar2 = *pbVar2 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9 + CARRY1(bVar11,bVar9);
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  *puVar20 = uVar12;
  puVar20[-1] = iVar13;
  puVar20[-2] = uVar15;
  puVar20[-3] = (uint)in_BX;
  puVar20[-4] = (uint)(puVar20 + 1);
  puVar20[-5] = unaff_BP;
  puVar20[-6] = (uint)puVar24;
  puVar20[-7] = (uint)puVar6;
  puVar5 = (undefined2 *)(in_BX + (int)puVar6);
  *puVar5 = *puVar5;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24 + 1;
  *pcVar3 = *pcVar3 + bVar9;
  puVar20[-8] = uVar12;
  puVar20[-9] = iVar13;
  puVar20[-10] = uVar15;
  puVar20[-0xb] = (uint)in_BX;
  puVar20[-0xc] = (uint)(puVar20 + -7);
  puVar20[-0xd] = unaff_BP;
  puVar21 = puVar20 + -0xe;
  puVar22 = puVar20 + -0xe;
  puVar23 = puVar20 + -0xe;
  puVar20[-0xe] = (uint)puVar24;
  puVar20[-0xf] = (uint)puVar6;
  cVar10 = bVar9 + (char)*(undefined2 *)(in_BX + (int)puVar24);
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  cVar16 = (char)((uint)in_BX >> 8);
  *pcVar3 = *pcVar3 + cVar16;
  puVar5 = puVar24;
  *(char *)puVar5 = *(char *)puVar5 + (char)iVar13;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + cVar10;
  puVar5 = unaff_DI + 0x29;
  *(char *)puVar5 = *(char *)puVar5 + cVar8;
  uVar12 = puVar20[-0xf];
  pbVar2 = (byte *)(in_BX + (int)puVar24);
  bVar9 = (byte)uVar12;
  *pbVar2 = *pbVar2 ^ bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pbVar2 = (byte *)(in_BX + (int)puVar6);
  *pbVar2 = *pbVar2 ^ bVar9;
  pbVar2 = (byte *)(in_BX + (int)puVar24);
  bVar11 = *pbVar2;
  *pbVar2 = *pbVar2 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9 + CARRY1(bVar11,bVar9);
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  bVar9 = bVar9 + in_BX[(int)puVar24];
  uVar12 = uVar12 & 0xff00 | (uint)bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  uVar14 = iVar13 - 1;
  if (uVar14 == 0 || *pcVar3 == '\0') {
    puVar20[-0xf] = uVar12;
    uVar12 = puVar20[-0xf];
    puVar4 = (uint *)(in_BX + (int)puVar24);
    *puVar4 = *puVar4 ^ uVar12;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + (char)uVar12;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + (char)uVar12;
    pcVar3 = in_BX + (int)puVar24;
    cVar10 = (char)(uVar12 + 1);
    *pcVar3 = *pcVar3 + cVar10;
    pcVar3 = in_BX + (int)puVar24 + 1;
    *pcVar3 = *pcVar3 + cVar10;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + cVar10;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + cVar10;
    bVar11 = cVar10 + in_BX[(int)puVar24];
    uVar12 = uVar12 + 1 & 0xff00;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + bVar11;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + bVar11;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + bVar11;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + bVar11;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + bVar11;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + bVar11;
    pcVar3 = in_BX + (int)puVar24;
    *pcVar3 = *pcVar3 + bVar11;
    bVar9 = (byte)(uVar12 >> 8);
    bVar26 = CARRY1(bVar11,bVar9);
    bVar11 = bVar11 + bVar9;
    uVar12 = uVar12 | bVar11;
    if (bVar26) {
      if (bVar26) {
        cVar10 = (bVar11 + 0x77) - bVar26;
        goto code_r0x0001025e;
      }
                    // WARNING: Read-only address (ram,0x00010001) is written
      uRam00010001 = 0x824;
                    // WARNING (jumptable): Read-only address (ram,0x00010025) is written
                    // WARNING: Read-only address (ram,0x00010025) is written
      uRam00010025 = 0;
      puVar20[-0xf] = uVar25;
      in(uVar15);
                    // WARNING: Could not recover jumptable at 0x00010213. Too many branches
                    // WARNING: Treating indirect jump as call
      uVar12 = (**(code **)((int)puVar6 + unaff_BP + -0x7c64))();
      return uVar12;
    }
    if (bVar26) {
      while( true ) {
        bVar11 = (byte)uVar12;
        if (CARRY1(bVar11,bVar11) || (byte)(bVar11 * '\x02') == 0) {
          return uVar12 & 0xff00 | (uint)(byte)(bVar11 * '\x02');
        }
        puVar24 = (undefined2 *)(unaff_BP + 0x3c);
        in(uVar15);
        uVar14 = 0xf6e4;
        *(int *)(unaff_BP + 0x70) = (int)puVar24;
        pcVar7 = (code *)swi(0x35);
        (*pcVar7)();
        cVar10 = -0x15;
        in_BX = (char *)0x891d;
        puVar23 = (uint *)(*puVar22 + 2);
        uVar15 = extraout_DX;
code_r0x0001025e:
        puVar22 = (uint *)((int)puVar23 + -2);
        *(uint *)((int)puVar23 + -2) = uVar14;
        if (puVar24 == (undefined2 *)0x0) break;
        pcVar3 = (char *)(unaff_BP + -0x6424);
        *pcVar3 = *pcVar3 + (char)in_BX;
        uVar12 = *(uint *)(in_BX + (int)puVar24);
      }
      pcVar3 = in_BX;
      *pcVar3 = *pcVar3 + cVar10;
      in_BX[0x43] = '\0';
                    // WARNING: Bad instruction - Truncating control flow here
      halt_baddata();
    }
  }
  else {
    puVar21 = puVar20 + -0xf;
    puVar20[-0xf] = uVar12;
  }
  pcVar3 = in_BX + (int)puVar24;
  bVar9 = (byte)uVar12;
  *pcVar3 = *pcVar3 + bVar9;
  pbVar2 = (byte *)(in_BX + (int)puVar24);
  bVar11 = *pbVar2;
  *pbVar2 = *pbVar2 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9 + CARRY1(bVar11,bVar9);
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar6;
  *pcVar3 = *pcVar3;
  entry = (code)((char)entry + bVar9);
  pcVar3 = (char *)(unaff_BP + (int)puVar24);
  *pcVar3 = *pcVar3 + cVar16;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9;
  pcVar3 = in_BX + (int)puVar24;
  *pcVar3 = *pcVar3 + bVar9 + 1;
  *(undefined *)(unaff_BP + (int)puVar6) = 0;
  puVar5 = unaff_DI + 0x29;
  *(char *)puVar5 = *(char *)puVar5 + cVar8;
  uVar12 = *puVar21;
  puVar4 = puVar6;
  *puVar4 = *puVar4 & uVar14;
  puVar4 = (uint *)(in_BX + (int)puVar24);
  *puVar4 = *puVar4 | uVar14;
  puVar4 = puVar6;
  *puVar4 = *puVar4 | (uint)puVar24;
  return uVar12;
}
