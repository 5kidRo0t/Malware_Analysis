typedef unsigned char   undefined;

typedef unsigned long long    GUID;
typedef unsigned int    ImageBaseOffset32;
typedef unsigned char    bool;
typedef unsigned char    byte;
typedef unsigned int    dword;
float10
typedef long long    longlong;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned int    uint3;
typedef unsigned long    ulong;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned short    undefined2;
typedef unsigned int    undefined4;
typedef unsigned long long    undefined8;
typedef unsigned short    ushort;
typedef short    wchar_t;
typedef unsigned short    word;
typedef ulong ULONG_PTR;

typedef ULONG_PTR DWORD_PTR;

typedef int INT_PTR;

typedef long LONG_PTR;

typedef ULONG_PTR SIZE_T;

typedef uint UINT_PTR;

typedef struct _IMAGELIST _IMAGELIST, *P_IMAGELIST;

struct _IMAGELIST {
};

typedef struct _IMAGELIST * HIMAGELIST;

typedef struct tagINITCOMMONCONTROLSEX tagINITCOMMONCONTROLSEX, *PtagINITCOMMONCONTROLSEX;

typedef struct tagINITCOMMONCONTROLSEX INITCOMMONCONTROLSEX;

typedef ulong DWORD;

struct tagINITCOMMONCONTROLSEX {
    DWORD dwSize;
    DWORD dwICC;
};

typedef struct HWND__ HWND__, *PHWND__;

typedef struct HWND__ * HWND;

typedef uint UINT;

typedef UINT_PTR WPARAM;

typedef LONG_PTR LPARAM;

typedef UINT_PTR (* LPCCHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

struct HWND__ {
    int unused;
};

typedef struct tagCHOOSECOLORW tagCHOOSECOLORW, *PtagCHOOSECOLORW;

typedef struct tagCHOOSECOLORW * LPCHOOSECOLORW;

typedef DWORD COLORREF;

typedef wchar_t WCHAR;

typedef WCHAR * LPCWSTR;

struct tagCHOOSECOLORW {
    DWORD lStructSize;
    HWND hwndOwner;
    HWND hInstance;
    COLORREF rgbResult;
    COLORREF * lpCustColors;
    DWORD Flags;
    LPARAM lCustData;
    LPCCHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
};

typedef UINT_PTR (* LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

typedef struct tagOFNW tagOFNW, *PtagOFNW;

typedef struct tagOFNW * LPOPENFILENAMEW;

typedef struct HINSTANCE__ HINSTANCE__, *PHINSTANCE__;

typedef struct HINSTANCE__ * HINSTANCE;

typedef WCHAR * LPWSTR;

typedef ushort WORD;

struct tagOFNW {
    DWORD lStructSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpstrFilter;
    LPWSTR lpstrCustomFilter;
    DWORD nMaxCustFilter;
    DWORD nFilterIndex;
    LPWSTR lpstrFile;
    DWORD nMaxFile;
    LPWSTR lpstrFileTitle;
    DWORD nMaxFileTitle;
    LPCWSTR lpstrInitialDir;
    LPCWSTR lpstrTitle;
    DWORD Flags;
    WORD nFileOffset;
    WORD nFileExtension;
    LPCWSTR lpstrDefExt;
    LPARAM lCustData;
    LPOFNHOOKPROC lpfnHook;
    LPCWSTR lpTemplateName;
    void * pvReserved;
    DWORD dwReserved;
    DWORD FlagsEx;
};

struct HINSTANCE__ {
    int unused;
};

typedef struct __lc_time_data __lc_time_data, *P__lc_time_data;

struct __lc_time_data {
    char * wday_abbr[7];
    char * wday[7];
    char * month_abbr[12];
    char * month[12];
    char * ampm[2];
    char * ww_sdatefmt;
    char * ww_ldatefmt;
    char * ww_timefmt;
    int ww_caltype;
    int refcount;
    wchar_t * _W_wday_abbr[7];
    wchar_t * _W_wday[7];
    wchar_t * _W_month_abbr[12];
    wchar_t * _W_month[12];
    wchar_t * _W_ampm[2];
    wchar_t * _W_ww_sdatefmt;
    wchar_t * _W_ww_ldatefmt;
    wchar_t * _W_ww_timefmt;
    wchar_t * _W_ww_locale_name;
};

typedef struct localeinfo_struct localeinfo_struct, *Plocaleinfo_struct;

typedef struct localeinfo_struct * _locale_t;

typedef struct threadlocaleinfostruct threadlocaleinfostruct, *Pthreadlocaleinfostruct;

typedef struct threadlocaleinfostruct * pthreadlocinfo;

typedef struct threadmbcinfostruct threadmbcinfostruct, *Pthreadmbcinfostruct;

typedef struct threadmbcinfostruct * pthreadmbcinfo;

typedef struct localerefcount localerefcount, *Plocalerefcount;

typedef struct localerefcount locrefcount;

typedef struct lconv lconv, *Plconv;

struct lconv {
    char * decimal_point;
    char * thousands_sep;
    char * grouping;
    char * int_curr_symbol;
    char * currency_symbol;
    char * mon_decimal_point;
    char * mon_thousands_sep;
    char * mon_grouping;
    char * positive_sign;
    char * negative_sign;
    char int_frac_digits;
    char frac_digits;
    char p_cs_precedes;
    char p_sep_by_space;
    char n_cs_precedes;
    char n_sep_by_space;
    char p_sign_posn;
    char n_sign_posn;
    wchar_t * _W_decimal_point;
    wchar_t * _W_thousands_sep;
    wchar_t * _W_int_curr_symbol;
    wchar_t * _W_currency_symbol;
    wchar_t * _W_mon_decimal_point;
    wchar_t * _W_mon_thousands_sep;
    wchar_t * _W_positive_sign;
    wchar_t * _W_negative_sign;
};

struct localerefcount {
    char * locale;
    wchar_t * wlocale;
    int * refcount;
    int * wrefcount;
};

struct threadlocaleinfostruct {
    int refcount;
    uint lc_codepage;
    uint lc_collate_cp;
    uint lc_time_cp;
    locrefcount lc_category[6];
    int lc_clike;
    int mb_cur_max;
    int * lconv_intl_refcount;
    int * lconv_num_refcount;
    int * lconv_mon_refcount;
    struct lconv * lconv;
    int * ctype1_refcount;
    ushort * ctype1;
    ushort * pctype;
    uchar * pclmap;
    uchar * pcumap;
    struct __lc_time_data * lc_time_curr;
    wchar_t * locale_name[6];
};

struct threadmbcinfostruct {
    int refcount;
    int mbcodepage;
    int ismbcodepage;
    ushort mbulinfo[6];
    uchar mbctype[257];
    uchar mbcasemap[256];
    wchar_t * mblocalename;
};

struct localeinfo_struct {
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
};

typedef int errno_t;

typedef int ptrdiff_t;

typedef uint size_t;

typedef size_t rsize_t;

typedef ushort wctype_t;

typedef ushort wint_t;

typedef struct HCONV__ HCONV__, *PHCONV__;

typedef struct HCONV__ * HCONV;

struct HCONV__ {
    int unused;
};

typedef struct HDDEDATA__ HDDEDATA__, *PHDDEDATA__;

typedef struct HDDEDATA__ * HDDEDATA;

struct HDDEDATA__ {
    int unused;
};

typedef struct HSZ__ HSZ__, *PHSZ__;

typedef struct HSZ__ * HSZ;

struct HSZ__ {
    int unused;
};

typedef struct tagCONVCONTEXT tagCONVCONTEXT, *PtagCONVCONTEXT;

typedef struct tagCONVCONTEXT * PCONVCONTEXT;

typedef struct _SECURITY_QUALITY_OF_SERVICE _SECURITY_QUALITY_OF_SERVICE, *P_SECURITY_QUALITY_OF_SERVICE;

typedef struct _SECURITY_QUALITY_OF_SERVICE SECURITY_QUALITY_OF_SERVICE;

typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous=0,
    SecurityIdentification=1,
    SecurityImpersonation=2,
    SecurityDelegation=3
} _SECURITY_IMPERSONATION_LEVEL;

typedef enum _SECURITY_IMPERSONATION_LEVEL SECURITY_IMPERSONATION_LEVEL;

typedef uchar BYTE;

typedef BYTE BOOLEAN;

typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE;

struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
};

struct tagCONVCONTEXT {
    UINT cb;
    UINT wFlags;
    UINT wCountryID;
    int iCodePage;
    DWORD dwLangID;
    DWORD dwSecurity;
    SECURITY_QUALITY_OF_SERVICE qos;
};

typedef HDDEDATA (* PFNCALLBACK)(UINT, UINT, HCONV, HSZ, HSZ, HDDEDATA, ULONG_PTR, ULONG_PTR);

typedef struct dual_state_global<struct___crt_multibyte_data*> dual_state_global<struct___crt_multibyte_data*>, *Pdual_state_global<struct___crt_multibyte_data*>;

struct dual_state_global<struct___crt_multibyte_data*> { /* PlaceHolder Structure */
};

typedef enum conversion_mode {
} conversion_mode;

typedef struct format_string_parser<char> format_string_parser<char>, *Pformat_string_parser<char>;

struct format_string_parser<char> { /* PlaceHolder Structure */
};

typedef struct format_string_parser<wchar_t> format_string_parser<wchar_t>, *Pformat_string_parser<wchar_t>;

struct format_string_parser<wchar_t> { /* PlaceHolder Structure */
};

typedef struct input_processor<char,class___crt_stdio_input::stream_input_adapter<char>_> input_processor<char,class___crt_stdio_input::stream_input_adapter<char>_>, *Pinput_processor<char,class___crt_stdio_input::stream_input_adapter<char>_>;

struct input_processor<char,class___crt_stdio_input::stream_input_adapter<char>_> { /* PlaceHolder Structure */
};

typedef struct input_processor<char,class___crt_stdio_input::string_input_adapter<char>_> input_processor<char,class___crt_stdio_input::string_input_adapter<char>_>, *Pinput_processor<char,class___crt_stdio_input::string_input_adapter<char>_>;

struct input_processor<char,class___crt_stdio_input::string_input_adapter<char>_> { /* PlaceHolder Structure */
};

typedef struct input_processor<wchar_t,class___crt_stdio_input::stream_input_adapter<wchar_t>_> input_processor<wchar_t,class___crt_stdio_input::stream_input_adapter<wchar_t>_>, *Pinput_processor<wchar_t,class___crt_stdio_input::stream_input_adapter<wchar_t>_>;

struct input_processor<wchar_t,class___crt_stdio_input::stream_input_adapter<wchar_t>_> { /* PlaceHolder Structure */
};

typedef struct input_processor<wchar_t,class___crt_stdio_input::string_input_adapter<wchar_t>_> input_processor<wchar_t,class___crt_stdio_input::string_input_adapter<wchar_t>_>, *Pinput_processor<wchar_t,class___crt_stdio_input::string_input_adapter<wchar_t>_>;

struct input_processor<wchar_t,class___crt_stdio_input::string_input_adapter<wchar_t>_> { /* PlaceHolder Structure */
};

typedef enum length_modifier {
} length_modifier;

typedef struct scanset_buffer<unsigned_char> scanset_buffer<unsigned_char>, *Pscanset_buffer<unsigned_char>;

struct scanset_buffer<unsigned_char> { /* PlaceHolder Structure */
};

typedef struct scanset_buffer<wchar_t> scanset_buffer<wchar_t>, *Pscanset_buffer<wchar_t>;

struct scanset_buffer<wchar_t> { /* PlaceHolder Structure */
};

typedef struct scanset_storage<2> scanset_storage<2>, *Pscanset_storage<2>;

struct scanset_storage<2> { /* PlaceHolder Structure */
};

typedef struct stream_input_adapter<char> stream_input_adapter<char>, *Pstream_input_adapter<char>;

struct stream_input_adapter<char> { /* PlaceHolder Structure */
};

typedef struct stream_input_adapter<wchar_t> stream_input_adapter<wchar_t>, *Pstream_input_adapter<wchar_t>;

struct stream_input_adapter<wchar_t> { /* PlaceHolder Structure */
};

typedef struct string_input_adapter<char> string_input_adapter<char>, *Pstring_input_adapter<char>;

struct string_input_adapter<char> { /* PlaceHolder Structure */
};

typedef struct string_input_adapter<wchar_t> string_input_adapter<wchar_t>, *Pstring_input_adapter<wchar_t>;

struct string_input_adapter<wchar_t> { /* PlaceHolder Structure */
};

typedef struct formatting_buffer formatting_buffer, *Pformatting_buffer;

struct formatting_buffer { /* PlaceHolder Structure */
};

typedef struct string_output_adapter<char> string_output_adapter<char>, *Pstring_output_adapter<char>;

struct string_output_adapter<char> { /* PlaceHolder Structure */
};

typedef struct string_output_adapter<wchar_t> string_output_adapter<wchar_t>, *Pstring_output_adapter<wchar_t>;

struct string_output_adapter<wchar_t> { /* PlaceHolder Structure */
};

typedef struct big_integer big_integer, *Pbig_integer;

struct big_integer { /* PlaceHolder Structure */
};

typedef struct c_string_character_source<char> c_string_character_source<char>, *Pc_string_character_source<char>;

struct c_string_character_source<char> { /* PlaceHolder Structure */
};

typedef struct c_string_character_source<wchar_t> c_string_character_source<wchar_t>, *Pc_string_character_source<wchar_t>;

struct c_string_character_source<wchar_t> { /* PlaceHolder Structure */
};

typedef enum floating_point_parse_result {
} floating_point_parse_result;

typedef struct floating_point_string floating_point_string, *Pfloating_point_string;

struct floating_point_string { /* PlaceHolder Structure */
};

typedef struct floating_point_value floating_point_value, *Pfloating_point_value;

struct floating_point_value { /* PlaceHolder Structure */
};

typedef struct input_adapter_character_source<class___crt_stdio_input::stream_input_adapter<char>_> input_adapter_character_source<class___crt_stdio_input::stream_input_adapter<char>_>, *Pinput_adapter_character_source<class___crt_stdio_input::stream_input_adapter<char>_>;

struct input_adapter_character_source<class___crt_stdio_input::stream_input_adapter<char>_> { /* PlaceHolder Structure */
};

typedef struct input_adapter_character_source<class___crt_stdio_input::stream_input_adapter<wchar_t>_> input_adapter_character_source<class___crt_stdio_input::stream_input_adapter<wchar_t>_>, *Pinput_adapter_character_source<class___crt_stdio_input::stream_input_adapter<wchar_t>_>;

struct input_adapter_character_source<class___crt_stdio_input::stream_input_adapter<wchar_t>_> { /* PlaceHolder Structure */
};

typedef struct input_adapter_character_source<class___crt_stdio_input::string_input_adapter<char>_> input_adapter_character_source<class___crt_stdio_input::string_input_adapter<char>_>, *Pinput_adapter_character_source<class___crt_stdio_input::string_input_adapter<char>_>;

struct input_adapter_character_source<class___crt_stdio_input::string_input_adapter<char>_> { /* PlaceHolder Structure */
};

typedef struct input_adapter_character_source<class___crt_stdio_input::string_input_adapter<wchar_t>_> input_adapter_character_source<class___crt_stdio_input::string_input_adapter<wchar_t>_>, *Pinput_adapter_character_source<class___crt_stdio_input::string_input_adapter<wchar_t>_>;

struct input_adapter_character_source<class___crt_stdio_input::string_input_adapter<wchar_t>_> { /* PlaceHolder Structure */
};

typedef struct iterator iterator, *Piterator;

struct iterator { /* PlaceHolder Structure */
};

typedef struct TryBlockMap TryBlockMap, *PTryBlockMap;

struct TryBlockMap { /* PlaceHolder Structure */
};

typedef struct argument_list<char> argument_list<char>, *Pargument_list<char>;

struct argument_list<char> { /* PlaceHolder Structure */
};

typedef struct argument_list<wchar_t> argument_list<wchar_t>, *Pargument_list<wchar_t>;

struct argument_list<wchar_t> { /* PlaceHolder Structure */
};

typedef struct filwbuf_context filwbuf_context, *Pfilwbuf_context;

struct filwbuf_context { /* PlaceHolder Structure */
};

typedef enum function_id {
} function_id;

typedef enum module_id {
} module_id;

typedef struct write_result write_result, *Pwrite_result;

struct write_result { /* PlaceHolder Structure */
};

typedef enum error_type {
} error_type;

typedef struct _Tree_unchecked_const_iterator<class_std::_Tree_val<struct_std::_Tree_simple_types<unsigned_int>_>,struct_std::_Iterator_base0> _Tree_unchecked_const_iterator<class_std::_Tree_val<struct_std::_Tree_simple_types<unsigned_int>_>,struct_std::_Iterator_base0>, *P_Tree_unchecked_const_iterator<class_std::_Tree_val<struct_std::_Tree_simple_types<unsigned_int>_>,struct_std::_Iterator_base0>;

struct _Tree_unchecked_const_iterator<class_std::_Tree_val<struct_std::_Tree_simple_types<unsigned_int>_>,struct_std::_Iterator_base0> { /* PlaceHolder Structure */
};

typedef struct pair<class___FrameHandler3::TryBlockMap::iterator,class___FrameHandler3::TryBlockMap::iterator> pair<class___FrameHandler3::TryBlockMap::iterator,class___FrameHandler3::TryBlockMap::iterator>, *Ppair<class___FrameHandler3::TryBlockMap::iterator,class___FrameHandler3::TryBlockMap::iterator>;

struct pair<class___FrameHandler3::TryBlockMap::iterator,class___FrameHandler3::TryBlockMap::iterator> { /* PlaceHolder Structure */
};

typedef struct <lambda_03fcd07e894ec930e3f35da366ca99d6> <lambda_03fcd07e894ec930e3f35da366ca99d6>, *P<lambda_03fcd07e894ec930e3f35da366ca99d6>;

struct <lambda_03fcd07e894ec930e3f35da366ca99d6> { /* PlaceHolder Structure */
};

typedef struct <lambda_0ca1de2171e49cefb1e8dc85c06db622> <lambda_0ca1de2171e49cefb1e8dc85c06db622>, *P<lambda_0ca1de2171e49cefb1e8dc85c06db622>;

struct <lambda_0ca1de2171e49cefb1e8dc85c06db622> { /* PlaceHolder Structure */
};

typedef struct <lambda_135d2772fca65dc1248eeaa1b56e886a> <lambda_135d2772fca65dc1248eeaa1b56e886a>, *P<lambda_135d2772fca65dc1248eeaa1b56e886a>;

struct <lambda_135d2772fca65dc1248eeaa1b56e886a> { /* PlaceHolder Structure */
};

typedef struct <lambda_15ade71b0218206bbe3333a0c9b79046> <lambda_15ade71b0218206bbe3333a0c9b79046>, *P<lambda_15ade71b0218206bbe3333a0c9b79046>;

struct <lambda_15ade71b0218206bbe3333a0c9b79046> { /* PlaceHolder Structure */
};

typedef struct <lambda_18ed0c0b38a6dc0daf1e7ac6d6adf05e> <lambda_18ed0c0b38a6dc0daf1e7ac6d6adf05e>, *P<lambda_18ed0c0b38a6dc0daf1e7ac6d6adf05e>;

struct <lambda_18ed0c0b38a6dc0daf1e7ac6d6adf05e> { /* PlaceHolder Structure */
};

typedef struct <lambda_207f2d024fc103971653565357d6cd41> <lambda_207f2d024fc103971653565357d6cd41>, *P<lambda_207f2d024fc103971653565357d6cd41>;

struct <lambda_207f2d024fc103971653565357d6cd41> { /* PlaceHolder Structure */
};

typedef struct <lambda_21448eb78dd3c4a522ed7c65a98d88e6> <lambda_21448eb78dd3c4a522ed7c65a98d88e6>, *P<lambda_21448eb78dd3c4a522ed7c65a98d88e6>;

struct <lambda_21448eb78dd3c4a522ed7c65a98d88e6> { /* PlaceHolder Structure */
};

typedef struct <lambda_22ebabd17bc4fa466a2aca6d8deb888d> <lambda_22ebabd17bc4fa466a2aca6d8deb888d>, *P<lambda_22ebabd17bc4fa466a2aca6d8deb888d>;

struct <lambda_22ebabd17bc4fa466a2aca6d8deb888d> { /* PlaceHolder Structure */
};

typedef struct <lambda_274ecf0a8038e561263518ab346655e8> <lambda_274ecf0a8038e561263518ab346655e8>, *P<lambda_274ecf0a8038e561263518ab346655e8>;

struct <lambda_274ecf0a8038e561263518ab346655e8> { /* PlaceHolder Structure */
};

typedef struct <lambda_29d3c280b90b41c2ae070ffca879996a> <lambda_29d3c280b90b41c2ae070ffca879996a>, *P<lambda_29d3c280b90b41c2ae070ffca879996a>;

struct <lambda_29d3c280b90b41c2ae070ffca879996a> { /* PlaceHolder Structure */
};

typedef struct <lambda_2a444430fde8c29194d880d93eed5e8f> <lambda_2a444430fde8c29194d880d93eed5e8f>, *P<lambda_2a444430fde8c29194d880d93eed5e8f>;

struct <lambda_2a444430fde8c29194d880d93eed5e8f> { /* PlaceHolder Structure */
};

typedef struct <lambda_2cc53f568c5a2bb6f192f930a45d44ea> <lambda_2cc53f568c5a2bb6f192f930a45d44ea>, *P<lambda_2cc53f568c5a2bb6f192f930a45d44ea>;

struct <lambda_2cc53f568c5a2bb6f192f930a45d44ea> { /* PlaceHolder Structure */
};

typedef struct <lambda_2e1cf6ed1c07646757a0128817e0c201> <lambda_2e1cf6ed1c07646757a0128817e0c201>, *P<lambda_2e1cf6ed1c07646757a0128817e0c201>;

struct <lambda_2e1cf6ed1c07646757a0128817e0c201> { /* PlaceHolder Structure */
};

typedef struct <lambda_32aa245da1b5b882fa96db788295c8b2> <lambda_32aa245da1b5b882fa96db788295c8b2>, *P<lambda_32aa245da1b5b882fa96db788295c8b2>;

struct <lambda_32aa245da1b5b882fa96db788295c8b2> { /* PlaceHolder Structure */
};

typedef struct <lambda_38edbb1296d33220d7e4dd0ed76b244a> <lambda_38edbb1296d33220d7e4dd0ed76b244a>, *P<lambda_38edbb1296d33220d7e4dd0ed76b244a>;

struct <lambda_38edbb1296d33220d7e4dd0ed76b244a> { /* PlaceHolder Structure */
};

typedef struct <lambda_3e16ef9562a7dcce91392c22ab16ea36> <lambda_3e16ef9562a7dcce91392c22ab16ea36>, *P<lambda_3e16ef9562a7dcce91392c22ab16ea36>;

struct <lambda_3e16ef9562a7dcce91392c22ab16ea36> { /* PlaceHolder Structure */
};

typedef struct <lambda_44731a7d0e6d81c3e6aa82d741081786> <lambda_44731a7d0e6d81c3e6aa82d741081786>, *P<lambda_44731a7d0e6d81c3e6aa82d741081786>;

struct <lambda_44731a7d0e6d81c3e6aa82d741081786> { /* PlaceHolder Structure */
};

typedef struct <lambda_46720907175c18b6c9d2717bc0d2d362> <lambda_46720907175c18b6c9d2717bc0d2d362>, *P<lambda_46720907175c18b6c9d2717bc0d2d362>;

struct <lambda_46720907175c18b6c9d2717bc0d2d362> { /* PlaceHolder Structure */
};

typedef struct <lambda_4b292cb8dd18144e164572427af410ab> <lambda_4b292cb8dd18144e164572427af410ab>, *P<lambda_4b292cb8dd18144e164572427af410ab>;

struct <lambda_4b292cb8dd18144e164572427af410ab> { /* PlaceHolder Structure */
};

typedef struct <lambda_4fdada1b837b2abbf20876fac97688ad> <lambda_4fdada1b837b2abbf20876fac97688ad>, *P<lambda_4fdada1b837b2abbf20876fac97688ad>;

struct <lambda_4fdada1b837b2abbf20876fac97688ad> { /* PlaceHolder Structure */
};

typedef struct <lambda_594f614a8947934b886943aa86a6498d> <lambda_594f614a8947934b886943aa86a6498d>, *P<lambda_594f614a8947934b886943aa86a6498d>;

struct <lambda_594f614a8947934b886943aa86a6498d> { /* PlaceHolder Structure */
};

typedef struct <lambda_5ce1d447e08cb34b2473517608e21441> <lambda_5ce1d447e08cb34b2473517608e21441>, *P<lambda_5ce1d447e08cb34b2473517608e21441>;

struct <lambda_5ce1d447e08cb34b2473517608e21441> { /* PlaceHolder Structure */
};

typedef struct <lambda_608742c3c92a14382c1684fc64f96c88> <lambda_608742c3c92a14382c1684fc64f96c88>, *P<lambda_608742c3c92a14382c1684fc64f96c88>;

struct <lambda_608742c3c92a14382c1684fc64f96c88> { /* PlaceHolder Structure */
};

typedef struct <lambda_62f6974d9771e494a5ea317cc32e971c> <lambda_62f6974d9771e494a5ea317cc32e971c>, *P<lambda_62f6974d9771e494a5ea317cc32e971c>;

struct <lambda_62f6974d9771e494a5ea317cc32e971c> { /* PlaceHolder Structure */
};

typedef struct <lambda_63ea2239ed67c638ddbae41947fdf875> <lambda_63ea2239ed67c638ddbae41947fdf875>, *P<lambda_63ea2239ed67c638ddbae41947fdf875>;

struct <lambda_63ea2239ed67c638ddbae41947fdf875> { /* PlaceHolder Structure */
};

typedef struct <lambda_6673f7c4c09a5d469d0c27ae364621ce> <lambda_6673f7c4c09a5d469d0c27ae364621ce>, *P<lambda_6673f7c4c09a5d469d0c27ae364621ce>;

struct <lambda_6673f7c4c09a5d469d0c27ae364621ce> { /* PlaceHolder Structure */
};

typedef struct <lambda_69a2805e680e0e292e8ba93315fe43a8> <lambda_69a2805e680e0e292e8ba93315fe43a8>, *P<lambda_69a2805e680e0e292e8ba93315fe43a8>;

struct <lambda_69a2805e680e0e292e8ba93315fe43a8> { /* PlaceHolder Structure */
};

typedef struct <lambda_6affb1475c98b40b75cdec977db92e3c> <lambda_6affb1475c98b40b75cdec977db92e3c>, *P<lambda_6affb1475c98b40b75cdec977db92e3c>;

struct <lambda_6affb1475c98b40b75cdec977db92e3c> { /* PlaceHolder Structure */
};

typedef struct <lambda_6b4b7855443974f2b4b77000ea21c99c> <lambda_6b4b7855443974f2b4b77000ea21c99c>, *P<lambda_6b4b7855443974f2b4b77000ea21c99c>;

struct <lambda_6b4b7855443974f2b4b77000ea21c99c> { /* PlaceHolder Structure */
};

typedef struct <lambda_6d20deecaf4856105ebacbad442d1079> <lambda_6d20deecaf4856105ebacbad442d1079>, *P<lambda_6d20deecaf4856105ebacbad442d1079>;

struct <lambda_6d20deecaf4856105ebacbad442d1079> { /* PlaceHolder Structure */
};

typedef struct <lambda_82aef432098b982f9ede325b418aa67a> <lambda_82aef432098b982f9ede325b418aa67a>, *P<lambda_82aef432098b982f9ede325b418aa67a>;

struct <lambda_82aef432098b982f9ede325b418aa67a> { /* PlaceHolder Structure */
};

typedef struct <lambda_862e9a3f04921db6ca1ce3faa2bf3edf> <lambda_862e9a3f04921db6ca1ce3faa2bf3edf>, *P<lambda_862e9a3f04921db6ca1ce3faa2bf3edf>;

struct <lambda_862e9a3f04921db6ca1ce3faa2bf3edf> { /* PlaceHolder Structure */
};

typedef struct <lambda_88ce03f932007f29bf8b8056cbaba4f3> <lambda_88ce03f932007f29bf8b8056cbaba4f3>, *P<lambda_88ce03f932007f29bf8b8056cbaba4f3>;

struct <lambda_88ce03f932007f29bf8b8056cbaba4f3> { /* PlaceHolder Structure */
};

typedef struct <lambda_8dff2cf36a5417162780cd64fa2883ef> <lambda_8dff2cf36a5417162780cd64fa2883ef>, *P<lambda_8dff2cf36a5417162780cd64fa2883ef>;

struct <lambda_8dff2cf36a5417162780cd64fa2883ef> { /* PlaceHolder Structure */
};

typedef struct <lambda_8e746cf0007f6ed984d6f78af1fec997> <lambda_8e746cf0007f6ed984d6f78af1fec997>, *P<lambda_8e746cf0007f6ed984d6f78af1fec997>;

struct <lambda_8e746cf0007f6ed984d6f78af1fec997> { /* PlaceHolder Structure */
};

typedef struct <lambda_8f7d3b162ab39427f4fa9995c67a7986> <lambda_8f7d3b162ab39427f4fa9995c67a7986>, *P<lambda_8f7d3b162ab39427f4fa9995c67a7986>;

struct <lambda_8f7d3b162ab39427f4fa9995c67a7986> { /* PlaceHolder Structure */
};

typedef struct <lambda_9048902d66e8d99359bc9897bbb930a8> <lambda_9048902d66e8d99359bc9897bbb930a8>, *P<lambda_9048902d66e8d99359bc9897bbb930a8>;

struct <lambda_9048902d66e8d99359bc9897bbb930a8> { /* PlaceHolder Structure */
};

typedef struct <lambda_9a32fed5bf61b6b509b2d3f6003082a1> <lambda_9a32fed5bf61b6b509b2d3f6003082a1>, *P<lambda_9a32fed5bf61b6b509b2d3f6003082a1>;

struct <lambda_9a32fed5bf61b6b509b2d3f6003082a1> { /* PlaceHolder Structure */
};

typedef struct <lambda_9e0b6ab72a5b3ae37ad997d08b519f50> <lambda_9e0b6ab72a5b3ae37ad997d08b519f50>, *P<lambda_9e0b6ab72a5b3ae37ad997d08b519f50>;

struct <lambda_9e0b6ab72a5b3ae37ad997d08b519f50> { /* PlaceHolder Structure */
};

typedef struct <lambda_a7e850c220f1c8d1e6efeecdedd162c6> <lambda_a7e850c220f1c8d1e6efeecdedd162c6>, *P<lambda_a7e850c220f1c8d1e6efeecdedd162c6>;

struct <lambda_a7e850c220f1c8d1e6efeecdedd162c6> { /* PlaceHolder Structure */
};

typedef struct <lambda_ab61a845afdef5b7c387490eaf3616ee> <lambda_ab61a845afdef5b7c387490eaf3616ee>, *P<lambda_ab61a845afdef5b7c387490eaf3616ee>;

struct <lambda_ab61a845afdef5b7c387490eaf3616ee> { /* PlaceHolder Structure */
};

typedef struct <lambda_ae742caa10f662c28703da3d2ea5e57e> <lambda_ae742caa10f662c28703da3d2ea5e57e>, *P<lambda_ae742caa10f662c28703da3d2ea5e57e>;

struct <lambda_ae742caa10f662c28703da3d2ea5e57e> { /* PlaceHolder Structure */
};

typedef struct <lambda_af42a3ee9806e9a7305d451646e05244> <lambda_af42a3ee9806e9a7305d451646e05244>, *P<lambda_af42a3ee9806e9a7305d451646e05244>;

struct <lambda_af42a3ee9806e9a7305d451646e05244> { /* PlaceHolder Structure */
};

typedef struct <lambda_b57350f2640456a0859d250846f69caf> <lambda_b57350f2640456a0859d250846f69caf>, *P<lambda_b57350f2640456a0859d250846f69caf>;

struct <lambda_b57350f2640456a0859d250846f69caf> { /* PlaceHolder Structure */
};

typedef struct <lambda_b8d4b9c228a6ecc3f80208dbb4b4a104> <lambda_b8d4b9c228a6ecc3f80208dbb4b4a104>, *P<lambda_b8d4b9c228a6ecc3f80208dbb4b4a104>;

struct <lambda_b8d4b9c228a6ecc3f80208dbb4b4a104> { /* PlaceHolder Structure */
};

typedef struct <lambda_b939e5933951b38cfbce0ac7ba09f070> <lambda_b939e5933951b38cfbce0ac7ba09f070>, *P<lambda_b939e5933951b38cfbce0ac7ba09f070>;

struct <lambda_b939e5933951b38cfbce0ac7ba09f070> { /* PlaceHolder Structure */
};

typedef struct <lambda_be20789b7a146653eab82509ec35b419> <lambda_be20789b7a146653eab82509ec35b419>, *P<lambda_be20789b7a146653eab82509ec35b419>;

struct <lambda_be20789b7a146653eab82509ec35b419> { /* PlaceHolder Structure */
};

typedef struct <lambda_c2ffc0b7726aa6be21d5f0026187e748> <lambda_c2ffc0b7726aa6be21d5f0026187e748>, *P<lambda_c2ffc0b7726aa6be21d5f0026187e748>;

struct <lambda_c2ffc0b7726aa6be21d5f0026187e748> { /* PlaceHolder Structure */
};

typedef struct <lambda_cbab9ec6f41b0180b23cc171c22676b0> <lambda_cbab9ec6f41b0180b23cc171c22676b0>, *P<lambda_cbab9ec6f41b0180b23cc171c22676b0>;

struct <lambda_cbab9ec6f41b0180b23cc171c22676b0> { /* PlaceHolder Structure */
};

typedef struct <lambda_cc9a5ba8a5d8428b9634eab82665e5dc> <lambda_cc9a5ba8a5d8428b9634eab82665e5dc>, *P<lambda_cc9a5ba8a5d8428b9634eab82665e5dc>;

struct <lambda_cc9a5ba8a5d8428b9634eab82665e5dc> { /* PlaceHolder Structure */
};

typedef struct <lambda_cd08b5d6af4937fe54fc07d0c9bf6b37> <lambda_cd08b5d6af4937fe54fc07d0c9bf6b37>, *P<lambda_cd08b5d6af4937fe54fc07d0c9bf6b37>;

struct <lambda_cd08b5d6af4937fe54fc07d0c9bf6b37> { /* PlaceHolder Structure */
};

typedef struct <lambda_ceb1ee4838e85a9d631eb091e2fbe199> <lambda_ceb1ee4838e85a9d631eb091e2fbe199>, *P<lambda_ceb1ee4838e85a9d631eb091e2fbe199>;

struct <lambda_ceb1ee4838e85a9d631eb091e2fbe199> { /* PlaceHolder Structure */
};

typedef struct <lambda_d734a73e0f649ebd9d9b0eca0b8ca86a> <lambda_d734a73e0f649ebd9d9b0eca0b8ca86a>, *P<lambda_d734a73e0f649ebd9d9b0eca0b8ca86a>;

struct <lambda_d734a73e0f649ebd9d9b0eca0b8ca86a> { /* PlaceHolder Structure */
};

typedef struct <lambda_da44e0f8b0f19ba52fefafb335991732> <lambda_da44e0f8b0f19ba52fefafb335991732>, *P<lambda_da44e0f8b0f19ba52fefafb335991732>;

struct <lambda_da44e0f8b0f19ba52fefafb335991732> { /* PlaceHolder Structure */
};

typedef struct <lambda_df226acf18ffe7c576684f1d3093a96e> <lambda_df226acf18ffe7c576684f1d3093a96e>, *P<lambda_df226acf18ffe7c576684f1d3093a96e>;

struct <lambda_df226acf18ffe7c576684f1d3093a96e> { /* PlaceHolder Structure */
};

typedef struct <lambda_e128a58a467199df1f46ac2193393add> <lambda_e128a58a467199df1f46ac2193393add>, *P<lambda_e128a58a467199df1f46ac2193393add>;

struct <lambda_e128a58a467199df1f46ac2193393add> { /* PlaceHolder Structure */
};

typedef struct <lambda_e25ca0880e6ef98be67edffd8c599615> <lambda_e25ca0880e6ef98be67edffd8c599615>, *P<lambda_e25ca0880e6ef98be67edffd8c599615>;

struct <lambda_e25ca0880e6ef98be67edffd8c599615> { /* PlaceHolder Structure */
};

typedef struct <lambda_e5124f882df8998aaf41531e079ba474> <lambda_e5124f882df8998aaf41531e079ba474>, *P<lambda_e5124f882df8998aaf41531e079ba474>;

struct <lambda_e5124f882df8998aaf41531e079ba474> { /* PlaceHolder Structure */
};

typedef struct <lambda_ebab98244f73a74f49db879bf13fa982> <lambda_ebab98244f73a74f49db879bf13fa982>, *P<lambda_ebab98244f73a74f49db879bf13fa982>;

struct <lambda_ebab98244f73a74f49db879bf13fa982> { /* PlaceHolder Structure */
};

typedef struct <lambda_eed5e4f92b5b7d55fa22c48c484aaa54> <lambda_eed5e4f92b5b7d55fa22c48c484aaa54>, *P<lambda_eed5e4f92b5b7d55fa22c48c484aaa54>;

struct <lambda_eed5e4f92b5b7d55fa22c48c484aaa54> { /* PlaceHolder Structure */
};

typedef struct <lambda_f01deac0a8d65d6e0411edf7e0af5775> <lambda_f01deac0a8d65d6e0411edf7e0af5775>, *P<lambda_f01deac0a8d65d6e0411edf7e0af5775>;

struct <lambda_f01deac0a8d65d6e0411edf7e0af5775> { /* PlaceHolder Structure */
};

typedef struct <lambda_f03950bc5685219e0bcd2087efbe011e> <lambda_f03950bc5685219e0bcd2087efbe011e>, *P<lambda_f03950bc5685219e0bcd2087efbe011e>;

struct <lambda_f03950bc5685219e0bcd2087efbe011e> { /* PlaceHolder Structure */
};

typedef struct <lambda_f828341fbe69b7c0d4c527b01f22877f> <lambda_f828341fbe69b7c0d4c527b01f22877f>, *P<lambda_f828341fbe69b7c0d4c527b01f22877f>;

struct <lambda_f828341fbe69b7c0d4c527b01f22877f> { /* PlaceHolder Structure */
};

typedef struct <lambda_fb385d3da700c9147fc39e65dd577a8c> <lambda_fb385d3da700c9147fc39e65dd577a8c>, *P<lambda_fb385d3da700c9147fc39e65dd577a8c>;

struct <lambda_fb385d3da700c9147fc39e65dd577a8c> { /* PlaceHolder Structure */
};

typedef struct <lambda_ffabc152e504b53d7492b9889b10c020> <lambda_ffabc152e504b53d7492b9889b10c020>, *P<lambda_ffabc152e504b53d7492b9889b10c020>;

struct <lambda_ffabc152e504b53d7492b9889b10c020> { /* PlaceHolder Structure */
};

typedef enum __acrt_fenv_abstract_control {
} __acrt_fenv_abstract_control;

typedef enum __acrt_fenv_machine_sse_control {
} __acrt_fenv_machine_sse_control;

typedef enum __acrt_fenv_machine_sse_status {
} __acrt_fenv_machine_sse_status;

typedef enum __acrt_fenv_machine_x87_control {
} __acrt_fenv_machine_x87_control;

typedef enum __acrt_fenv_machine_x87_status {
} __acrt_fenv_machine_x87_status;

typedef enum __acrt_fp_class {
} __acrt_fp_class;

typedef enum __acrt_lock_id {
} __acrt_lock_id;

typedef struct __acrt_ptd __acrt_ptd, *P__acrt_ptd;

struct __acrt_ptd { /* PlaceHolder Structure */
};

typedef enum __acrt_rounding_mode {
} __acrt_rounding_mode;

typedef struct __acrt_thread_parameter __acrt_thread_parameter, *P__acrt_thread_parameter;

struct __acrt_thread_parameter { /* PlaceHolder Structure */
};

typedef struct __crt_deferred_errno_cache __crt_deferred_errno_cache, *P__crt_deferred_errno_cache;

struct __crt_deferred_errno_cache { /* PlaceHolder Structure */
};

typedef struct __crt_lc_time_data __crt_lc_time_data, *P__crt_lc_time_data;

struct __crt_lc_time_data { /* PlaceHolder Structure */
};

typedef struct __crt_locale_data __crt_locale_data, *P__crt_locale_data;

struct __crt_locale_data { /* PlaceHolder Structure */
};

typedef struct __crt_locale_pointers __crt_locale_pointers, *P__crt_locale_pointers;

struct __crt_locale_pointers { /* PlaceHolder Structure */
};

typedef struct __crt_multibyte_data __crt_multibyte_data, *P__crt_multibyte_data;

struct __crt_multibyte_data { /* PlaceHolder Structure */
};

typedef struct __crt_qualified_locale_data __crt_qualified_locale_data, *P__crt_qualified_locale_data;

struct __crt_qualified_locale_data { /* PlaceHolder Structure */
};

typedef struct __crt_seh_guarded_call<int> __crt_seh_guarded_call<int>, *P__crt_seh_guarded_call<int>;

struct __crt_seh_guarded_call<int> { /* PlaceHolder Structure */
};

typedef struct __crt_seh_guarded_call<unsigned_short> __crt_seh_guarded_call<unsigned_short>, *P__crt_seh_guarded_call<unsigned_short>;

struct __crt_seh_guarded_call<unsigned_short> { /* PlaceHolder Structure */
};

typedef struct __crt_seh_guarded_call<void> __crt_seh_guarded_call<void>, *P__crt_seh_guarded_call<void>;

struct __crt_seh_guarded_call<void> { /* PlaceHolder Structure */
};

typedef struct __crt_seh_guarded_call<void_(__cdecl*)(int)> __crt_seh_guarded_call<void_(__cdecl*)(int)>, *P__crt_seh_guarded_call<void_(__cdecl*)(int)>;

struct __crt_seh_guarded_call<void_(__cdecl*)(int)> { /* PlaceHolder Structure */
};

typedef struct __crt_signal_action_t __crt_signal_action_t, *P__crt_signal_action_t;

struct __crt_signal_action_t { /* PlaceHolder Structure */
};

typedef struct __crt_stdio_stream __crt_stdio_stream, *P__crt_stdio_stream;

struct __crt_stdio_stream { /* PlaceHolder Structure */
};

typedef struct __crt_unique_heap_ptr<struct___acrt_thread_parameter,struct_`anonymous_namespace'::thread_parameter_free_policy> __crt_unique_heap_ptr<struct___acrt_thread_parameter,struct_`anonymous_namespace'::thread_parameter_free_policy>, *P__crt_unique_heap_ptr<struct___acrt_thread_parameter,struct_`anonymous_namespace'::thread_parameter_free_policy>;

struct __crt_unique_heap_ptr<struct___acrt_thread_parameter,struct_`anonymous_namespace'::thread_parameter_free_policy> { /* PlaceHolder Structure */
};

typedef struct __crt_unique_heap_ptr<unsigned_char,struct___crt_internal_free_policy> __crt_unique_heap_ptr<unsigned_char,struct___crt_internal_free_policy>, *P__crt_unique_heap_ptr<unsigned_char,struct___crt_internal_free_policy>;

struct __crt_unique_heap_ptr<unsigned_char,struct___crt_internal_free_policy> { /* PlaceHolder Structure */
};

typedef struct __crt_win32_buffer<char,struct___crt_win32_buffer_internal_dynamic_resizing> __crt_win32_buffer<char,struct___crt_win32_buffer_internal_dynamic_resizing>, *P__crt_win32_buffer<char,struct___crt_win32_buffer_internal_dynamic_resizing>;

struct __crt_win32_buffer<char,struct___crt_win32_buffer_internal_dynamic_resizing> { /* PlaceHolder Structure */
};

typedef struct __crt_win32_buffer<wchar_t,struct___crt_win32_buffer_internal_dynamic_resizing> __crt_win32_buffer<wchar_t,struct___crt_win32_buffer_internal_dynamic_resizing>, *P__crt_win32_buffer<wchar_t,struct___crt_win32_buffer_internal_dynamic_resizing>;

struct __crt_win32_buffer<wchar_t,struct___crt_win32_buffer_internal_dynamic_resizing> { /* PlaceHolder Structure */
};

typedef struct __crt_win32_buffer_empty_debug_info __crt_win32_buffer_empty_debug_info, *P__crt_win32_buffer_empty_debug_info;

struct __crt_win32_buffer_empty_debug_info { /* PlaceHolder Structure */
};

typedef struct __vcrt_ptd __vcrt_ptd, *P__vcrt_ptd;

struct __vcrt_ptd { /* PlaceHolder Structure */
};

typedef struct _exception _exception, *P_exception;

struct _exception { /* PlaceHolder Structure */
};

typedef enum _EXCEPTION_DISPOSITION {
} _EXCEPTION_DISPOSITION;

typedef struct _expandlocale_locale_name_cache _expandlocale_locale_name_cache, *P_expandlocale_locale_name_cache;

struct _expandlocale_locale_name_cache { /* PlaceHolder Structure */
};

typedef struct _HeapManager _HeapManager, *P_HeapManager;

struct _HeapManager { /* PlaceHolder Structure */
};

typedef struct _IMAGE_THUNK_DATA32 _IMAGE_THUNK_DATA32, *P_IMAGE_THUNK_DATA32;

struct _IMAGE_THUNK_DATA32 { /* PlaceHolder Structure */
};

typedef struct _nlsversioninfo _nlsversioninfo, *P_nlsversioninfo;

struct _nlsversioninfo { /* PlaceHolder Structure */
};

typedef struct _RC_CONFIG _RC_CONFIG, *P_RC_CONFIG;

struct _RC_CONFIG { /* PlaceHolder Structure */
};

typedef struct _s_CatchableType _s_CatchableType, *P_s_CatchableType;

struct _s_CatchableType { /* PlaceHolder Structure */
};

typedef enum AppPolicyProcessTerminationMethod {
} AppPolicyProcessTerminationMethod;

typedef enum AppPolicyWindowingModel {
} AppPolicyWindowingModel;

typedef struct charNode charNode, *PcharNode;

struct charNode { /* PlaceHolder Structure */
};

typedef struct DName DName, *PDName;

struct DName { /* PlaceHolder Structure */
};

typedef struct DNameNode DNameNode, *PDNameNode;

struct DNameNode { /* PlaceHolder Structure */
};

typedef enum DNameStatus {
} DNameStatus;

typedef struct DNameStatusNode DNameStatusNode, *PDNameStatusNode;

struct DNameStatusNode { /* PlaceHolder Structure */
};

typedef struct EHExceptionRecord EHExceptionRecord, *PEHExceptionRecord;

struct EHExceptionRecord { /* PlaceHolder Structure */
};

typedef struct EHRegistrationNode EHRegistrationNode, *PEHRegistrationNode;

struct EHRegistrationNode { /* PlaceHolder Structure */
};

typedef struct pcharNode pcharNode, *PpcharNode;

struct pcharNode { /* PlaceHolder Structure */
};

typedef struct pDNameNode pDNameNode, *PpDNameNode;

struct pDNameNode { /* PlaceHolder Structure */
};

typedef enum process_end_policy {
} process_end_policy;

typedef struct Replicator Replicator, *PReplicator;

struct Replicator { /* PlaceHolder Structure */
};

typedef enum SLD_STATUS {
} SLD_STATUS;

typedef struct StringLifeSelector<1> StringLifeSelector<1>, *PStringLifeSelector<1>;

struct StringLifeSelector<1> { /* PlaceHolder Structure */
};

typedef struct StringLiteral StringLiteral, *PStringLiteral;

struct StringLiteral { /* PlaceHolder Structure */
};

typedef enum Tokens {
} Tokens;

typedef struct UnDecorator UnDecorator, *PUnDecorator;

struct UnDecorator { /* PlaceHolder Structure */
};

typedef struct void_(__cdecl**)(int) void_(__cdecl**)(int), *Pvoid_(__cdecl**)(int);

struct void_(__cdecl**)(int) { /* PlaceHolder Structure */
};


/* WARNING! conflicting data type names: /Demangler/wchar_t - /wchar_t */

typedef enum windowing_model_policy {
} windowing_model_policy;

typedef struct IMAGE_DOS_HEADER IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

struct IMAGE_DOS_HEADER {
    char e_magic[2]; /* Magic number */
    word e_cblp; /* Bytes of last page */
    word e_cp; /* Pages in file */
    word e_crlc; /* Relocations */
    word e_cparhdr; /* Size of header in paragraphs */
    word e_minalloc; /* Minimum extra paragraphs needed */
    word e_maxalloc; /* Maximum extra paragraphs needed */
    word e_ss; /* Initial (relative) SS value */
    word e_sp; /* Initial SP value */
    word e_csum; /* Checksum */
    word e_ip; /* Initial IP value */
    word e_cs; /* Initial (relative) CS value */
    word e_lfarlc; /* File address of relocation table */
    word e_ovno; /* Overlay number */
    word e_res[4][4]; /* Reserved words */
    word e_oemid; /* OEM identifier (for e_oeminfo) */
    word e_oeminfo; /* OEM information; e_oemid specific */
    word e_res2[10][10]; /* Reserved words */
    dword e_lfanew; /* File address of new exe header */
    byte e_program[64]; /* Actual DOS program */
};

typedef int __ehstate_t;

typedef struct PMD PMD, *PPMD;

struct PMD {
    ptrdiff_t mdisp;
    ptrdiff_t pdisp;
    ptrdiff_t vdisp;
};

typedef struct _CONTEXT _CONTEXT, *P_CONTEXT;

typedef struct _FLOATING_SAVE_AREA _FLOATING_SAVE_AREA, *P_FLOATING_SAVE_AREA;

typedef struct _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;

struct _FLOATING_SAVE_AREA {
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
};

struct _CONTEXT {
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];
};

typedef struct _EXCEPTION_POINTERS _EXCEPTION_POINTERS, *P_EXCEPTION_POINTERS;

typedef struct _EXCEPTION_RECORD _EXCEPTION_RECORD, *P_EXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;

typedef EXCEPTION_RECORD * PEXCEPTION_RECORD;

typedef struct _CONTEXT CONTEXT;

typedef CONTEXT * PCONTEXT;

typedef void * PVOID;

struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD * ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
};

struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
};

typedef struct _GUID _GUID, *P_GUID;

struct _GUID {
    ulong Data1;
    ushort Data2;
    ushort Data3;
    uchar Data4[8];
};


/* WARNING! conflicting data type names: /guiddef.h/GUID - /GUID */

typedef GUID CLSID;

typedef GUID IID;

typedef struct _iobuf _iobuf, *P_iobuf;

struct _iobuf {
    char * _ptr;
    int _cnt;
    char * _base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char * _tmpfname;
};

typedef struct _iobuf FILE;

typedef union _union_2260 _union_2260, *P_union_2260;

typedef struct HBITMAP__ HBITMAP__, *PHBITMAP__;

typedef struct HBITMAP__ * HBITMAP;

typedef void * HMETAFILEPICT;

typedef struct HENHMETAFILE__ HENHMETAFILE__, *PHENHMETAFILE__;

typedef struct HENHMETAFILE__ * HENHMETAFILE;

typedef void * HANDLE;

typedef HANDLE HGLOBAL;

typedef WCHAR OLECHAR;

typedef OLECHAR * LPOLESTR;

typedef struct IStream IStream, *PIStream;

typedef struct IStorage IStorage, *PIStorage;

typedef struct IStreamVtbl IStreamVtbl, *PIStreamVtbl;

typedef long HRESULT;

typedef DWORD ULONG;

typedef union _LARGE_INTEGER _LARGE_INTEGER, *P_LARGE_INTEGER;

typedef union _LARGE_INTEGER LARGE_INTEGER;

typedef union _ULARGE_INTEGER _ULARGE_INTEGER, *P_ULARGE_INTEGER;

typedef union _ULARGE_INTEGER ULARGE_INTEGER;

typedef struct tagSTATSTG tagSTATSTG, *PtagSTATSTG;

typedef struct tagSTATSTG STATSTG;

typedef struct IStorageVtbl IStorageVtbl, *PIStorageVtbl;

typedef LPOLESTR * SNB;

typedef struct IEnumSTATSTG IEnumSTATSTG, *PIEnumSTATSTG;

typedef struct _FILETIME _FILETIME, *P_FILETIME;

typedef struct _FILETIME FILETIME;

typedef struct _struct_19 _struct_19, *P_struct_19;

typedef struct _struct_20 _struct_20, *P_struct_20;

typedef double LONGLONG;

typedef struct _struct_22 _struct_22, *P_struct_22;

typedef struct _struct_23 _struct_23, *P_struct_23;

typedef double ULONGLONG;

typedef struct IEnumSTATSTGVtbl IEnumSTATSTGVtbl, *PIEnumSTATSTGVtbl;

typedef long LONG;

struct IStreamVtbl {
    HRESULT (* QueryInterface)(struct IStream *, IID *, void * *);
    ULONG (* AddRef)(struct IStream *);
    ULONG (* Release)(struct IStream *);
    HRESULT (* Read)(struct IStream *, void *, ULONG, ULONG *);
    HRESULT (* Write)(struct IStream *, void *, ULONG, ULONG *);
    HRESULT (* Seek)(struct IStream *, LARGE_INTEGER, DWORD, ULARGE_INTEGER *);
    HRESULT (* SetSize)(struct IStream *, ULARGE_INTEGER);
    HRESULT (* CopyTo)(struct IStream *, struct IStream *, ULARGE_INTEGER, ULARGE_INTEGER *, ULARGE_INTEGER *);
    HRESULT (* Commit)(struct IStream *, DWORD);
    HRESULT (* Revert)(struct IStream *);
    HRESULT (* LockRegion)(struct IStream *, ULARGE_INTEGER, ULARGE_INTEGER, DWORD);
    HRESULT (* UnlockRegion)(struct IStream *, ULARGE_INTEGER, ULARGE_INTEGER, DWORD);
    HRESULT (* Stat)(struct IStream *, STATSTG *, DWORD);
    HRESULT (* Clone)(struct IStream *, struct IStream * *);
};

union _union_2260 {
    HBITMAP hBitmap;
    HMETAFILEPICT hMetaFilePict;
    HENHMETAFILE hEnhMetaFile;
    HGLOBAL hGlobal;
    LPOLESTR lpszFileName;
    struct IStream * pstm;
    struct IStorage * pstg;
};

struct IStorageVtbl {
    HRESULT (* QueryInterface)(struct IStorage *, IID *, void * *);
    ULONG (* AddRef)(struct IStorage *);
    ULONG (* Release)(struct IStorage *);
    HRESULT (* CreateStream)(struct IStorage *, OLECHAR *, DWORD, DWORD, DWORD, struct IStream * *);
    HRESULT (* OpenStream)(struct IStorage *, OLECHAR *, void *, DWORD, DWORD, struct IStream * *);
    HRESULT (* CreateStorage)(struct IStorage *, OLECHAR *, DWORD, DWORD, DWORD, struct IStorage * *);
    HRESULT (* OpenStorage)(struct IStorage *, OLECHAR *, struct IStorage *, DWORD, SNB, DWORD, struct IStorage * *);
    HRESULT (* CopyTo)(struct IStorage *, DWORD, IID *, SNB, struct IStorage *);
    HRESULT (* MoveElementTo)(struct IStorage *, OLECHAR *, struct IStorage *, OLECHAR *, DWORD);
    HRESULT (* Commit)(struct IStorage *, DWORD);
    HRESULT (* Revert)(struct IStorage *);
    HRESULT (* EnumElements)(struct IStorage *, DWORD, void *, DWORD, struct IEnumSTATSTG * *);
    HRESULT (* DestroyElement)(struct IStorage *, OLECHAR *);
    HRESULT (* RenameElement)(struct IStorage *, OLECHAR *, OLECHAR *);
    HRESULT (* SetElementTimes)(struct IStorage *, OLECHAR *, FILETIME *, FILETIME *, FILETIME *);
    HRESULT (* SetClass)(struct IStorage *, IID *);
    HRESULT (* SetStateBits)(struct IStorage *, DWORD, DWORD);
    HRESULT (* Stat)(struct IStorage *, STATSTG *, DWORD);
};

struct IStream {
    struct IStreamVtbl * lpVtbl;
};

struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
};

struct _struct_20 {
    DWORD LowPart;
    LONG HighPart;
};

struct _struct_19 {
    DWORD LowPart;
    LONG HighPart;
};

union _LARGE_INTEGER {
    struct _struct_19 s;
    struct _struct_20 u;
    LONGLONG QuadPart;
};

struct IStorage {
    struct IStorageVtbl * lpVtbl;
};

struct IEnumSTATSTGVtbl {
    HRESULT (* QueryInterface)(struct IEnumSTATSTG *, IID *, void * *);
    ULONG (* AddRef)(struct IEnumSTATSTG *);
    ULONG (* Release)(struct IEnumSTATSTG *);
    HRESULT (* Next)(struct IEnumSTATSTG *, ULONG, STATSTG *, ULONG *);
    HRESULT (* Skip)(struct IEnumSTATSTG *, ULONG);
    HRESULT (* Reset)(struct IEnumSTATSTG *);
    HRESULT (* Clone)(struct IEnumSTATSTG *, struct IEnumSTATSTG * *);
};

struct HBITMAP__ {
    int unused;
};

struct IEnumSTATSTG {
    struct IEnumSTATSTGVtbl * lpVtbl;
};

struct _struct_23 {
    DWORD LowPart;
    DWORD HighPart;
};

struct _struct_22 {
    DWORD LowPart;
    DWORD HighPart;
};

union _ULARGE_INTEGER {
    struct _struct_22 s;
    struct _struct_23 u;
    ULONGLONG QuadPart;
};

struct HENHMETAFILE__ {
    int unused;
};

struct tagSTATSTG {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
};

typedef struct tagBIND_OPTS tagBIND_OPTS, *PtagBIND_OPTS;

typedef struct tagBIND_OPTS BIND_OPTS;

struct tagBIND_OPTS {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
};

typedef struct tagDVTARGETDEVICE tagDVTARGETDEVICE, *PtagDVTARGETDEVICE;

typedef struct tagDVTARGETDEVICE DVTARGETDEVICE;

struct tagDVTARGETDEVICE {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE tdData[1];
};

typedef struct tagFORMATETC tagFORMATETC, *PtagFORMATETC;

typedef struct tagFORMATETC FORMATETC;

typedef WORD CLIPFORMAT;

struct tagFORMATETC {
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE * ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
};

typedef struct IAdviseSink IAdviseSink, *PIAdviseSink;

typedef struct IAdviseSinkVtbl IAdviseSinkVtbl, *PIAdviseSinkVtbl;

typedef struct tagSTGMEDIUM tagSTGMEDIUM, *PtagSTGMEDIUM;

typedef struct tagSTGMEDIUM uSTGMEDIUM;

typedef uSTGMEDIUM STGMEDIUM;

typedef struct IMoniker IMoniker, *PIMoniker;

typedef struct IUnknown IUnknown, *PIUnknown;

typedef struct IMonikerVtbl IMonikerVtbl, *PIMonikerVtbl;

typedef int BOOL;

typedef struct IBindCtx IBindCtx, *PIBindCtx;

typedef struct IEnumMoniker IEnumMoniker, *PIEnumMoniker;

typedef struct IUnknownVtbl IUnknownVtbl, *PIUnknownVtbl;

typedef struct IBindCtxVtbl IBindCtxVtbl, *PIBindCtxVtbl;

typedef struct IRunningObjectTable IRunningObjectTable, *PIRunningObjectTable;

typedef struct IEnumString IEnumString, *PIEnumString;

typedef struct IEnumMonikerVtbl IEnumMonikerVtbl, *PIEnumMonikerVtbl;

typedef struct IRunningObjectTableVtbl IRunningObjectTableVtbl, *PIRunningObjectTableVtbl;

typedef struct IEnumStringVtbl IEnumStringVtbl, *PIEnumStringVtbl;

struct IAdviseSink {
    struct IAdviseSinkVtbl * lpVtbl;
};

struct IAdviseSinkVtbl {
    HRESULT (* QueryInterface)(struct IAdviseSink *, IID *, void * *);
    ULONG (* AddRef)(struct IAdviseSink *);
    ULONG (* Release)(struct IAdviseSink *);
    void (* OnDataChange)(struct IAdviseSink *, FORMATETC *, STGMEDIUM *);
    void (* OnViewChange)(struct IAdviseSink *, DWORD, LONG);
    void (* OnRename)(struct IAdviseSink *, struct IMoniker *);
    void (* OnSave)(struct IAdviseSink *);
    void (* OnClose)(struct IAdviseSink *);
};

struct IEnumStringVtbl {
    HRESULT (* QueryInterface)(struct IEnumString *, IID *, void * *);
    ULONG (* AddRef)(struct IEnumString *);
    ULONG (* Release)(struct IEnumString *);
    HRESULT (* Next)(struct IEnumString *, ULONG, LPOLESTR *, ULONG *);
    HRESULT (* Skip)(struct IEnumString *, ULONG);
    HRESULT (* Reset)(struct IEnumString *);
    HRESULT (* Clone)(struct IEnumString *, struct IEnumString * *);
};

struct IMonikerVtbl {
    HRESULT (* QueryInterface)(struct IMoniker *, IID *, void * *);
    ULONG (* AddRef)(struct IMoniker *);
    ULONG (* Release)(struct IMoniker *);
    HRESULT (* GetClassID)(struct IMoniker *, CLSID *);
    HRESULT (* IsDirty)(struct IMoniker *);
    HRESULT (* Load)(struct IMoniker *, struct IStream *);
    HRESULT (* Save)(struct IMoniker *, struct IStream *, BOOL);
    HRESULT (* GetSizeMax)(struct IMoniker *, ULARGE_INTEGER *);
    HRESULT (* BindToObject)(struct IMoniker *, struct IBindCtx *, struct IMoniker *, IID *, void * *);
    HRESULT (* BindToStorage)(struct IMoniker *, struct IBindCtx *, struct IMoniker *, IID *, void * *);
    HRESULT (* Reduce)(struct IMoniker *, struct IBindCtx *, DWORD, struct IMoniker * *, struct IMoniker * *);
    HRESULT (* ComposeWith)(struct IMoniker *, struct IMoniker *, BOOL, struct IMoniker * *);
    HRESULT (* Enum)(struct IMoniker *, BOOL, struct IEnumMoniker * *);
    HRESULT (* IsEqual)(struct IMoniker *, struct IMoniker *);
    HRESULT (* Hash)(struct IMoniker *, DWORD *);
    HRESULT (* IsRunning)(struct IMoniker *, struct IBindCtx *, struct IMoniker *, struct IMoniker *);
    HRESULT (* GetTimeOfLastChange)(struct IMoniker *, struct IBindCtx *, struct IMoniker *, FILETIME *);
    HRESULT (* Inverse)(struct IMoniker *, struct IMoniker * *);
    HRESULT (* CommonPrefixWith)(struct IMoniker *, struct IMoniker *, struct IMoniker * *);
    HRESULT (* RelativePathTo)(struct IMoniker *, struct IMoniker *, struct IMoniker * *);
    HRESULT (* GetDisplayName)(struct IMoniker *, struct IBindCtx *, struct IMoniker *, LPOLESTR *);
    HRESULT (* ParseDisplayName)(struct IMoniker *, struct IBindCtx *, struct IMoniker *, LPOLESTR, ULONG *, struct IMoniker * *);
    HRESULT (* IsSystemMoniker)(struct IMoniker *, DWORD *);
};

struct IMoniker {
    struct IMonikerVtbl * lpVtbl;
};

struct IEnumString {
    struct IEnumStringVtbl * lpVtbl;
};

struct IEnumMonikerVtbl {
    HRESULT (* QueryInterface)(struct IEnumMoniker *, IID *, void * *);
    ULONG (* AddRef)(struct IEnumMoniker *);
    ULONG (* Release)(struct IEnumMoniker *);
    HRESULT (* Next)(struct IEnumMoniker *, ULONG, struct IMoniker * *, ULONG *);
    HRESULT (* Skip)(struct IEnumMoniker *, ULONG);
    HRESULT (* Reset)(struct IEnumMoniker *);
    HRESULT (* Clone)(struct IEnumMoniker *, struct IEnumMoniker * *);
};

struct tagSTGMEDIUM {
    DWORD tymed;
    union _union_2260 u;
    struct IUnknown * pUnkForRelease;
};

struct IRunningObjectTable {
    struct IRunningObjectTableVtbl * lpVtbl;
};

struct IUnknownVtbl {
    HRESULT (* QueryInterface)(struct IUnknown *, IID *, void * *);
    ULONG (* AddRef)(struct IUnknown *);
    ULONG (* Release)(struct IUnknown *);
};

struct IUnknown {
    struct IUnknownVtbl * lpVtbl;
};

struct IBindCtx {
    struct IBindCtxVtbl * lpVtbl;
};

struct IEnumMoniker {
    struct IEnumMonikerVtbl * lpVtbl;
};

struct IBindCtxVtbl {
    HRESULT (* QueryInterface)(struct IBindCtx *, IID *, void * *);
    ULONG (* AddRef)(struct IBindCtx *);
    ULONG (* Release)(struct IBindCtx *);
    HRESULT (* RegisterObjectBound)(struct IBindCtx *, struct IUnknown *);
    HRESULT (* RevokeObjectBound)(struct IBindCtx *, struct IUnknown *);
    HRESULT (* ReleaseBoundObjects)(struct IBindCtx *);
    HRESULT (* SetBindOptions)(struct IBindCtx *, BIND_OPTS *);
    HRESULT (* GetBindOptions)(struct IBindCtx *, BIND_OPTS *);
    HRESULT (* GetRunningObjectTable)(struct IBindCtx *, struct IRunningObjectTable * *);
    HRESULT (* RegisterObjectParam)(struct IBindCtx *, LPOLESTR, struct IUnknown *);
    HRESULT (* GetObjectParam)(struct IBindCtx *, LPOLESTR, struct IUnknown * *);
    HRESULT (* EnumObjectParam)(struct IBindCtx *, struct IEnumString * *);
    HRESULT (* RevokeObjectParam)(struct IBindCtx *, LPOLESTR);
};

struct IRunningObjectTableVtbl {
    HRESULT (* QueryInterface)(struct IRunningObjectTable *, IID *, void * *);
    ULONG (* AddRef)(struct IRunningObjectTable *);
    ULONG (* Release)(struct IRunningObjectTable *);
    HRESULT (* Register)(struct IRunningObjectTable *, DWORD, struct IUnknown *, struct IMoniker *, DWORD *);
    HRESULT (* Revoke)(struct IRunningObjectTable *, DWORD);
    HRESULT (* IsRunning)(struct IRunningObjectTable *, struct IMoniker *);
    HRESULT (* GetObjectA)(struct IRunningObjectTable *, struct IMoniker *, struct IUnknown * *);
    HRESULT (* NoteChangeTime)(struct IRunningObjectTable *, DWORD, FILETIME *);
    HRESULT (* GetTimeOfLastChange)(struct IRunningObjectTable *, struct IMoniker *, FILETIME *);
    HRESULT (* EnumRunning)(struct IRunningObjectTable *, struct IEnumMoniker * *);
};

typedef struct IDataObject IDataObject, *PIDataObject;

typedef struct IDataObjectVtbl IDataObjectVtbl, *PIDataObjectVtbl;

typedef struct IEnumFORMATETC IEnumFORMATETC, *PIEnumFORMATETC;

typedef struct IEnumSTATDATA IEnumSTATDATA, *PIEnumSTATDATA;

typedef struct IEnumFORMATETCVtbl IEnumFORMATETCVtbl, *PIEnumFORMATETCVtbl;

typedef struct IEnumSTATDATAVtbl IEnumSTATDATAVtbl, *PIEnumSTATDATAVtbl;

typedef struct tagSTATDATA tagSTATDATA, *PtagSTATDATA;

typedef struct tagSTATDATA STATDATA;

struct IDataObject {
    struct IDataObjectVtbl * lpVtbl;
};

struct IEnumSTATDATA {
    struct IEnumSTATDATAVtbl * lpVtbl;
};

struct IDataObjectVtbl {
    HRESULT (* QueryInterface)(struct IDataObject *, IID *, void * *);
    ULONG (* AddRef)(struct IDataObject *);
    ULONG (* Release)(struct IDataObject *);
    HRESULT (* GetData)(struct IDataObject *, FORMATETC *, STGMEDIUM *);
    HRESULT (* GetDataHere)(struct IDataObject *, FORMATETC *, STGMEDIUM *);
    HRESULT (* QueryGetData)(struct IDataObject *, FORMATETC *);
    HRESULT (* GetCanonicalFormatEtc)(struct IDataObject *, FORMATETC *, FORMATETC *);
    HRESULT (* SetData)(struct IDataObject *, FORMATETC *, STGMEDIUM *, BOOL);
    HRESULT (* EnumFormatEtc)(struct IDataObject *, DWORD, struct IEnumFORMATETC * *);
    HRESULT (* DAdvise)(struct IDataObject *, FORMATETC *, DWORD, struct IAdviseSink *, DWORD *);
    HRESULT (* DUnadvise)(struct IDataObject *, DWORD);
    HRESULT (* EnumDAdvise)(struct IDataObject *, struct IEnumSTATDATA * *);
};

struct tagSTATDATA {
    FORMATETC formatetc;
    DWORD advf;
    struct IAdviseSink * pAdvSink;
    DWORD dwConnection;
};

struct IEnumFORMATETC {
    struct IEnumFORMATETCVtbl * lpVtbl;
};

struct IEnumSTATDATAVtbl {
    HRESULT (* QueryInterface)(struct IEnumSTATDATA *, IID *, void * *);
    ULONG (* AddRef)(struct IEnumSTATDATA *);
    ULONG (* Release)(struct IEnumSTATDATA *);
    HRESULT (* Next)(struct IEnumSTATDATA *, ULONG, STATDATA *, ULONG *);
    HRESULT (* Skip)(struct IEnumSTATDATA *, ULONG);
    HRESULT (* Reset)(struct IEnumSTATDATA *);
    HRESULT (* Clone)(struct IEnumSTATDATA *, struct IEnumSTATDATA * *);
};

struct IEnumFORMATETCVtbl {
    HRESULT (* QueryInterface)(struct IEnumFORMATETC *, IID *, void * *);
    ULONG (* AddRef)(struct IEnumFORMATETC *);
    ULONG (* Release)(struct IEnumFORMATETC *);
    HRESULT (* Next)(struct IEnumFORMATETC *, ULONG, FORMATETC *, ULONG *);
    HRESULT (* Skip)(struct IEnumFORMATETC *, ULONG);
    HRESULT (* Reset)(struct IEnumFORMATETC *);
    HRESULT (* Clone)(struct IEnumFORMATETC *, struct IEnumFORMATETC * *);
};

typedef struct IDataObject * LPDATAOBJECT;

typedef struct IDropSource IDropSource, *PIDropSource;

typedef struct IDropSourceVtbl IDropSourceVtbl, *PIDropSourceVtbl;

struct IDropSourceVtbl {
    HRESULT (* QueryInterface)(struct IDropSource *, IID *, void * *);
    ULONG (* AddRef)(struct IDropSource *);
    ULONG (* Release)(struct IDropSource *);
    HRESULT (* QueryContinueDrag)(struct IDropSource *, BOOL, DWORD);
    HRESULT (* GiveFeedback)(struct IDropSource *, DWORD);
};

struct IDropSource {
    struct IDropSourceVtbl * lpVtbl;
};

typedef struct IDropSource * LPDROPSOURCE;

typedef struct DotNetPdbInfo DotNetPdbInfo, *PDotNetPdbInfo;

struct DotNetPdbInfo {
    char signature[4];
    GUID guid;
    dword age;
    char pdbname[12];
};

typedef struct IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

struct IMAGE_DATA_DIRECTORY {
    ImageBaseOffset32 VirtualAddress;
    dword Size;
};

typedef struct IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;

struct IMAGE_DEBUG_DIRECTORY {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    dword Type;
    dword SizeOfData;
    dword AddressOfRawData;
    dword PointerToRawData;
};

typedef struct IMAGE_FILE_HEADER IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

struct IMAGE_FILE_HEADER {
    word Machine; /* 332 */
    word NumberOfSections;
    dword TimeDateStamp;
    dword PointerToSymbolTable;
    dword NumberOfSymbols;
    word SizeOfOptionalHeader;
    word Characteristics;
};

typedef enum IMAGE_GUARD_FLAGS {
    IMAGE_GUARD_CF_INSTRUMENTED=256,
    IMAGE_GUARD_CFW_INSTRUMENTED=512,
    IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT=1024,
    IMAGE_GUARD_SECURITY_COOKIE_UNUSED=2048,
    IMAGE_GUARD_PROTECT_DELAYLOAD_IAT=4096,
    IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION=8192,
    IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT=16384,
    IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION=32768,
    IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT=65536,
    IMAGE_GUARD_RF_INSTRUMENTED=131072,
    IMAGE_GUARD_RF_ENABLE=262144,
    IMAGE_GUARD_RF_STRICT=524288,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_1=268435456,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_2=536870912,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_4=1073741824,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_8=2147483648
} IMAGE_GUARD_FLAGS;

typedef struct IMAGE_IMPORT_BY_NAME_14 IMAGE_IMPORT_BY_NAME_14, *PIMAGE_IMPORT_BY_NAME_14;

struct IMAGE_IMPORT_BY_NAME_14 {
    word Hint;
    char Name[14];
};

typedef struct IMAGE_IMPORT_BY_NAME_15 IMAGE_IMPORT_BY_NAME_15, *PIMAGE_IMPORT_BY_NAME_15;

struct IMAGE_IMPORT_BY_NAME_15 {
    word Hint;
    char Name[15];
};

typedef struct IMAGE_IMPORT_BY_NAME_16 IMAGE_IMPORT_BY_NAME_16, *PIMAGE_IMPORT_BY_NAME_16;

struct IMAGE_IMPORT_BY_NAME_16 {
    word Hint;
    char Name[16];
};

typedef struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;

struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    word Flags;
    word Catalog;
    dword CatalogOffset;
    dword Reserved;
};

typedef struct IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

struct IMAGE_LOAD_CONFIG_DIRECTORY32 {
    dword Size;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    dword GlobalFlagsClear;
    dword GlobalFlagsSet;
    dword CriticalSectionDefaultTimeout;
    dword DeCommitFreeBlockThreshold;
    dword DeCommitTotalFreeThreshold;
    pointer32 LockPrefixTable;
    dword MaximumAllocationSize;
    dword VirtualMemoryThreshold;
    dword ProcessHeapFlags;
    dword ProcessAffinityMask;
    word CsdVersion;
    word DependentLoadFlags;
    pointer32 EditList;
    pointer32 SecurityCookie;
    pointer32 SEHandlerTable;
    dword SEHandlerCount;
    pointer32 GuardCFCCheckFunctionPointer;
    pointer32 GuardCFDispatchFunctionPointer;
    pointer32 GuardCFFunctionTable;
    dword GuardCFFunctionCount;
    enum IMAGE_GUARD_FLAGS GuardFlags;
    struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    pointer32 GuardAddressTakenIatEntryTable;
    dword GuardAddressTakenIatEntryCount;
    pointer32 GuardLongJumpTargetTable;
    dword GuardLongJumpTargetCount;
    pointer32 DynamicValueRelocTable;
    pointer32 CHPEMetadataPointer;
    pointer32 GuardRFFailureRoutine;
    pointer32 GuardRFFailureRoutineFunctionPointer;
    dword DynamicValueRelocTableOffset;
    word DynamicValueRelocTableSection;
    word Reserved1;
    pointer32 GuardRFVerifyStackPointerFunctionPointer;
    dword HotPatchTableOffset;
    dword Reserved2;
    dword Reserved3;
};

typedef struct IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

struct IMAGE_OPTIONAL_HEADER32 {
    word Magic;
    byte MajorLinkerVersion;
    byte MinorLinkerVersion;
    dword SizeOfCode;
    dword SizeOfInitializedData;
    dword SizeOfUninitializedData;
    ImageBaseOffset32 AddressOfEntryPoint;
    ImageBaseOffset32 BaseOfCode;
    ImageBaseOffset32 BaseOfData;
    pointer32 ImageBase;
    dword SectionAlignment;
    dword FileAlignment;
    word MajorOperatingSystemVersion;
    word MinorOperatingSystemVersion;
    word MajorImageVersion;
    word MinorImageVersion;
    word MajorSubsystemVersion;
    word MinorSubsystemVersion;
    dword Win32VersionValue;
    dword SizeOfImage;
    dword SizeOfHeaders;
    dword CheckSum;
    word Subsystem;
    word DllCharacteristics;
    dword SizeOfStackReserve;
    dword SizeOfStackCommit;
    dword SizeOfHeapReserve;
    dword SizeOfHeapCommit;
    dword LoaderFlags;
    dword NumberOfRvaAndSizes;
    struct IMAGE_DATA_DIRECTORY DataDirectory[16];
};

struct IMAGE_NT_HEADERS32 {
    char Signature[4];
    struct IMAGE_FILE_HEADER FileHeader;
    struct IMAGE_OPTIONAL_HEADER32 OptionalHeader;
};

typedef struct IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;

struct IMAGE_RESOURCE_DATA_ENTRY {
    dword OffsetToData;
    dword Size;
    dword CodePage;
    dword Reserved;
};

typedef struct IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;

struct IMAGE_RESOURCE_DIRECTORY {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    word NumberOfNamedEntries;
    word NumberOfIdEntries;
};

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion;

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion;

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct {
    dword OffsetToDirectory;
    dword DataIsDirectory;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion {
    dword OffsetToData;
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;
};

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct {
    dword NameOffset;
    dword NameIsString;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion {
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;
    dword Name;
    word Id;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion NameUnion;
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion DirectoryUnion;
};

typedef struct IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

typedef union Misc Misc, *PMisc;

typedef enum SectionFlags {
    IMAGE_SCN_TYPE_NO_PAD=8,
    IMAGE_SCN_RESERVED_0001=16,
    IMAGE_SCN_CNT_CODE=32,
    IMAGE_SCN_CNT_INITIALIZED_DATA=64,
    IMAGE_SCN_CNT_UNINITIALIZED_DATA=128,
    IMAGE_SCN_LNK_OTHER=256,
    IMAGE_SCN_LNK_INFO=512,
    IMAGE_SCN_RESERVED_0040=1024,
    IMAGE_SCN_LNK_REMOVE=2048,
    IMAGE_SCN_LNK_COMDAT=4096,
    IMAGE_SCN_GPREL=32768,
    IMAGE_SCN_MEM_16BIT=131072,
    IMAGE_SCN_MEM_PURGEABLE=131072,
    IMAGE_SCN_MEM_LOCKED=262144,
    IMAGE_SCN_MEM_PRELOAD=524288,
    IMAGE_SCN_ALIGN_1BYTES=1048576,
    IMAGE_SCN_ALIGN_2BYTES=2097152,
    IMAGE_SCN_ALIGN_4BYTES=3145728,
    IMAGE_SCN_ALIGN_8BYTES=4194304,
    IMAGE_SCN_ALIGN_16BYTES=5242880,
    IMAGE_SCN_ALIGN_32BYTES=6291456,
    IMAGE_SCN_ALIGN_64BYTES=7340032,
    IMAGE_SCN_ALIGN_128BYTES=8388608,
    IMAGE_SCN_ALIGN_256BYTES=9437184,
    IMAGE_SCN_ALIGN_512BYTES=10485760,
    IMAGE_SCN_ALIGN_1024BYTES=11534336,
    IMAGE_SCN_ALIGN_2048BYTES=12582912,
    IMAGE_SCN_ALIGN_4096BYTES=13631488,
    IMAGE_SCN_ALIGN_8192BYTES=14680064,
    IMAGE_SCN_LNK_NRELOC_OVFL=16777216,
    IMAGE_SCN_MEM_DISCARDABLE=33554432,
    IMAGE_SCN_MEM_NOT_CACHED=67108864,
    IMAGE_SCN_MEM_NOT_PAGED=134217728,
    IMAGE_SCN_MEM_SHARED=268435456,
    IMAGE_SCN_MEM_EXECUTE=536870912,
    IMAGE_SCN_MEM_READ=1073741824,
    IMAGE_SCN_MEM_WRITE=2147483648
} SectionFlags;

union Misc {
    dword PhysicalAddress;
    dword VirtualSize;
};

struct IMAGE_SECTION_HEADER {
    char Name[8];
    union Misc Misc;
    ImageBaseOffset32 VirtualAddress;
    dword SizeOfRawData;
    dword PointerToRawData;
    dword PointerToRelocations;
    dword PointerToLinenumbers;
    word NumberOfRelocations;
    word NumberOfLinenumbers;
    enum SectionFlags Characteristics;
};

typedef struct IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32, *PIMAGE_THUNK_DATA32;

struct IMAGE_THUNK_DATA32 {
    dword StartAddressOfRawData;
    dword EndAddressOfRawData;
    dword AddressOfIndex;
    dword AddressOfCallBacks;
    dword SizeOfZeroFill;
    dword Characteristics;
};

typedef struct ImgDelayDescr ImgDelayDescr, *PImgDelayDescr;

struct ImgDelayDescr {
    dword grAttrs;
    ImageBaseOffset32 szName;
    ImageBaseOffset32 phmod;
    ImageBaseOffset32 pIAT;
    ImageBaseOffset32 pINT;
    ImageBaseOffset32 pBoundIAT;
    ImageBaseOffset32 pUnloadIAT;
    dword dwTimeStamp;
};

typedef struct StringFileInfo StringFileInfo, *PStringFileInfo;

struct StringFileInfo {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct StringInfo StringInfo, *PStringInfo;

struct StringInfo {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct StringTable StringTable, *PStringTable;

struct StringTable {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct Var Var, *PVar;

struct Var {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct VarFileInfo VarFileInfo, *PVarFileInfo;

struct VarFileInfo {
    word wLength;
    word wValueLength;
    word wType;
};

typedef struct VS_VERSION_INFO VS_VERSION_INFO, *PVS_VERSION_INFO;

typedef unsigned short    wchar16;
struct VS_VERSION_INFO {
    word StructLength;
    word ValueLength;
    word StructType;
    wchar16 Info[16];
    byte Padding[2];
    dword Signature;
    word StructVersion[2];
    word FileVersion[4];
    word ProductVersion[4];
    dword FileFlagsMask[2];
    dword FileFlags;
    dword FileOS;
    dword FileType;
    dword FileSubtype;
    dword FileTimestamp;
};

typedef struct _PROPSHEETHEADERW_V2 _PROPSHEETHEADERW_V2, *P_PROPSHEETHEADERW_V2;

typedef union _union_1964 _union_1964, *P_union_1964;

typedef union _union_1965 _union_1965, *P_union_1965;

typedef union _union_1966 _union_1966, *P_union_1966;

typedef int (* PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);

typedef union _union_1967 _union_1967, *P_union_1967;

typedef struct HPALETTE__ HPALETTE__, *PHPALETTE__;

typedef struct HPALETTE__ * HPALETTE;

typedef union _union_1968 _union_1968, *P_union_1968;

typedef struct HICON__ HICON__, *PHICON__;

typedef struct HICON__ * HICON;

typedef struct _PROPSHEETPAGEW _PROPSHEETPAGEW, *P_PROPSHEETPAGEW;

typedef struct _PROPSHEETPAGEW PROPSHEETPAGEW_V4;

typedef PROPSHEETPAGEW_V4 * LPCPROPSHEETPAGEW_V4;

typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW;

typedef struct _PSP _PSP, *P_PSP;

typedef struct _PSP * HPROPSHEETPAGE;

typedef union _union_1946 _union_1946, *P_union_1946;

typedef union _union_1947 _union_1947, *P_union_1947;

typedef INT_PTR (* DLGPROC)(HWND, UINT, WPARAM, LPARAM);

typedef UINT (* LPFNPSPCALLBACKW)(HWND, UINT, struct _PROPSHEETPAGEW *);

typedef union _union_1948 _union_1948, *P_union_1948;

typedef struct DLGTEMPLATE DLGTEMPLATE, *PDLGTEMPLATE;

typedef struct DLGTEMPLATE * LPCDLGTEMPLATEA;

typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;

typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;

struct _PSP {
};

union _union_1947 {
    HICON hIcon;
    LPCWSTR pszIcon;
};

union _union_1946 {
    LPCWSTR pszTemplate;
    PROPSHEETPAGE_RESOURCE pResource;
};

union _union_1948 {
    HBITMAP hbmHeader;
    LPCWSTR pszbmHeader;
};

struct _PROPSHEETPAGEW {
    DWORD dwSize;
    DWORD dwFlags;
    HINSTANCE hInstance;
    union _union_1946 u;
    union _union_1947 u2;
    LPCWSTR pszTitle;
    DLGPROC pfnDlgProc;
    LPARAM lParam;
    LPFNPSPCALLBACKW pfnCallback;
    UINT * pcRefParent;
    LPCWSTR pszHeaderTitle;
    LPCWSTR pszHeaderSubTitle;
    HANDLE hActCtx;
    union _union_1948 u3;
};

struct HPALETTE__ {
    int unused;
};

struct HICON__ {
    int unused;
};

union _union_1966 {
    LPCPROPSHEETPAGEW ppsp;
    HPROPSHEETPAGE * phpage;
};

union _union_1964 {
    HICON hIcon;
    LPCWSTR pszIcon;
};

union _union_1968 {
    HBITMAP hbmHeader;
    LPCWSTR pszbmHeader;
};

union _union_1965 {
    UINT nStartPage;
    LPCWSTR pStartPage;
};

union _union_1967 {
    HBITMAP hbmWatermark;
    LPCWSTR pszbmWatermark;
};

struct _PROPSHEETHEADERW_V2 {
    DWORD dwSize;
    DWORD dwFlags;
    HWND hwndParent;
    HINSTANCE hInstance;
    union _union_1964 u;
    LPCWSTR pszCaption;
    UINT nPages;
    union _union_1965 u2;
    union _union_1966 u3;
    PFNPROPSHEETCALLBACK pfnCallback;
    union _union_1967 u4;
    HPALETTE hplWatermark;
    union _union_1968 u5;
};

struct DLGTEMPLATE {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
};

typedef struct _PROPSHEETHEADERW_V2 PROPSHEETHEADERW_V2;

typedef PROPSHEETHEADERW_V2 * LPCPROPSHEETHEADERW_V2;

typedef LPCPROPSHEETHEADERW_V2 LPCPROPSHEETHEADERW;

typedef struct _AppBarData _AppBarData, *P_AppBarData;

typedef struct tagRECT tagRECT, *PtagRECT;

typedef struct tagRECT RECT;

struct tagRECT {
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
};

struct _AppBarData {
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam;
};

typedef struct _NOTIFYICONDATAW _NOTIFYICONDATAW, *P_NOTIFYICONDATAW;

struct _NOTIFYICONDATAW {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;
    WCHAR szTip[64];
};

typedef struct _SHELLEXECUTEINFOW _SHELLEXECUTEINFOW, *P_SHELLEXECUTEINFOW;


/* WARNING! conflicting data type names: /WinDef.h/ULONG - /wtypes.h/ULONG */

typedef struct HKEY__ HKEY__, *PHKEY__;

typedef struct HKEY__ * HKEY;

typedef union _union_1208 _union_1208, *P_union_1208;

struct HKEY__ {
    int unused;
};

union _union_1208 {
    HANDLE hIcon;
};

struct _SHELLEXECUTEINFOW {
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR lpVerb;
    LPCWSTR lpFile;
    LPCWSTR lpParameters;
    LPCWSTR lpDirectory;
    int nShow;
    HINSTANCE hInstApp;
    void * lpIDList;
    LPCWSTR lpClass;
    HKEY hkeyClass;
    DWORD dwHotKey;
    union _union_1208 u;
    HANDLE hProcess;
};

typedef struct _SHFILEINFOW _SHFILEINFOW, *P_SHFILEINFOW;

struct _SHFILEINFOW {
    HICON hIcon;
    int iIcon;
    DWORD dwAttributes;
    WCHAR szDisplayName[260];
    WCHAR szTypeName[80];
};

typedef struct _SHFILEOPSTRUCTW _SHFILEOPSTRUCTW, *P_SHFILEOPSTRUCTW;

typedef WORD FILEOP_FLAGS;

typedef void * LPVOID;

struct _SHFILEOPSTRUCTW {
    HWND hwnd;
    UINT wFunc;
    LPCWSTR pFrom;
    LPCWSTR pTo;
    FILEOP_FLAGS fFlags;
    BOOL fAnyOperationsAborted;
    LPVOID hNameMappings;
    LPCWSTR lpszProgressTitle;
};

typedef struct HDROP__ HDROP__, *PHDROP__;

typedef struct HDROP__ * HDROP;

struct HDROP__ {
    int unused;
};

typedef struct _SHFILEOPSTRUCTW * LPSHFILEOPSTRUCTW;

typedef struct _AppBarData * PAPPBARDATA;

typedef struct _NOTIFYICONDATAW * PNOTIFYICONDATAW;

typedef struct _SHELLEXECUTEINFOW SHELLEXECUTEINFOW;

typedef struct _SHFILEINFOW SHFILEINFOW;

typedef struct _browseinfoW _browseinfoW, *P_browseinfoW;

typedef struct _ITEMIDLIST _ITEMIDLIST, *P_ITEMIDLIST;

typedef struct _ITEMIDLIST ITEMIDLIST;

typedef ITEMIDLIST * LPCITEMIDLIST;

typedef int (* BFFCALLBACK)(HWND, UINT, LPARAM, LPARAM);

typedef struct _SHITEMID _SHITEMID, *P_SHITEMID;

typedef struct _SHITEMID SHITEMID;

typedef ushort USHORT;

struct _SHITEMID {
    USHORT cb;
    BYTE abID[1];
};

struct _ITEMIDLIST {
    SHITEMID mkid;
};

struct _browseinfoW {
    HWND hwndOwner;
    LPCITEMIDLIST pidlRoot;
    LPWSTR pszDisplayName;
    LPCWSTR lpszTitle;
    UINT ulFlags;
    BFFCALLBACK lpfn;
    LPARAM lParam;
    int iImage;
};

typedef struct _browseinfoW * LPBROWSEINFOW;

typedef HANDLE HTHEME;

typedef struct IEnumIDList IEnumIDList, *PIEnumIDList;

typedef struct IEnumIDListVtbl IEnumIDListVtbl, *PIEnumIDListVtbl;

typedef ITEMIDLIST * LPITEMIDLIST;

struct IEnumIDList {
    struct IEnumIDListVtbl * lpVtbl;
};

struct IEnumIDListVtbl {
    HRESULT (* QueryInterface)(struct IEnumIDList *, IID *, void * *);
    ULONG (* AddRef)(struct IEnumIDList *);
    ULONG (* Release)(struct IEnumIDList *);
    HRESULT (* Next)(struct IEnumIDList *, ULONG, LPITEMIDLIST *, ULONG *);
    HRESULT (* Skip)(struct IEnumIDList *, ULONG);
    HRESULT (* Reset)(struct IEnumIDList *);
    HRESULT (* Clone)(struct IEnumIDList *, struct IEnumIDList * *);
};

typedef struct IShellFolder IShellFolder, *PIShellFolder;

typedef struct IShellFolderVtbl IShellFolderVtbl, *PIShellFolderVtbl;

typedef DWORD SHCONTF;

typedef ULONG SFGAOF;

typedef DWORD SHGDNF;

typedef struct _STRRET _STRRET, *P_STRRET;

typedef struct _STRRET STRRET;

typedef union _union_3885 _union_3885, *P_union_3885;

struct IShellFolder {
    struct IShellFolderVtbl * lpVtbl;
};

struct IShellFolderVtbl {
    HRESULT (* QueryInterface)(struct IShellFolder *, IID *, void * *);
    ULONG (* AddRef)(struct IShellFolder *);
    ULONG (* Release)(struct IShellFolder *);
    HRESULT (* ParseDisplayName)(struct IShellFolder *, HWND, struct IBindCtx *, LPWSTR, ULONG *, LPITEMIDLIST *, ULONG *);
    HRESULT (* EnumObjects)(struct IShellFolder *, HWND, SHCONTF, struct IEnumIDList * *);
    HRESULT (* BindToObject)(struct IShellFolder *, LPCITEMIDLIST, struct IBindCtx *, IID *, void * *);
    HRESULT (* BindToStorage)(struct IShellFolder *, LPCITEMIDLIST, struct IBindCtx *, IID *, void * *);
    HRESULT (* CompareIDs)(struct IShellFolder *, LPARAM, LPCITEMIDLIST, LPCITEMIDLIST);
    HRESULT (* CreateViewObject)(struct IShellFolder *, HWND, IID *, void * *);
    HRESULT (* GetAttributesOf)(struct IShellFolder *, UINT, LPCITEMIDLIST *, SFGAOF *);
    HRESULT (* GetUIObjectOf)(struct IShellFolder *, HWND, UINT, LPCITEMIDLIST *, IID *, UINT *, void * *);
    HRESULT (* GetDisplayNameOf)(struct IShellFolder *, LPCITEMIDLIST, SHGDNF, STRRET *);
    HRESULT (* SetNameOf)(struct IShellFolder *, HWND, LPCITEMIDLIST, LPCWSTR, SHGDNF, LPITEMIDLIST *);
};

union _union_3885 {
    LPWSTR pOleStr;
    UINT uOffset;
    char cStr[260];
};

struct _STRRET {
    UINT uType;
    union _union_3885 u;
};

typedef struct exception exception, *Pexception;

struct exception { /* PlaceHolder Class Structure */
};

typedef struct regex_error regex_error, *Pregex_error;

struct regex_error { /* PlaceHolder Class Structure */
};

typedef uint uintptr_t;

typedef void (* _invalid_parameter_handler)(wchar_t *, wchar_t *, wchar_t *, uint, uintptr_t);

typedef int (* _onexit_t)(void);

typedef wchar_t * STRSAFE_LPCWSTR;

typedef wchar_t * STRSAFE_LPWSTR;

typedef struct IUnknown * LPUNKNOWN;

typedef char * va_list;

typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard=0,
    FindExInfoBasic=1,
    FindExInfoMaxInfoLevel=2
} _FINDEX_INFO_LEVELS;

typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch=0,
    FindExSearchLimitToDirectories=1,
    FindExSearchLimitToDevices=2,
    FindExSearchMaxSearchOp=3
} _FINDEX_SEARCH_OPS;

typedef struct _OVERLAPPED _OVERLAPPED, *P_OVERLAPPED;

typedef union _union_518 _union_518, *P_union_518;

typedef struct _struct_519 _struct_519, *P_struct_519;

struct _struct_519 {
    DWORD Offset;
    DWORD OffsetHigh;
};

union _union_518 {
    struct _struct_519 s;
    PVOID Pointer;
};

struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union _union_518 u;
    HANDLE hEvent;
};

typedef struct _SECURITY_ATTRIBUTES _SECURITY_ATTRIBUTES, *P_SECURITY_ATTRIBUTES;

struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
};

typedef struct _STARTUPINFOW _STARTUPINFOW, *P_STARTUPINFOW;

typedef BYTE * LPBYTE;

struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};

typedef struct _struct_531 _struct_531, *P_struct_531;

struct _struct_531 {
    WORD wProcessorArchitecture;
    WORD wReserved;
};

typedef struct _SYSTEM_INFO _SYSTEM_INFO, *P_SYSTEM_INFO;

typedef union _union_530 _union_530, *P_union_530;

union _union_530 {
    DWORD dwOemId;
    struct _struct_531 s;
};

struct _SYSTEM_INFO {
    union _union_530 u;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
};

typedef struct _SYSTEMTIME _SYSTEMTIME, *P_SYSTEMTIME;

struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
};

typedef struct _WIN32_FIND_DATAW _WIN32_FIND_DATAW, *P_WIN32_FIND_DATAW;

struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[260];
    WCHAR cAlternateFileName[14];
};

typedef enum _FINDEX_INFO_LEVELS FINDEX_INFO_LEVELS;

typedef enum _FINDEX_SEARCH_OPS FINDEX_SEARCH_OPS;

typedef struct _RTL_CRITICAL_SECTION _RTL_CRITICAL_SECTION, *P_RTL_CRITICAL_SECTION;

typedef struct _RTL_CRITICAL_SECTION * PRTL_CRITICAL_SECTION;

typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef struct _RTL_CRITICAL_SECTION_DEBUG _RTL_CRITICAL_SECTION_DEBUG, *P_RTL_CRITICAL_SECTION_DEBUG;

typedef struct _RTL_CRITICAL_SECTION_DEBUG * PRTL_CRITICAL_SECTION_DEBUG;

typedef struct _LIST_ENTRY _LIST_ENTRY, *P_LIST_ENTRY;

typedef struct _LIST_ENTRY LIST_ENTRY;

struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
};

struct _LIST_ENTRY {
    struct _LIST_ENTRY * Flink;
    struct _LIST_ENTRY * Blink;
};

struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION * CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD SpareWORD;
};

typedef struct _OVERLAPPED * LPOVERLAPPED;

typedef struct _SECURITY_ATTRIBUTES * LPSECURITY_ATTRIBUTES;

typedef struct _STARTUPINFOW * LPSTARTUPINFOW;

typedef struct _SYSTEM_INFO * LPSYSTEM_INFO;

typedef struct _SYSTEMTIME * LPSYSTEMTIME;

typedef DWORD (* PTHREAD_START_ROUTINE)(LPVOID);

typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef LONG (* PTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *);

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

typedef struct _WIN32_FIND_DATAW * LPWIN32_FIND_DATAW;

typedef struct _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;

typedef struct _SYSTEMTIME SYSTEMTIME;

typedef struct _CONSOLE_READCONSOLE_CONTROL _CONSOLE_READCONSOLE_CONTROL, *P_CONSOLE_READCONSOLE_CONTROL;

struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
};

typedef struct _CONSOLE_READCONSOLE_CONTROL * PCONSOLE_READCONSOLE_CONTROL;

typedef BOOL (* PHANDLER_ROUTINE)(DWORD);

typedef WORD ATOM;

typedef int (* FARPROC)(void);

typedef struct HACCEL__ HACCEL__, *PHACCEL__;

typedef struct HACCEL__ * HACCEL;

struct HACCEL__ {
    int unused;
};

typedef struct HBRUSH__ HBRUSH__, *PHBRUSH__;

typedef struct HBRUSH__ * HBRUSH;

struct HBRUSH__ {
    int unused;
};

typedef HICON HCURSOR;

typedef struct HDC__ HDC__, *PHDC__;

typedef struct HDC__ * HDC;

struct HDC__ {
    int unused;
};

typedef struct HFONT__ HFONT__, *PHFONT__;

typedef struct HFONT__ * HFONT;

struct HFONT__ {
    int unused;
};

typedef void * HGDIOBJ;

typedef HANDLE HLOCAL;

typedef struct HMENU__ HMENU__, *PHMENU__;

typedef struct HMENU__ * HMENU;

struct HMENU__ {
    int unused;
};

typedef HINSTANCE HMODULE;

typedef struct HMONITOR__ HMONITOR__, *PHMONITOR__;

typedef struct HMONITOR__ * HMONITOR;

struct HMONITOR__ {
    int unused;
};

typedef struct HRGN__ HRGN__, *PHRGN__;

typedef struct HRGN__ * HRGN;

struct HRGN__ {
    int unused;
};

typedef struct HRSRC__ HRSRC__, *PHRSRC__;

typedef struct HRSRC__ * HRSRC;

struct HRSRC__ {
    int unused;
};

typedef int INT;

typedef BOOL * LPBOOL;

typedef RECT * LPCRECT;

typedef void * LPCVOID;

typedef DWORD * LPDWORD;

typedef struct _FILETIME * LPFILETIME;

typedef struct tagPOINT tagPOINT, *PtagPOINT;

typedef struct tagPOINT * LPPOINT;

struct tagPOINT {
    LONG x;
    LONG y;
};

typedef struct tagRECT * LPRECT;

typedef WORD * LPWORD;

typedef LONG_PTR LRESULT;

typedef BYTE * PBYTE;

typedef DWORD * PDWORD;

typedef HKEY * PHKEY;

typedef struct tagPOINT POINT;

typedef ULONG * PULONG;

typedef struct tagLOGFONTW tagLOGFONTW, *PtagLOGFONTW;

typedef struct tagLOGFONTW LOGFONTW;

typedef struct tagTEXTMETRICW tagTEXTMETRICW, *PtagTEXTMETRICW;

typedef struct tagTEXTMETRICW TEXTMETRICW;

typedef int (* OLDFONTENUMPROCW)(LOGFONTW *, TEXTMETRICW *, DWORD, LPARAM);

typedef OLDFONTENUMPROCW FONTENUMPROCW;

struct tagTEXTMETRICW {
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
};

struct tagLOGFONTW {
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
};

typedef struct _cpinfo _cpinfo, *P_cpinfo;

struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
};

typedef DWORD LCTYPE;

typedef BOOL (* LOCALE_ENUMPROCW)(LPWSTR);

typedef struct _cpinfo * LPCPINFO;

typedef struct _IMAGE_SECTION_HEADER _IMAGE_SECTION_HEADER, *P_IMAGE_SECTION_HEADER;

typedef union _union_226 _union_226, *P_union_226;

union _union_226 {
    DWORD PhysicalAddress;
    DWORD VirtualSize;
};

struct _IMAGE_SECTION_HEADER {
    BYTE Name[8];
    union _union_226 Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
};

typedef struct _MEMORY_BASIC_INFORMATION _MEMORY_BASIC_INFORMATION, *P_MEMORY_BASIC_INFORMATION;

struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
};

typedef struct _OSVERSIONINFOEXW _OSVERSIONINFOEXW, *P_OSVERSIONINFOEXW;

struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[128];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
};

typedef struct _OSVERSIONINFOW _OSVERSIONINFOW, *P_OSVERSIONINFOW;

struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[128];
};

typedef struct _SINGLE_LIST_ENTRY _SINGLE_LIST_ENTRY, *P_SINGLE_LIST_ENTRY;

struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY * Next;
};

typedef union _SLIST_HEADER _SLIST_HEADER, *P_SLIST_HEADER;

typedef struct _struct_299 _struct_299, *P_struct_299;

typedef struct _SINGLE_LIST_ENTRY SINGLE_LIST_ENTRY;

struct _struct_299 {
    SINGLE_LIST_ENTRY Next;
    WORD Depth;
    WORD Sequence;
};

union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct _struct_299 s;
};

typedef DWORD ACCESS_MASK;

typedef char CHAR;

typedef ULONGLONG DWORDLONG;

typedef WORD LANGID;

typedef DWORD LCID;

typedef CHAR * LPCSTR;

typedef struct _OSVERSIONINFOEXW * LPOSVERSIONINFOEXW;

typedef struct _OSVERSIONINFOW * LPOSVERSIONINFOW;

typedef CHAR * LPSTR;

typedef WCHAR * LPWCH;

typedef WCHAR * PCNZWCH;

typedef struct _IMAGE_SECTION_HEADER * PIMAGE_SECTION_HEADER;

typedef LARGE_INTEGER * PLARGE_INTEGER;

typedef LONG * PLONG;

typedef struct _MEMORY_BASIC_INFORMATION * PMEMORY_BASIC_INFORMATION;

typedef struct _SINGLE_LIST_ENTRY * PSINGLE_LIST_ENTRY;

typedef union _SLIST_HEADER * PSLIST_HEADER;

typedef WCHAR * PZZWSTR;

typedef short SHORT;

typedef LONG LSTATUS;

typedef ACCESS_MASK REGSAM;

typedef HANDLE HDWP;

typedef struct DLGTEMPLATE * LPCDLGTEMPLATEW;

typedef struct tagMENUITEMINFOW tagMENUITEMINFOW, *PtagMENUITEMINFOW;

typedef struct tagMENUITEMINFOW MENUITEMINFOW;

typedef MENUITEMINFOW * LPCMENUITEMINFOW;

struct tagMENUITEMINFOW {
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
};

typedef struct tagMENUITEMINFOW * LPMENUITEMINFOW;

typedef struct tagMONITORINFO tagMONITORINFO, *PtagMONITORINFO;

typedef struct tagMONITORINFO * LPMONITORINFO;

struct tagMONITORINFO {
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
};

typedef struct tagMSG tagMSG, *PtagMSG;

typedef struct tagMSG * LPMSG;

struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
};

typedef struct tagTPMPARAMS tagTPMPARAMS, *PtagTPMPARAMS;

typedef struct tagTPMPARAMS TPMPARAMS;

typedef TPMPARAMS * LPTPMPARAMS;

struct tagTPMPARAMS {
    UINT cbSize;
    RECT rcExclude;
};

typedef struct tagMSG MSG;

typedef struct tagCOMBOBOXINFO tagCOMBOBOXINFO, *PtagCOMBOBOXINFO;

typedef struct tagCOMBOBOXINFO * PCOMBOBOXINFO;

struct tagCOMBOBOXINFO {
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
};

typedef struct tagWINDOWPLACEMENT tagWINDOWPLACEMENT, *PtagWINDOWPLACEMENT;

struct tagWINDOWPLACEMENT {
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
};

typedef struct tagWNDCLASSW tagWNDCLASSW, *PtagWNDCLASSW;

typedef LRESULT (* WNDPROC)(HWND, UINT, WPARAM, LPARAM);

struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
};

typedef void (* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);

typedef struct tagWINDOWPLACEMENT WINDOWPLACEMENT;

typedef struct tagWNDCLASSW WNDCLASSW;

typedef BOOL (* WNDENUMPROC)(HWND, LPARAM);

typedef ulonglong __uint64;

typedef struct _s__RTTIBaseClassDescriptor _s__RTTIBaseClassDescriptor, *P_s__RTTIBaseClassDescriptor;

typedef struct TypeDescriptor TypeDescriptor, *PTypeDescriptor;

typedef struct _s__RTTIClassHierarchyDescriptor _s__RTTIClassHierarchyDescriptor, *P_s__RTTIClassHierarchyDescriptor;

typedef struct _s__RTTIClassHierarchyDescriptor RTTIClassHierarchyDescriptor;

typedef struct _s__RTTIBaseClassDescriptor RTTIBaseClassDescriptor;

struct _s__RTTIBaseClassDescriptor {
    struct TypeDescriptor * pTypeDescriptor; /* ref to TypeDescriptor (RTTI 0) for class */
    dword numContainedBases; /* count of extended classes in BaseClassArray (RTTI 2) */
    struct PMD where; /* member displacement structure */
    dword attributes; /* bit flags */
    RTTIClassHierarchyDescriptor * pClassHierarchyDescriptor; /* ref to ClassHierarchyDescriptor (RTTI 3) for class */
};

struct TypeDescriptor {
    void * pVFTable;
    void * spare;
    char name[0];
};

struct _s__RTTIClassHierarchyDescriptor {
    dword signature;
    dword attributes; /* bit flags */
    dword numBaseClasses; /* number of base classes (i.e. rtti1Count) */
    RTTIBaseClassDescriptor * * pBaseClassArray; /* ref to BaseClassArray (RTTI 2) */
};

typedef struct _s__RTTICompleteObjectLocator _s__RTTICompleteObjectLocator, *P_s__RTTICompleteObjectLocator;

struct _s__RTTICompleteObjectLocator {
    dword signature;
    dword offset; /* offset of vbtable within class */
    dword cdOffset; /* constructor displacement offset */
    struct TypeDescriptor * pTypeDescriptor; /* ref to TypeDescriptor (RTTI 0) for class */
    RTTIClassHierarchyDescriptor * pClassDescriptor; /* ref to ClassHierarchyDescriptor (RTTI 3) */
};

typedef struct _s_ESTypeList _s_ESTypeList, *P_s_ESTypeList;

typedef struct _s_HandlerType _s_HandlerType, *P_s_HandlerType;

typedef struct _s_HandlerType HandlerType;

struct _s_HandlerType {
    uint adjectives;
    struct TypeDescriptor * pType;
    ptrdiff_t dispCatchObj;
    void * addressOfHandler;
};

struct _s_ESTypeList {
    int nCount;
    HandlerType * pTypeArray;
};

typedef struct _s_FuncInfo _s_FuncInfo, *P_s_FuncInfo;

typedef struct _s_UnwindMapEntry _s_UnwindMapEntry, *P_s_UnwindMapEntry;

typedef struct _s_UnwindMapEntry UnwindMapEntry;

typedef struct _s_TryBlockMapEntry _s_TryBlockMapEntry, *P_s_TryBlockMapEntry;

typedef struct _s_TryBlockMapEntry TryBlockMapEntry;

typedef struct _s_ESTypeList ESTypeList;

struct _s_FuncInfo {
    uint magicNumber_and_bbtFlags;
    __ehstate_t maxState;
    UnwindMapEntry * pUnwindMap;
    uint nTryBlocks;
    TryBlockMapEntry * pTryBlockMap;
    uint nIPMapEntries;
    void * pIPToStateMap;
    ESTypeList * pESTypeList;
    int EHFlags;
};

struct _s_UnwindMapEntry {
    __ehstate_t toState;
    void (* action)(void);
};

struct _s_TryBlockMapEntry {
    __ehstate_t tryLow;
    __ehstate_t tryHigh;
    __ehstate_t catchHigh;
    int nCatches;
    HandlerType * pHandlerArray;
};

typedef struct _s_FuncInfo FuncInfo;

typedef struct pairNode pairNode, *PpairNode;

struct pairNode { /* PlaceHolder Class Structure */
};

typedef struct _s__RTTICompleteObjectLocator RTTICompleteObjectLocator;

typedef struct type_info type_info, *Ptype_info;

struct type_info { /* PlaceHolder Class Structure */
};

